<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: solr | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/solr/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2015-04-02T16:07:48+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[今更 Solr 入門]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/13/solr-sample/"/>
    <updated>2014-02-13T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/13/solr-sample</id>
    <content type="html"><![CDATA[<p>{% include JB/setup %}</p>

<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">この記事について</a></li>
  <li><a href="#section-1">予備知識</a>    <ul>
      <li><a href="#apache-solr-">Apache Solr とは</a></li>
      <li><a href="#lucene-">Lucene とは</a></li>
    </ul>
  </li>
  <li><a href="#section-2">スキーマを作ってみよう</a>    <ul>
      <li><a href="#section-3">フィールドタイプについて</a></li>
      <li><a href="#section-4">フィールドについて</a>        <ul>
          <li><a href="#section-5">テキストフィールドの定義</a></li>
          <li><a href="#section-6">ダイナミックフィールド</a></li>
          <li><a href="#section-7">ユニークキーフィールド</a></li>
          <li><a href="#section-8">コピーフィールド</a></li>
        </ul>
      </li>
      <li><a href="#core-admin--core-">core admin で core を作成</a></li>
    </ul>
  </li>
  <li><a href="#section-9">サンプルデータを入れてみよう</a></li>
  <li><a href="#dihdataimporthandler-">DIH(DataImportHandler) について</a>    <ul>
      <li><a href="#solr-config-">solr config に記述する</a></li>
      <li><a href="#mysql--connector-">mysql の connector をダウンロードして設置</a></li>
      <li><a href="#mysql--db-data-configxml-">mysql の設定, db-data-config.xml の設定など</a></li>
    </ul>
  </li>
  <li><a href="#deltaquery-">deltaQuery について</a>    <ul>
      <li><a href="#deltaquery--parentdeltaquery-">deltaQuery と parentDeltaQuery の関係</a></li>
    </ul>
  </li>
  <li><a href="#deletedpkquery-">(2014/5/12追記) deletedPkQuery について</a></li>
  <li><a href="#timezone-">(2014/5/12追記) Timezone の扱い</a></li>
  <li><a href="#dih--javascript-">DIH の直前で Javascript でデータを加工する</a>    <ul>
      <li><a href="#updatehandler--updatechain">UpdateHandler と UpdateChain</a></li>
      <li><a href="#section-10">なんかうまくいかない場合</a></li>
    </ul>
  </li>
  <li><a href="#url">参考URL</a></li>
</ul>

<h2 id="section">この記事について</h2>
<p>今更ながら Solr に興味が出てきたので、自分用にまとめてみる。<br />
あくまで自分用なので、ある程度わかっている人じゃないと本記事は無意味です。恐縮ながら。<br />
前提として、 この記事は <a href="http://www.amazon.co.jp/Apache-Solr%E5%85%A5%E9%96%80-~%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3-Software-Design/dp/4774161632">改訂新版 Apache Solr入門 ~オープンソース全文検索エンジン</a> を読みながら進めた。   </p>

<p>まずは、予備知識として Apache Solr とはなにか、 Lucene とはなにかについて書く。<br />
次に、スキーマを作って、サンプルデータ を 手動でのデータインポートで index に登録する手順について書く。<br />
手動でのデータインポートは大変なので、mysql からデータをインポートするクローラ(DIH)について書く。
最後に、 MySQL にある json を保存するカラムのデータを、 Javascript を使って整形し、 index に保存することについて書く。  </p>

<h2 id="section-1">予備知識</h2>

<h3 id="apache-solr-">Apache Solr とは</h3>
<p>全文検索システムである。<br />
全文検索エンジン Lucene をベースに、管理画面やキャッシュ、クラスタリングなどの機能がある。<br />
ちなみに Java で書かれている。<br />
<a href="http://ja.wikipedia.org/wiki/Apache_Solr">http://ja.wikipedia.org/wiki/Apache_Solr</a></p>

<h3 id="lucene-">Lucene とは</h3>
<p>{% blockquote %}
Lucene（ルシーン）は、Javaで記述された全文検索ソフトウェアである。
あらかじめ蓄積した大量のデータから、指定したキーワードを探し出す機能を持つ。Javaのクラスライブラリとして提供される。
{% endblockquote %}
<a href="http://ja.wikipedia.org/wiki/Lucene">http://ja.wikipedia.org/wiki/Lucene</a>
なるほど。</p>

<h2 id="section-2">スキーマを作ってみよう</h2>
<p>スキーマを作って、サンプルデータを入れてみる。<br />
ここでは、 料理人が複数いて、自分の料理をうるみたいなものを想定する。<br />
Solr の schema.xml で、スキーマを定義することができる。  </p>

<p>以下に、 schema.xml の fileds の設定例を載せる。<br />
{% highlight xml %}</p>
<fields>
    <field name="recipe_id" type="int" indexed="true" stored="true" required="true" />
    <field name="chef" type="text_ja" indexed="true" stored="true" />
    <field name="recipe_name" type="text_ja" indexed="true" stored="true" />
    <field name="genre" type="text_ja" indexed="true" stored="true" multivalued="true" />
    <field name="price" type="int" indexed="true" stored="true" />
    <field name="_version_" type="long" indexed="true" stored="true" />
  </fields>
<p>{% endhighlight %}</p>

<h3 id="section-3">フィールドタイプについて</h3>
<ul>
  <li>fieldType は自分で xml を用いて定義することができる</li>
  <li>それらの名前付けとかには習慣がある</li>
  <li>基本的な型については定義されているので、それを利用する</li>
</ul>

<h3 id="section-4">フィールドについて</h3>

<h4 id="section-5">テキストフィールドの定義</h4>
<ul>
  <li>name は filed 名</li>
  <li>type は filedType</li>
  <li>indexed は、 このフィールドを検索対象、ソート対象、 ファセット対象にするか(true:する)</li>
  <li>stored は、 このフィールドの値をそのまま index するか(true:する)</li>
  <li>required は、 必須かどうか</li>
  <li>multivalued は、 複数値を持てるかどうか</li>
  <li>omitNorms は、 検索したドキュメントの長さによる重み付け
    <ul>
      <li>(短ければ当然、見つけるものに近いのでポイントが高く、逆に長ければ、それにヒットする確率が高いので値は低い。)</li>
    </ul>
  </li>
</ul>

<h4 id="section-6">ダイナミックフィールド</h4>
<ul>
  <li>動的にフィールド名が決定するもの</li>
  <li>schema.xml を変更しなくても、そのフィールド名を登録したり検索したりすることができるようになる</li>
</ul>

<h4 id="section-7">ユニークキーフィールド</h4>
<ul>
  <li>文書内で unique に特定できるようにするフィールド</li>
  <li>差分更新したい場合には必須</li>
  <li>指定はオプション</li>
  <li>
    <uniquekey>url</uniquekey>
  </li>
</ul>

<h4 id="section-8">コピーフィールド</h4>
<ul>
  <li>ドキュメントへのインデックス登録時に copyField の source から dest へコピーする</li>
  <li>dest に同じものを複数指定する場合は multiValued が true である必要がある</li>
</ul>

<h3 id="core-admin--core-">core admin で core を作成</h3>
<p>collection1 をコピーして, schema.xml を編集。<br />
elevate が評価されてダメっぽかったのでコメントアウト。<br />
すると、うまく load できた。</p>

<h2 id="section-9">サンプルデータを入れてみよう</h2>
<p>だいたいこんなかんじの data.json を用意して
{% highlight json %}
[                                                                            <br />
{                                                                            <br />
    “recipe_id”:”1”,                                                         <br />
    “chef”:”vimtaku”,                                                        <br />
    “recipe_name”:”vim の炒めもの”,                                          <br />
    “genre”:[“和食”, “洋食”],                                                <br />
    “price”:980                                                              <br />
},                                                                           <br />
{                                                                            <br />
    “recipe_id”:”2”,                                                         <br />
    “chef”:”noro”,                                                           <br />
    “recipe_name”:”emacs 焼き”,                                              <br />
    “genre”:[“和食”, “中華”],                                                <br />
    “price”:500                                                              <br />
},                                                                           <br />
{                                                                            <br />
    “recipe_id”:”3”,                                                         <br />
    “chef”:”sublime”,                                                        <br />
    “recipe_name”:”sublime 揚げ”,                                            <br />
    “genre”:[“洋食”],                                                        <br />
    “price”:250                                                              <br />
}                                                                            <br />
] 
{% endhighlight %}</p>

<p>{% highlight bash %}
curl ‘http://localhost:8983/solr/vimtaku/update/json?commit=true’ –data-binary @data.json -H ‘Content-type:application/json;charset:utf-8’
{% endhighlight %}
これで データ登録が完了する。  </p>

<h2 id="dihdataimporthandler-">DIH(DataImportHandler) について</h2>
<p>DIH は DataSource, EntityProccssor, そして設定ファイル(data‐config.xml) から成る。<br />
DIH を使うための設定は、 solrconfig.xml と DIHの設定ファイル data―config にある。  </p>

<h3 id="solr-config-">solr config に記述する</h3>
<p>{% highlight xml %}
<requesthandler name="/dataimport" class="org.apache.solr.handler.dataimport.DatalmportHandler">
<lst name="defaults">
  <str name="config">db-data-config.xml</str>
</lst>
</requesthandler>
{% endhighlight %}</p>

<h3 id="mysql--connector-">mysql の connector をダウンロードして設置</h3>
<p>mysql-connector-java-5.1.29-bin.jar を <a href="http://dev.mysql.com/downloads/connector/j/">http://dev.mysql.com/downloads/connector/j/</a>から落としてきて
dist 以下に設置する。</p>

<h3 id="mysql--db-data-configxml-">mysql の設定, db-data-config.xml の設定など</h3>
<p>そしてだいたいこんなかんじに設置する。 mysql は localhost の 3306 番で動いているものとし、<br />
solrsample っていう database があるものとする。 password は hogehoge とする。  </p>

<p>{% highlight bash %}</p>

<p>diff –git a/conf/db-data-config.xml b/conf/db-data-config.xml
new file mode 100644
index 0000000..c758319
— /dev/null
+++ b/conf/db-data-config.xml
@@ -0,0 +1,24 @@
+<dataconfig>
+    &lt;dataSource type="JdbcDataSource" driver="com.mysql.jdbc.Driver"
+        url="jdbc:mysql://localhost:3306/solrsample"
+        user="vimtaku" password="hogehoge"/&gt;
+    <document>
+        &lt;entity name="recipe_mst" pk="recipe_id"
+            query="select * from recipe_mst"
+            deltaImportQuery="SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}"
+            deltaQuery="select recipe_id from recipe_mst WHERE updated_at &gt;= '${dataimporter.last_index_time}'"&gt;
+            <field column="recipe_id" name="recipe_id" />
+            <field column="recipe_name" name="recipe_name" />
+            <field column="price" name="price" />
+            &lt;entity name="recipe_genre_rel"
+                query="select * from recipe_genre_rel where recipe_id = '${recipe_mst.recipe_id}'"&gt;
+                <entity name="genre_mst" query="select * from genre_mst where genre_id = '${recipe_genre_rel.genre_id}'">
+                    <field column="name" name="genre" />
+                </entity>
+            &lt;/entity&gt;
+            <entity name="chef_mst" query="select * from chef_mst where chef_id = '${recipe_mst.chef_id}'">
+                <field column="name" name="chef" />
+            </entity>
+        &lt;/entity&gt;
+    </document>
+</dataconfig>
diff –git a/conf/solrconfig.xml b/conf/solrconfig.xml
index 00b7555..2d19133 100644
— a/conf/solrconfig.xml
+++ b/conf/solrconfig.xml
@@ -84,6 +84,9 @@
   <lib dir="../../../contrib/velocity/lib" regex=".*\.jar" />
   <lib dir="../../../dist/" regex="solr-velocity-\d.*\.jar" /></p>

<ul>
  <li>
    <lib dir="../../../dist/" regex="solr-dataimporthandler-.*\.jar" />
  </li>
  <li>
    <lib dir="../../../dist/" regex="mysql.*\.jar" />

    <p>+
&lt;!– an exact ‘path’ can be used instead of a ‘dir’ to specify a
     specific jar file.  This will cause a serious error to be logged
     if it can’t be loaded.
@@ -1513,6 +1516,15 @@
&lt;/requestHandler&gt;</p>
  </li>
  <li>&lt;requestHandler name=”/dataimport”</li>
  <li>class=”org.apache.solr.handler.dataimport.DataImportHandler”&gt;</li>
  <li>
    <lst name="defaults">
</lst>
  </li>
  <li>
    <str name="config">db-data-config.xml</str>
    <p>{% endhighlight %}</p>
  </li>
</ul>

<p>だいたいこんなかんじで、管理画面から /dataimport で full-import するといける。</p>

<h2 id="deltaquery-">deltaQuery について</h2>
<p>差分 update(delta-import) のとき、deltaQuery がまず、実行される。
deltaQuery は どんなに nest が深くても実行される(たぶん)。</p>

<h3 id="deltaquery--parentdeltaquery-">deltaQuery と parentDeltaQuery の関係</h3>
<ul>
  <li>deltaQuery で mysql のレコードがヒットした場合に、 parentDeltaQuery が呼び出される</li>
  <li>parentDeltaQuery では ${chef_mst.chef_id} のように、 deltaQuery でヒットしたものが使える</li>
  <li>parentDeltaQuery で、 pk の 値を select するようにしておく。</li>
  <li>pk のある entity に、
    <ul>
      <li>deltaImportQuery 属性がなくて query 属性がある場合には where pk = ‘’ としてクエリが実行され再登録される模様</li>
      <li>deltaImportQuery 属性がある場合にはそのクエリが実行される。</li>
    </ul>
  </li>
</ul>

<p>例えば</p>

<p>{% highlight xml %}</p>
<dataconfig>
    <datasource type="JdbcDataSource" driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/solrsample" user="vimtaku" password="hogehoge" />
    <document>
        <entity name="recipe_mst" pk="recipe_id" query="select * from recipe_mst" deltaimportquery="SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}" deltaquery="select recipe_id from recipe_mst WHERE updated_at &gt;= '${dataimporter.last_index_time}'">
            <field column="recipe_id" name="recipe_id" />
            <field column="recipe_name" name="recipe_name" />
            <field column="price" name="price" />
            <entity name="recipe_genre_rel" query="select * from recipe_genre_rel where recipe_id = '${recipe_mst.recipe_id}'">
                <entity name="genre_mst" query="select * from genre_mst where genre_id = '${recipe_genre_rel.genre_id}'">
                    <field column="name" name="genre" />
                </entity>
            </entity>
            <entity name="chef_mst" pk="chef_id" query="select * from chef_mst where chef_id = '${recipe_mst.chef_id}'" deltaquery="select chef_id from chef_mst where chef_id = 1" parentdeltaquery="select recipe_id from chef_mst where chef_id = ${chef_mst.chef_id} limit 1">
                <field column="name" name="chef" />
            </entity>
        </entity>
    </document>
</dataconfig>
<p>{% endhighlight %}</p>

<p>こうなっていた場合、<br />
deltaQuery=”select chef_id from chef_mst where chef_id = 1”<br />
これでヒットした chef_id を元に<br />
parentDeltaQuery=”select recipe_id from chef_mst where chef_id = ${chef_mst.chef_id} limit 1”<br />
が実行されて、<br />
deltaImportQuery=”SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}”<br />
これが実行される。  </p>

<h2 id="deletedpkquery-">(2014/5/12追記) deletedPkQuery について</h2>
<p>deltaImportQuery では、インデックスにのったデータの削除はされない。<br />
なので、データを削除する場合は deletedPkQuery を使用する。<br />
deletedPkQuery=”SELECT * FROM chef_mst WHERE status = 0”<br />
のようにしておけば status = 0 の chef が削除できる。  </p>

<h2 id="timezone-">(2014/5/12追記) Timezone の扱い</h2>
<p>Solr のクラスタを動かすマシンによると思うが、マシンの timezone が JST, mysql の timezone が UTC などの場合も<br />
普通にあると思う。なので<br />
CONVERT_TZ(‘${dataimporter.last_index_time}’, ‘Asia/Tokyo’, ‘GMT’)<br />
などとして変換してあげるといろいろ捗るかもしれない。  </p>

<h2 id="dih--javascript-">DIH の直前で Javascript でデータを加工する</h2>

<h3 id="updatehandler--updatechain">UpdateHandler と UpdateChain</h3>
<p>UpdateHandler と DIH の仕組みはこの図のようになっている。  </p>

<p><img src="http://gyazo.com/47cc999c6d1a7a31ed9c2bdd0080ce59.png" />
(改訂版 Apache Solr 入門より引用。)</p>

<p>DIH とは疎になっていて、 UpdateHandler はどの requestHandler でも使えるように見える。  </p>

<p>設定には<a href="https://github.com/vimtaku/solr_sample/commit/85c7439d239d55e3344cc20a32461536c3201eb8">この差分</a>
を参照。  </p>

<p>これを使えば、json のカラムからとった json を parse して multiValue なカラムに登録などができる。  </p>

<h3 id="section-10">なんかうまくいかない場合</h3>
<p>キャッシュされたデータを更新するとたまに更新されない。<br />
自分は一回 core を削除、 $SOLR_HOME の data ディレクトリを rm -rf している。<br />
もっといい、データ削除(もしくはいれかえ)の方法知っている人は教えて下さい。。  </p>

<h2 id="url">参考URL</h2>
<p><a href="http://ja.wikipedia.org/wiki/Lucene">http://ja.wikipedia.org/wiki/Lucene</a><br />
<a href="http://wiki.apache.org/solr/DataImportHandler">http://wiki.apache.org/solr/DataImportHandler</a><br />
<a href="http://ochien.seesaa.net/article/153191074.html">http://ochien.seesaa.net/article/153191074.html</a><br />
<a href="http://d.hatena.ne.jp/kudzu/20110513/1305313247">http://d.hatena.ne.jp/kudzu/20110513/1305313247</a><br />
<a href="http://d.hatena.ne.jp/bowez/20100405#p2">http://d.hatena.ne.jp/bowez/20100405#p2</a>  </p>

<p>_</p>

]]></content>
  </entry>
  
</feed>
