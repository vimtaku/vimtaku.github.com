<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2018-12-12T23:23:06+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails で 画像を drag and drop してプレビューして写真をアップロードしたいだけなら ezdz がよかった]]></title>
    <link href="http://vimtaku.github.io/blog/2018/04/29/rails-drag-and-drop-image/"/>
    <updated>2018-04-29T10:25:20+09:00</updated>
    <id>http://vimtaku.github.io/blog/2018/04/29/rails-drag-and-drop-image</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Rails のフォームで、画像をドラッグ・アンド・ドロップでプレビューしてファイルをアップロードしたい欲求があった。<br />
<a href="https://github.com/jaysalvat/ezdz">ezdz</a> というのがあって、それで自分の欲求が満たせましたという話。<br />
(jQuery 依存です)</p>

<h2 id="section">背景</h2>
<p>Rails のフォームを生成していて、画像をドラッグ・アンド・ドロップでプレビューしてファイルをアップロードしたい欲求があった。<br />
(ただし、ここでは単一ファイルのアップロードを前提とする)。<br />
いろいろ調べてみると <a href="http://www.dropzonejs.com/">Dropzone.js</a> というのが結構便利そうだったし、今回は jQuery に依存していたので<br />
これでやってみようとしらべてみた。 dropzone-rails というプラグインがあってすぐに rails に組み込めて楽そうだった。  </p>

<h2 id="dropzone-rails-">dropzone-rails をつかってかんじたつらみ</h2>
<ol>
  <li>新規作成時には entity は保存されていないので、entity を保存してから update するような設計にしないとうまく作りにくい。
    <ul>
      <li>理由は基本的に xhr でデータを送信するから。</li>
      <li>autoprocessQueue を false にすれば、画像を D&amp;D したときにそうしないようにできる。結局 Dropzone のインスタンスの processQueue をコールしないといけない。</li>
      <li>entity がすでに作成されていたら それに対して update をかけるだけでよいのでそういうやり方でいけるならそれでよし。</li>
      <li>もしそれがいやなら temp みたいなよくわからない entity に作成したあとに その uuid を form に埋め込んでサーバで保存するみたいな回りくどいことをしなければいけない気がする</li>
    </ul>
  </li>
  <li>上記の xhr でデータを送信するところに rails との致命的な相性の悪さがある(のはもうわかっているとおもうが)。
    <ul>
      <li>model の validation に引っかかったときなどのハンドリングを js 側に持ってこなければいけない</li>
      <li>すなわち rails の view で頑張ったエラーなどに合わせたりという謎の努力が必要になる。</li>
    </ul>
  </li>
  <li>そもそもそんなにがんばりたくない
    <ul>
      <li>dropzone-rails の js の client のソースコードを結局追って修正したりを繰り返さないとおもったことができなかった</li>
    </ul>
  </li>
</ol>

<h2 id="section-1">代替え案を探すことに</h2>
<p>そもそも自分がやりたいのは</p>

<ul>
  <li>xhr じゃなくてよし</li>
  <li>いったん1ファイルでよし</li>
  <li>画像をプレビューしたい</li>
  <li>jQuery は使用可能(bootstrap4 があるから)</li>
</ul>

<p>だったので、それっぽい代替を探していたら <a href="https://github.com/jaysalvat/ezdz">ezdz</a>  を見つけた。<br />
demo をみたらそれっぽかったし、 rails の binding もあったので必要十分だった。  </p>

<h2 id="section-2">所感</h2>
<p>active storage でもプレビューできるみたいなのがあったのでそういうのを調べても良かったんだけど、<br />
まだ rails5 に至ってないひとはもしかしたら上記が有効かもしれません。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails4 で utf8mb4 にしたい話]]></title>
    <link href="http://vimtaku.github.io/blog/2015/12/09/utf8mb4/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/12/09/utf8mb4</id>
    <content type="html"><![CDATA[<p>自分用のメモ</p>

<h2 id="etcmycnf">/etc/my.cnf</h2>

<p>```
[client]
default-character-set=utf8mb4</p>

<p>[mysqld]
character-set-server=utf8mb4
innodb_file_per_table
innodb_file_format=barracuda
innodb_large_prefix = 1
```</p>

<h2 id="railsrootconfigdatabaseyml">$RAILS_ROOT/config/database.yml</h2>
<p>default に追加</p>

<p><code>
charset: utf8mb4
encoding: utf8mb4
collation: utf8mb4_general_ci
</code></p>

<h2 id="ridgepole--schemafile">ridgepole の Schemafile</h2>
<p>create_table :news, force: true, id: :bigint, options: “ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC” do |t|
    blahblah…
end</p>

<h2 id="section">参考</h2>
<p><a href="http://blog.arith-metic.jp/category/rails">http://blog.arith-metic.jp/category/rails</a>
<a href="http://yamacent.hatenablog.com/entry/2015/06/06/235900">http://yamacent.hatenablog.com/entry/2015/06/06/235900</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wanna test view *_path on my rails console(pry), so what should i do?]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/rails-url-helper/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/rails-url-helper</id>
    <content type="html"><![CDATA[<h2 id="just-do">Just do</h2>

<p>```
pry(main)&gt; include Rails.application.routes.url_helpers</p>

<p>pry(main)&gt; admin_customer_path(User.first)
User Load (0.3ms)  SELECT  <code>users</code>.* FROM <code>users</code>  ORDER BY <code>users</code>.<code>id</code> ASC LIMIT 1
=&gt; “/admin/customers/1”
```</p>

<p>enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<p>If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses.</p>

<h1 id="detail">Detail</h1>

<p>```
class Hoge
  def self.exec
    raise “something is not good” if something_check</p>

<pre><code>ActiveRecord::Base.transaction do
  User.create(username:"moge")
  User.create(username:"moge")
end

rescue StandardError =&gt; e
  # if database transaction has occured, this statements will be called
  p "duplicate error"   end ```
</code></pre>

<p>This code looks good, but includes terrible problem.
It’s definetly rescue clause. In this code, something_check return true, raise “something is not good” error,<br />
<code>and shows "duplicate error"</code>. Terrible.</p>

<p>so if you use ActiveRecord::Base, I strongly recommend use begin rescue clauses implicit.</p>

<p>```
class Hoge
  def self.exec
    raise “something is not good” if something_check</p>

<pre><code>begin
  ActiveRecord::Base.transaction do
    User.create(username:"moge")
    User.create(username:"moge")
  end

  rescue StandardError =&gt; e
    # if database transaction has occured, this statements will be called
    p "duplicate error"
  end
end
</code></pre>

<p>end
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出るときの解決法]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker/"/>
    <updated>2015-04-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker</id>
    <content type="html"><![CDATA[<h1 id="section">概要</h1>
<p>rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出る。<br />
原因は
<a href="http://qiita.com/kuboon/items/1d009e2f89729fe5db78">参考のQiita</a> 参照。  </p>

<p>自分の場合はうまくいかなかったので、ソースおったらここ直せば良さそうだったので<br />
ここを上書きする感じにした。  </p>

<h4 id="configinitializersrailsadminrb">config/initializers/rails_admin.rb</h4>
<p><code>
# Fix for bug when specified japanese datetime string
# http://qiita.com/kuboon/items/1d009e2f89729fe5db78
module RailsAdmin
  module Config
    module Fields
      module Types
        class Datetime &lt; RailsAdmin::Config::Fields::Base
          ## こいつを入れないと変更ない時にダメだった
          def form_value
            I18n.l(self.value, format:localized_date_format)
          end
          def localized_date_format
            "%Y-%m-%d"
          end
        end
      end
    end
  end
end
</code></p>

<p>以上。  </p>
]]></content>
  </entry>
  
</feed>
