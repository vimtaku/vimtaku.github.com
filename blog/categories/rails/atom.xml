<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2017-08-30T12:33:24+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails4 で utf8mb4 にしたい話]]></title>
    <link href="http://vimtaku.github.io/blog/2015/12/09/utf8mb4/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/12/09/utf8mb4</id>
    <content type="html"><![CDATA[<p>自分用のメモ</p>

<h2 id="etcmycnf">/etc/my.cnf</h2>

<p>```
[client]
default-character-set=utf8mb4</p>

<p>[mysqld]
character-set-server=utf8mb4
innodb_file_per_table
innodb_file_format=barracuda
innodb_large_prefix = 1
```</p>

<h2 id="railsrootconfigdatabaseyml">$RAILS_ROOT/config/database.yml</h2>
<p>default に追加</p>

<p><code>
charset: utf8mb4
encoding: utf8mb4
collation: utf8mb4_general_ci
</code></p>

<h2 id="ridgepole--schemafile">ridgepole の Schemafile</h2>
<p>create_table :news, force: true, id: :bigint, options: “ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC” do |t|
    blahblah…
end</p>

<h2 id="section">参考</h2>
<p><a href="http://blog.arith-metic.jp/category/rails">http://blog.arith-metic.jp/category/rails</a>
<a href="http://yamacent.hatenablog.com/entry/2015/06/06/235900">http://yamacent.hatenablog.com/entry/2015/06/06/235900</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wanna test view *_path on my rails console(pry), so what should i do?]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/rails-url-helper/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/rails-url-helper</id>
    <content type="html"><![CDATA[<h2 id="just-do">Just do</h2>

<p>```
pry(main)&gt; include Rails.application.routes.url_helpers</p>

<p>pry(main)&gt; admin_customer_path(User.first)
User Load (0.3ms)  SELECT  <code>users</code>.* FROM <code>users</code>  ORDER BY <code>users</code>.<code>id</code> ASC LIMIT 1
=&gt; “/admin/customers/1”
```</p>

<p>enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<p>If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses.</p>

<h1 id="detail">Detail</h1>

<p>```
class Hoge
  def self.exec
    raise “something is not good” if something_check</p>

<pre><code>ActiveRecord::Base.transaction do
  User.create(username:"moge")
  User.create(username:"moge")
end

rescue StandardError =&gt; e
  # if database transaction has occured, this statements will be called
  p "duplicate error"   end ```
</code></pre>

<p>This code looks good, but includes terrible problem.
It’s definetly rescue clause. In this code, something_check return true, raise “something is not good” error,<br />
<code>and shows "duplicate error"</code>. Terrible.</p>

<p>so if you use ActiveRecord::Base, I strongly recommend use begin rescue clauses implicit.</p>

<p>```
class Hoge
  def self.exec
    raise “something is not good” if something_check</p>

<pre><code>begin
  ActiveRecord::Base.transaction do
    User.create(username:"moge")
    User.create(username:"moge")
  end

  rescue StandardError =&gt; e
    # if database transaction has occured, this statements will be called
    p "duplicate error"
  end
end
</code></pre>

<p>end
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出るときの解決法]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker/"/>
    <updated>2015-04-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker</id>
    <content type="html"><![CDATA[<h1 id="section">概要</h1>
<p>rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出る。<br />
原因は
<a href="http://qiita.com/kuboon/items/1d009e2f89729fe5db78">参考のQiita</a> 参照。  </p>

<p>自分の場合はうまくいかなかったので、ソースおったらここ直せば良さそうだったので<br />
ここを上書きする感じにした。  </p>

<h4 id="configinitializersrailsadminrb">config/initializers/rails_admin.rb</h4>
<p><code>
# Fix for bug when specified japanese datetime string
# http://qiita.com/kuboon/items/1d009e2f89729fe5db78
module RailsAdmin
  module Config
    module Fields
      module Types
        class Datetime &lt; RailsAdmin::Config::Fields::Base
          ## こいつを入れないと変更ない時にダメだった
          def form_value
            I18n.l(self.value, format:localized_date_format)
          end
          def localized_date_format
            "%Y-%m-%d"
          end
        end
      end
    end
  end
end
</code></p>

<p>以上。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jbuilder で 共通パラメータを付与したい時は layout を使うといいかも]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout/"/>
    <updated>2014-03-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout</id>
    <content type="html"><![CDATA[<h2 id="section">前提</h2>
<ul>
  <li>rails4</li>
  <li>jbuilder(1.5.3)</li>
</ul>

<h2 id="section-1">背景</h2>
<p>jbuilder を使うと、 api のレスポンスをシンプルに定義できる。<br />
例えば、hoge_controller.rb#new の場合に<br />
app/views/hoge/new.jbuilder とかを用意しておいて、<br />
そこに template で返したい値などを書いて定義できる。<br />
しかし、共通で値を返したい場合どうするんだってことになって<br />
いろいろ考えた結果以下に落ち着いた。  </p>

<h2 id="section-2">解法</h2>
<p>layout を使う。  </p>

<p>controller にたとえば<br />
layout ‘api/application.jbuilder’ 
などと定義しておく。  </p>

<p>それで上記の例で言うと、 hoge_controller.rb#new では<br />
app/views/hoge/new.jbuilder が呼ばれるので、  </p>

<p>app/views/hoge/new.jbuilder
<div>
  <pre><code class='ruby'>json.from_hoge “from_hoge_param”</code></pre>
</div>
</p>

<p>layouts/api/application.jbuilder<br />
<div>
  <pre><code class='ruby'># common に値を付与
json.common “common_param_is_here”
# controller の @hoge を参照できる
json.hoge @hoge
# template の値を付与
JSON.parse(yield).each do |k,v|
  json.set! k, v
end</code></pre>
</div>

とかしておくと良いのかもしれない。<br />
結果は
{common:”common_param_is_here”, fromHoge:”from_hoge_param”, hoge:”hoge_from_controller”}
てな感じになる。  </p>

<p>ちなみに camelCase には公式の通り、 Jbuilder.key_format camelize: :lower でできる。</p>

<p>上記は、まだ実践してないけど手元で試してみた見たかんじこれで行けそう。  </p>

<h2 id="section-3">所感</h2>
<p>もっといい方法あれば教えて下さい。  </p>

<h2 id="section-4">蛇足</h2>
<p>stack over flow とかで書いてある render! を定義する方法や<br />
json.render JSON.parse(yield)  だとうまく行かなかった。  </p>

]]></content>
  </entry>
  
</feed>
