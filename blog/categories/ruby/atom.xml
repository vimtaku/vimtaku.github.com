<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2018-04-29T10:50:40+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[thor_for_rails_scaffold_generate_path]]></title>
    <link href="http://vimtaku.github.io/blog/2017/08/30/thor-for-rails-scaffold-generate-path/"/>
    <updated>2017-08-30T12:15:08+09:00</updated>
    <id>http://vimtaku.github.io/blog/2017/08/30/thor-for-rails-scaffold-generate-path</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>If you want to override jbuilder generator when scaffolding, put it <code>Rails.root + lib/templates/rails/jbuilder/index.json.jbuilder</code></p>

<p><code>vim /Users/vimtaku/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions.rb</code></p>

<p>```
def find_in_source_paths(file) # rubocop:disable MethodLength
  possible_files = [file, file + TEMPLATE_EXTNAME]
  relative_root = relative_to_original_destination_root(destination_root, false)
  binding.pry</p>

<p>source_paths.each do |source|
    possible_files.each do |f|
      source_file = File.expand_path(f, File.join(source, relative_root))
      return source_file if File.exist?(source_file)
    end
  end
```</p>

<h2 id="background">Background</h2>
<p>I searched pathes for used generator, but I cant find where template is used.
I’m using jbuilder.</p>

<h2 id="libtemplates">lib/templates</h2>
<p><code>Rails.root + lib/templates</code> dir is used as tempaltes path by default.<br />
if you want to override jbuilder templates, you can put<br />
<code>Rails.root + lib/templates/rails/jbuilder/index.json.jbuilder</code>.</p>

<h2 id="see-also">see also</h2>
<p><code>thor-0.19.1/lib/thor/actions/file_manipulation.rb</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ridgepole command gets [ERROR] undefined method index]]></title>
    <link href="http://vimtaku.github.io/blog/2016/08/05/ridgepole-version-index-error/"/>
    <updated>2016-08-05T16:53:16+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/08/05/ridgepole-version-index-error</id>
    <content type="html"><![CDATA[<h2 id="tldl">TL;DL</h2>
<p>You should use newest version of gem definetly.</p>

<h2 id="i-faced-this-error">I faced this error</h2>
<p><code>
[ERROR] undefined method `index' for #&lt;Ridgepole::DSLParser::Context::TableDefinition:0x007fae9aa1b850&gt;
</code></p>

<h2 id="solved">Solved</h2>
<p>This is version problem.</p>

<p>I simply write as follows,</p>

<p><code>
gem 'ridgepole'
</code></p>

<p>but it seems downloads version is 0.5.0.</p>

<p>I finally found 0.6.4 is newest ver for now, so I used it, problem disappeared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model.update_attribute の罠]]></title>
    <link href="http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap/"/>
    <updated>2015-07-14T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>update_attribute で一つだけupdate しようと思ってたら他の属性も変わってて意味不明だった。  </p>

<h2 id="section-1">ヌワー</h2>

<p>```
user = User.first
p user.name  ## “vimtaku”</p>

<p>user.name = “hoge”
user.update_attribute(:age, 100)
##  UPDATE users SET <code>name</code> = ‘hoge’, <code>age</code> = 100 where <code>id</code> = 1</p>

<p>```</p>

<p>結局 user.reload した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubykaigi 2014/ 1日目]]></title>
    <link href="http://vimtaku.github.io/blog/2014/09/18/rubykaigi-firstday/"/>
    <updated>2014-09-18T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/09/18/rubykaigi-firstday</id>
    <content type="html"><![CDATA[<h1 id="rubykaigi-first-day">RubyKaigi first day</h1>

<p>とりあえずまとめてみた。  </p>

<h2 id="key-note-building-the-ruby-interpreter----what-is-easy-and-what-is-difficulthttprubykaigiorg2014presentations-koichisasada"><a href="http://rubykaigi.org/2014/presentation/S-KoichiSasada">(key note) Building the Ruby interpreter – What is easy and what is difficult?</a></h2>

<p>何が簡単で、何が難しいのかという話。  </p>

<h3 id="section">メモ</h3>

<h4 id="section-1">パフォーマンス</h4>
<p>パフォーマンスを単純に上げるのは簡単だが、メンテし易さなどとトレードオフの関係にあるので、<br />
メンテしやすく、さらにパフォーマンスを上げるのは簡単ではない。  </p>

<h4 id="vm">VM</h4>
<p>VM や JIT コンパイルの仕組みなどを作るのはそんなに難しくない。<br />
しかし reliability を保ちながら作るのは難しい。  </p>

<h4 id="section-2">メンテしやすさ</h4>
<p>Ruby の実装を Ruby で実装すればわかりやすいしメンテしやすい。<br />
ruby のコードをいじったあとでは、 テストとか全部通ればまだ良い方(ダメだったら全部通らないから)。  </p>

<h4 id="section-3">並列性</h4>
<p>単純にカーネルレベルスレッドの仕組みを作るのは簡単だが、 ruby のユーザに残念体験を与えないためにあえてそうしてない。<br />
また、スレッドを適切に扱える技術者(ウィザード)は数少ない。という説明もされていた。<br />
同時実行性があり、バグの再現実効性が低いのも大変である。  </p>

<h4 id="gc">GCアルゴリズム</h4>
<p>ライトバリアを実装するのは簡単だが、拡張ライブラリなどにも実装するのは大変。  </p>

<h4 id="section-4">性能評価</h4>
<p>仮想のサーバでは性能評価が難しいので、物理サーバが必要。<br />
実行時間とはなにか。メモリ使用量とは結局なんだろう(平均?最大?)。  </p>

<h4 id="section-5">コミッターになるには</h4>
<p>ただコミッターになるのは、matzにコミッター権限貰えばよい。<br />
しかし、デベロッパーとして参加するのは大変。  </p>

<h4 id="ruby">Ruby(処理系)をもっと知るために</h4>
<p>Rubyソースコード完全解説<br />
<a href="http://i.loveruby.net/ja/rhg/book/">http://i.loveruby.net/ja/rhg/book/</a><br />
Ruby Under a microscope<br />
<a href="http://shop.oreilly.com/product/9781593275273.do">http://shop.oreilly.com/product/9781593275273.do</a><br />
(日本語翻訳中らしい)  </p>

<h4 id="section-6">もっと良い技術者になるために</h4>
<p>新しい技術を調べて<br />
 - ブログを書いて<br />
 - 議論をし<br />
 - sns でチャットして<br />
 - 会議に参加して<br />
 - カンファレンスで発表<br />
していきましょう。</p>

<h3 id="section-7">所感</h3>
<p>さすが ruby コミッターという凄さがあった。<br />
普段 GC とかあまり意識しないけど、知識としてきちんと知っておかなきゃダメだなと思った。  </p>

<h2 id="controller-testing-youre-doing-it-wronghttprubykaigiorg2014presentations-jonathanmukai-heidt"><a href="http://rubykaigi.org/2014/presentation/S-JonathanMukai-Heidt">Controller Testing: You’re Doing It Wrong</a></h2>

<p>やりかた間違ってるよ的な煽りタイトル。</p>

<h3 id="section-8">メモ</h3>

<h4 id="section-9">ダメなことあるある</h4>
<ul>
  <li>いろんなことをテストしようとしちゃっている  </li>
  <li>全部スタブしちゃってる  </li>
</ul>

<h4 id="section-10">コントローラのテストでやるべきこと</h4>
<ul>
  <li>authorization  </li>
  <li>リソースの存在  </li>
  <li>レスポンスの形式  </li>
</ul>

<h4 id="section-11">命令的ではなく、宣言的に</h4>
<ul>
  <li>チェックリストのようにテストを書こう  </li>
</ul>

<h4 id="section-12">実際問題</h4>
<ul>
  <li>5/6 の、今年やったプロジェクトでは、コントローラベタ書きｗｗｗ</li>
</ul>

<h4 id="section-13">なぜファットモデルのほうが良いのか</h4>
<ul>
  <li>ActiveModel で作っておくと良い  </li>
  <li>すごく簡単なロジックでもコントローラに書いていて, それが変更による変更.. となるとすぐ太ってしまう。<br />
 – モデルにしておくほうが良い  </li>
</ul>

<h4 id="section-14">まとめ</h4>
<ul>
  <li>テストは宣言的に、シンプルにかけ  </li>
  <li>コントローラにロジックかくな、モデルにかけ  </li>
</ul>

<h3 id="section-15">所感</h3>
<p>英語のセッションだったけどそこそこ聞き取りやすい英語でよかった。<br />
それでも完全に内容を把握できたわけじゃあないけど。  </p>

<h2 id="continuous-delivery-at-githubhttprubykaigiorg2014presentations-robertsanheim"><a href="http://rubykaigi.org/2014/presentation/S-RobertSanheim">Continuous Delivery at GitHub</a></h2>

<p>ギッハブ社で行っている継続的デリバリについて<br />
(普段会社で行っていることはメモってなかった)</p>

<h3 id="section-16">メモ</h3>

<h4 id="feature-flags">feature flags</h4>
<p>ある機能を入れるときには、<br />
<div>
  <pre><code class='ruby'>def some_new_feature_enable?
  something and user.is_stuff?
end</code></pre>
</div>

的なものを書いて、それが良さそうなら true に書き換えるなどして切り替えできるようにしていた。<br />
(そういえば前職でもそういう仕組みがあった。)  </p>

<h4 id="section-17">ブランチコントロールの話</h4>
<ul>
  <li>長いことブランチを活かしておくと臭ってくるやん？  </li>
  <li>たとえば rails2 から rails3 に上げるみたいなプロジェクトがあった(実際に)。
 – RAILS3=true てきな環境変数で rails3? みたいなコードを書いて条件分岐して master につけていった。</li>
</ul>

<h4 id="section-18">フィードバック可視化</h4>
<p>ちゃんとしててすごく良かった</p>

<h3 id="section-19">所感</h3>
<p>機能をフラグで管理する( redis とか使ってもいいかも) のは確かに良い物かもなぁと思った。<br />
ただ、ゆうてもこういう仕組みはものすごく大きい変更に関してはやっていけない気もした。<br />
ブランチコントロールの話は、twitter では、うちは無理だ、とか出来そうにないとか、怖いとか<br />
そういう反応が散見された。<br />
確かに怖いは怖いし、実際、まとまった機能をつける場合は,<br />
mediuamfeature/master みたいに master からきって、<br />
mediuamfeature/feature_branch で mediuamfeature/master に pull req だしつつ<br />
ある程度育ったら mediuamfeature/master で master を pull rebase で差分を取り込む感じでやっていた。<br />
これは議論の余地はあるなぁ。  </p>

<h2 id="whats-wrong-with-your-apphttprubykaigiorg2014presentations-keikooda"><a href="http://rubykaigi.org/2014/presentation/S-KeikoOda">What’s wrong with your app?</a></h2>
<p>これも割りと釣りタイトルっぽくて聞いたけど、内容は heroku チームと、heroku 使ってるヒトの H12 とかいう<br />
エラーの原因がなんなのか？みたいな話だった。<br />
heroku に特化した感じであんまりだったので省略。  </p>

<h2 id="non-linear-pattern-matching-against-unfree-data-types-in-ruby-egison-pattern-matching-in-ruby-httprubykaigiorg2014presentations-satoshiegi"><a href="http://rubykaigi.org/2014/presentation/S-SatoshiEgi">Non-Linear Pattern Matching against Unfree Data Types in Ruby (Egison Pattern Matching in Ruby) </a></h2>

<p>egison っていうパターンマッチのプログラミング言語と、その ruby gem の話。<br />
あんまり直接メモはしてなかった。</p>

<h3 id="section-20">メモ</h3>
<ul>
  <li>様々なパターンマッチがあって、圧倒的な少ない記述量で、たとえばポーカーの役判定などができる。  </li>
  <li>麻雀の役判定も！(これはすごいことだ!!!!)<br />
 – 複数の判定もできるとのことなので工夫すれば全部役を本当にだせる？  </li>
  <li>今注目されているプログラミング言語にも選出  </li>
  <li>東京大学のカリキュラムにも!  </li>
</ul>

<h3 id="section-21">所感</h3>
<p>めっちゃすごい。<br />
通常のコードでも綺麗に簡潔に書けそうだ。<br />
とりあえず試しに使ってみると良いかも。<br />
すげぇどうでもいいけどググらビリティ低すぎる。  </p>

<h2 id="hypermedia-the-missing-element-to-building-adaptable-web-apis-in-railshttprubykaigiorg2014presentations-torukawamura"><a href="http://rubykaigi.org/2014/presentation/S-ToruKawamura">Hypermedia: the Missing Element to Building Adaptable Web APIs in Rails</a></h2>

<p>とりあえずこの日一番ヒットというか、一番驚いたのがこのセッション。</p>

<h3 id="section-22">メモ</h3>

<h4 id="api-">API の変更</h4>
<p>変更マジしんどい。<br />
/v1/hogehoge を /v2/hogehoge とかにすると必ず api の変更が必要</p>

<h4 id="fizzbuzzaas-">FizzBuzzaaS の話</h4>
<p>fizzbuzz を返す api サーバ。<br />
100までの数値に対応している。  </p>

<p>この api にテストを書こうとすると<br />
/fizzbuzz/endpoint/1<br />
/fizzbuzz/endpoint/2<br />
/fizzbuzz/endpoint/100<br />
…<br />
となって、/fizzbuzz/endpoint のところはハードコードだし、<br />
最後の値は数値を for とかで回すことになる。<br />
それを、最初のレスポンスが nextUrl 的に、次の値を渡してくれれば<br />
iterator で問題なくテストできる(当然最後もわかるし、100が変わっても大丈夫)。  </p>

<h4 id="hypermedia">そこで hypermedia</h4>
<p>HTML もそうだけど、次へのリンクや、前へのリンクなどはちゃんと付いている！<br />
ブラウザのバージョンがかわっても全然大丈夫！  </p>

<h4 id="json--link-">json + link などの情報フォーマット</h4>
<p>じつはそういう規格がある。
Uber, HAL, JSON-LD など..</p>

<h4 id="html--web--api-">HTML で web の API が表現可能!</h4>
<p>それで作ったのが<a href="https://github.com/tkawa/hypermicrodata">これ</a></p>

<h4 id="section-23">使い方としては</h4>
<p>設計順かいてあったけど、メモれてない..<br />
状態遷移を書く、はすごく重要だと説明されていた。  </p>

<h4 id="section-24">まとめ</h4>
<p><a href="http://qiita.com/tkawa/items/0efd49ad07d39531a520">ここの qiita でほぼ書いてある</a></p>

<h3 id="section-25">所感</h3>
<p>正直言ってこの発想はなかった！と思った。<br />
会場も、なるほどそうきたか！みたいな感じだった。<br />
ただ、実際つかっている HTML の構造変えたくなったりしないのかなぁとか、<br />
疑問はあったりする。<br />
あ、というか api 用の HTML(view) を書いておけばいいのかな。<br />
まぁ一つの手段としてこれはすごくあるなぁと思った。<br />
API から web を作るのは、すごく手間ではないけど、二度手間であることに変わりはないし。  </p>

<h2 id="gem-of-this-week---building-culture-and-making-gemhttprubykaigiorg2014presentations-takumimiura"><a href="http://rubykaigi.org/2014/presentation/S-TakumiMiura">“Gem of this Week” - building culture and making gem</a></h2>
<p>ドリコムのヒトの話。<br />
gem 作って共有する文化づくりのための工夫のお話。<br />
今週のgem(媒体がチャットなのかメールなのかは不明)を作って、 gem を作る週間を作った。<br />
社内用の rubygems 的なものを作った (drecom gem)。<br />
これで gem publish みたいなことができた。<br />
ヒアリングして不安を潰すことでそういう文化を作った、っていう話だった。  </p>

<h2 id="section-26">最後に</h2>
<p>すごくいろいろいい話をきいた。<br />
どうでもいいけど、たったこれだけまとめるのに 2時間くらいかかってる。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jbuilder のフラグメントキャッシュで、配列で書きたい場合とハッシュで書きたい場合のキャッシュを共通化したい]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips/"/>
    <updated>2014-04-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips</id>
    <content type="html"><![CDATA[<h2 id="section">結論</h2>
<p>views/book/_book.jbuilder<br />
<div>
  <pre><code class='ruby'>json.cache! book do
  _j = book.to_builder.target!
    JSON.parse(_j).each do |k,v|
        json.set! k, v
    end
end</code></pre>
</div>
</p>

<p>controller で @tmpl[:book] が set されていると仮定<br />
views/book/show.jbuilder<br />
<div>
  <pre><code class='ruby'>json.book do
  json.partial! ‘book/book’, book: @tmpl[:book]
end</code></pre>
</div>
</p>

<p>controller で @tmpl[:books] が set されていると仮定<br />
views/book/list.jbuilder<br />
<div>
  <pre><code class='ruby'>json.books @tmpl[:books], partial:’book/book’, as: :book</code></pre>
</div>
</p>

<h2 id="section-1">背景</h2>
<p>単体表示に<br />
<div>
  <pre><code class='ruby'>{
    book: {
        bookId: “moge”
    }
}</code></pre>
</div>

複数表示に<br />
<div>
  <pre><code class='ruby'>{
    books:[
    {
      bookId: “moge”
    },
    {
      bookId: “moge2”
    }
    ]
}</code></pre>
</div>

としたいみたいなやつがググっても全然出てこなかったので。</p>

<h2 id="section-2">所感</h2>
<p>まぁこうは普通しないわなぁ。</p>

]]></content>
  </entry>
  
</feed>
