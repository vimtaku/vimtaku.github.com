<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2014-12-12T09:57:11+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[docker と CiscoVpnConnection の相性が悪くて辛みがあった件の対処]]></title>
    <link href="http://vimtaku.github.io/blog/2014/07/25/docker-and-cisco-connection/"/>
    <updated>2014-07-25T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/07/25/docker-and-cisco-connection</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">起きていたこと</a></li>
  <li><a href="#section-1">解法</a></li>
</ul>

<h2 id="section">起きていたこと</h2>
<p>docker info とか docker ps とかしても  </p>

<p><blockquote><p>Post http://192.168.59.103:2375/v1.13/containers/create: dial tcp 192.168.59.103:2375: operation timed out</p></blockquote></p>

<p>とか出まくってマジ辛い感じになった。</p>

<p><a href="https://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CB4QFjAA&amp;url=https%3A%2F%2Fbotbot.me%2Ffreenode%2Fdocker%2F2014-07-21%2F%3Ftz%3DAmerica%2FLos_Angeles&amp;ei=zjfSU9nvO9bp8AXYloL4CA&amp;usg=AFQjCNFIh-SOKA95uGKggfe5WGwUVf2NTA&amp;sig2=3_Zk6QOd_8nSzsp0S4lW5g&amp;bvm=bv.71667212,d.dGc">これ</a>とかみると definetly routing problem て感じだった。  </p>

<p>とりあえずしんどかったので、いつもの port fowarding で対応。  </p>

<h2 id="section-1">解法</h2>

<p><blockquote><p>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -p 2022 -i /Users/vimtaku/.ssh/id_boot2docker docker@localhost -L2375:localhost:2375</p></blockquote></p>

<p>docker ps, docker info できた。  </p>

<p>以上。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker_boot2docker_port_foward]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/10/docker-boot2docker-port-foward/"/>
    <updated>2014-02-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/10/docker-boot2docker-port-foward</id>
    <content type="html"><![CDATA[<p>
</p>

<h2 id="os-x-108--docker">OS X 10.8 公式サポートで話題の Docker</h2>

<p><a href="http://qiita.com/kanekoa/items/cf3cabb23da69c609002">これ</a>をもとにとりあえず docker client を準備,<br />
docker server を建てた。  </p>

<h2 id="mac--localhost--telnet-11211--memcached-">mac の localhost に telnet 11211 したら memcached につながるようにしたい</h2>

<p><a href="https://www.docker.io/learn/dockerfile/level2/">https://www.docker.io/learn/dockerfile/level2/</a>
これをもとに Dockerfile を作った。 ここでは ubuntu を元にした vimtaku/memcached_1 とした。  </p>

<p>Dockefile
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;h1 id=&quot;memcached&quot;&gt;Memcached&lt;/h1&gt;
&lt;p&gt;#
# VERSION       2.2&lt;/p&gt;

&lt;h1 id=&quot;use-the-ubuntu-base-image-provided-by-dotcloud&quot;&gt;use the ubuntu base image provided by dotCloud&lt;/h1&gt;
&lt;p&gt;FROM ubuntu&lt;/p&gt;

&lt;p&gt;MAINTAINER Victor Coisne victor.coisne@dotcloud.com&lt;/p&gt;

&lt;h1 id=&quot;make-sure-the-package-repository-is-up-to-date&quot;&gt;make sure the package repository is up to date&lt;/h1&gt;
&lt;p&gt;RUN echo “deb http://archive.ubuntu.com/ubuntu precise main universe” &amp;gt; /etc/apt/sources.list
RUN apt-get update&lt;/p&gt;

&lt;h1 id=&quot;install-memcached&quot;&gt;install memcached&lt;/h1&gt;
&lt;p&gt;RUN apt-get install -y memcached&lt;/p&gt;

&lt;h1 id=&quot;launch-memcached-when-launching-the-container&quot;&gt;Launch memcached when launching the container&lt;/h1&gt;
&lt;p&gt;ENTRYPOINT [“memcached”]&lt;/p&gt;

&lt;h1 id=&quot;run-memcached-as-the-daemon-user&quot;&gt;run memcached as the daemon user&lt;/h1&gt;
&lt;p&gt;USER daemon&lt;/p&gt;

&lt;h1 id=&quot;expose-memcached-port&quot;&gt;expose memcached port&lt;/h1&gt;
&lt;p&gt;EXPOSE 11211</code></pre>
</div>
</p>

<p><div>
  <pre><code class='bash'>docker build -t vimtaku/memcached_1 - &amp;lt; Dockerfile</code></pre>
</div>

これでとりあえず memcached な image を作れる。  </p>

<p><div>
  <pre><code class='bash'>docker run -p 11211:11211 vimtaku/memcached_1</code></pre>
</div>

これで boot2docker -&gt; ubuntu が立つ。  </p>

<h2 id="section">追記(2014/02/13)</h2>
<p>成功法っぽいのを発見した。<br />
恥ずかしながら ssh port fowarding が -L オプションで できるっていうのを
<a href="http://motemen.hatenablog.com/entry/2014/02/11/Dockerfile_%E3%82%92%E5%85%83%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E8%B5%B0%E3%82%89%E3%81%9B%E3%81%A6%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92">このブログ記事</a>
で初めて知った。  </p>

<p>まだ、やってないけど<br />
<div>
  <pre><code class='bash'>ssh -L 11211:localhost:11211 -p 2022 root@localhost&lt;br /&gt;</code></pre>
</div>

とかすれば、 ssh port fowarding できるので、以下の手順は不要。</p>

<p>追記終わり。</p>

<h2 id="section-1">とりあえず確認するには</h2>

<p>とりあえず確認するには<br />
boot2docker ssh して ifconfig | grep -A4 docker0 すると<br />
172…. のような IP が見える。<br />
そこに対して telnet すると ちゃんと疎通できてる。<br />
ちなみに telnet localhost 11211 しても同様。  </p>

<p>あとは mac -&gt; boot2docker に 11211 疎通できればよい。<br />
ぐぐったら
<a href="http://fogstack.wordpress.com/2014/02/09/docker-on-osx-port-forwarding/">http://fogstack.wordpress.com/2014/02/09/docker-on-osx-port-forwarding/</a> の記事が見つかったのでほぼこれの通りに、</p>

<p><div>
  <pre><code class='bash'>boot2docker down
したあと
VBoxManage modifyvm “boot2docker-vm” –natpf1 “guestmemcached,tcp,,11211,,11211”
boot2docker up
docker run -d -p 11211:11211 vimtaku/memcached_1</code></pre>
</div>

これで mac から telnet localhost 11211 で行けた。たぶん。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker の概要をしらべて触ってみた]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/02/what-is-docker/"/>
    <updated>2014-02-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/02/what-is-docker</id>
    <content type="html"><![CDATA[<p>
</p>

<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">はじめに</a></li>
  <li><a href="#docker-">docker とは</a></li>
  <li><a href="#lxc-">LXC とは</a></li>
  <li><a href="#aufs-union-fs-">aufs, Union FS とは</a>    <ul>
      <li><a href="#union-mount">union mount</a></li>
      <li><a href="#section-1">読み込み</a></li>
      <li><a href="#section-2">書き込み</a></li>
      <li><a href="#section-3">削除</a></li>
    </ul>
  </li>
  <li><a href="#github-">github 的な要素</a>    <ul>
      <li><a href="#section-4">出来上がりイメージ</a></li>
    </ul>
  </li>
  <li><a href="#section-5">所感</a></li>
  <li><a href="#section-6">参考文献</a></li>
</ul>

<h2 id="section">はじめに</h2>
<p>この記事では Docker について自分なりに理解するために調べたことをまとめる。<br />
Docker の tutorial は command line を ブラウザで実際に叩くところまでできるようになっているので、<br />
非常にわかりやすく入門できる。なので、 tutorial に関してはそっちをやったほうが良い。<br />
この記事は Docker ってこんな感じのやつなんだーってのが伝わればばいいなと思う。<br />
(ちなみに まだ Docker 歴は1日)</p>

<h2 id="docker-">docker とは</h2>
<p>LXC と aufs と github のようなものをうまくくみ合わせて提供される<br />
仮想化ソフトウェアだ。  </p>

<h2 id="lxc-">LXC とは</h2>
<p>Linux Container のこと。  </p>

<p><a href="http://gihyo.jp/admin/column/01/vm/2011/lxc_container">http://gihyo.jp/admin/column/01/vm/2011/lxc_container</a>によれば、<br />
<blockquote><p>LXCの基本技術となるのが「コンテナ」と呼ばれる一種のリソース管理システムです。ファイルシステムの他，ホスト名やプロセス，ネットワークソケットなどのカーネルが扱うさまざまなリソースの管理テーブルを個々に用意し，これをコンテナごとに管理することで，コンテナごとに独立したOSのように動作させることができます。</p></blockquote>
とある。<br />
また、カーネルの機能である <a href="http://ja.wikipedia.org/wiki/Cgroups">Cgroups</a> の説明をみれば非常によく理解できた。  </p>

<h2 id="aufs-union-fs-">aufs, Union FS とは</h2>
<p>ここに、 Union mount と Union type file system の資料がある。<br />
非常にわかりやすい説明だった。ここに、 aufs の説明もある。結構古いけど。。<br />
<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html</a>
ちょっとだけ簡単に自分用にまとめる。  </p>

<h3 id="union-mount">union mount</h3>
<p>filesystem A と filesystem B をマウントして、それぞれが file A, file B を同じディレクトリで持っていたとすると、<br />
union mount をつかったとき、fileA, file B の両方のファイルが見える。  </p>

<h3 id="section-1">読み込み</h3>
<p>open システムコールとかを通して呼ぶと、 union 機能が上から順に読んでいけば、差分的に一番新しいものを読める。<br />
両方のファイルシステムが fileA を持っていて、その内容がちがう場合、filesystem の mount の優先度(レイヤー順?)で<br />
どちらの filesystem の fileA が見えるか変わるんだと思う。  </p>

<h3 id="section-2">書き込み</h3>
<p>なんらかを書き込んで差分ができたとき、 上位ディスクとは違うものを保証しなければならないため、<br />
上位ディスクのものをコピーして書き込む。だからコピーオンライト。<br />
でもこの場合は、 copy-up と呼ばれて、プロセス fork でいうそれとは区別されている模様。  </p>

<h3 id="section-3">削除</h3>
<p>ファイルが削除されても、上位ディスクには存在しているため、事実上削除ができない。<br />
なので 特別なファイルを作成することで 消えたように見せる。(DB で言う論理削除みたいなもんだと認識)<br />
whiteout という。  </p>

<h2 id="github-">github 的な要素</h2>
<p><a href="https://index.docker.io">index.docker.io</a> レポジトリに image を push できる。<br />
memcached を <a href="https://www.docker.io/learn/dockerfile/">Dockerfile によって image を作る tutorial</a> があるので、それをやった。<br />
それでできた Dockerfile  を使って repository に push した例を以下に示す。<br />
ちなみに、 <a href="https://index.docker.io/account/">https://index.docker.io/account/</a> にあらかじめ登録しておいた。  </p>

<p><div>
  <pre><code class='bash'>vagrant@ubuntu-12:~$ docker login
Username: vimtaku
Password:
Email: &lt;strong&gt;**&lt;/strong&gt;@gmail.com
Login Succeeded&lt;/p&gt;

&lt;p&gt;vagrant@ubuntu-12:~$ docker build -t vimtaku/memcached_sample - &amp;lt; Dockerfile&lt;/p&gt;

&lt;p&gt;vagrant@ubuntu-12:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
vimtaku/memcached_sample   latest              242bd405025e        22 seconds ago      217.1 MB
run_memcached              latest              5f1cda03f61c        17 hours ago        217.1 MB
memcached                  latest              9166d484dda8        17 hours ago        217.1 MB
brand_new_memcached        latest              7bdd82d0abf7        20 hours ago        217.1 MB
memcached_new              latest              c18168a45363        20 hours ago        245.5 MB
ubuntu                     12.10               426130da57f7        7 days ago          127.6 MB
ubuntu                     quantal             426130da57f7        7 days ago          127.6 MB
ubuntu                     10.04               8589d4e9c7c6        7 days ago          139.6 MB
ubuntu                     lucid               8589d4e9c7c6        7 days ago          139.6 MB
ubuntu                     12.04               72e10143e54a        7 days ago          125.9 MB
ubuntu                     latest              72e10143e54a        7 days ago          125.9 MB
ubuntu                     precise             72e10143e54a        7 days ago          125.9 MB
ubuntu                     13.10               721f07d19f96        7 days ago          144.6 MB
ubuntu                     saucy               721f07d19f96        7 days ago          144.6 MB
ubuntu                     13.04               476aa49de636        7 days ago          133.6 MB
ubuntu                     raring              476aa49de636        7 days ago          133.6 MB&lt;/p&gt;

&lt;p&gt;vagrant@ubuntu-12:~$ docker push vimtaku/memcached_sample
The push refers to a repository [vimtaku/memcached_sample] (len: 1)
Sending image list
Pushing repository vimtaku/memcached_sample (1 tags)
511136ea3c5a: Image already pushed, skipping 
b74728ce6435: Image already pushed, skipping 
72e10143e54a: Image already pushed, skipping 
28d8e9cef54f: Image successfully pushed 
6be17bb13216: Image successfully pushed 
1b910f3ee9b7: Image successfully pushed 
18e04c08eb9b: Image successfully pushed 
2e32ba041afa: Image successfully pushed 
1cf353d00dd8: Image successfully pushed 
242bd405025e: Image successfully pushed 
Pushing tags for rev [242bd405025e] on {https://registry-1.docker.io/v1/repositories/vimtaku/memcached_sample/tags/latest}</code></pre>
</div>
</p>

<p><br /></p>

<h3 id="section-4">出来上がりイメージ</h3>
<p><img src="http://gyazo.com/6a99a7bdffa6ce80369dad852461aacb.png" style="width:100%;" /></p>

<h2 id="section-5">所感</h2>
<p>この記事では、 docker の一番の利点だと感じている、 image を簡単に作って試す、みたいな部分は書いていない。<br />
すごい早さで image を作り出すことができるのには感動した。そこが一番の利点だと思う。<br />
あと、<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">この oreilly の資料</a>は 3回くらい読む価値はありそうだ。  </p>

<h2 id="section-6">参考文献</h2>
<p><a href="http://ja.wikipedia.org/wiki/LXC">http://ja.wikipedia.org/wiki/LXC</a><br />
<a href="http://gihyo.jp/admin/column/01/vm/2011/lxc_container">http://gihyo.jp/admin/column/01/vm/2011/lxc_container</a><br />
<a href="http://ja.wikipedia.org/wiki/Cgroups">http://ja.wikipedia.org/wiki/Cgroups</a><br />
<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html</a><br />
<a href="http://teppeis.hatenablog.com/entry/docker">http://teppeis.hatenablog.com/entry/docker</a><br />
<a href="http://shibayu36.hatenablog.com/entry/2013/12/30/173949">http://shibayu36.hatenablog.com/entry/2013/12/30/173949</a><br />
<a href="http://2013.8-p.info/japanese/06-22-docker.html">http://2013.8-p.info/japanese/06-22-docker.html</a>  </p>

]]></content>
  </entry>
  
</feed>
