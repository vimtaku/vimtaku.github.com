<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: datomic | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/datomic/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2015-06-04T22:16:11+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[boot2docker 内に立てた datomic transactor + peer のコンテナに対して、mac の lein repl で datomic を操作する]]></title>
    <link href="http://vimtaku.github.io/blog/2015/02/03/datomic-free-on-docker/"/>
    <updated>2015-02-03T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/02/03/datomic-free-on-docker</id>
    <content type="html"><![CDATA[<h2 id="boot2docker--datomic-transactor--peer-mac--lein-repl--datomic-">boot2docker 内に立てた datomic transactor + peer のコンテナに対して、mac の lein repl で datomic を操作する</h2>

<h3 id="docker-image-">下準備(docker image の作成)</h3>
<p><a href="https://registry.hub.docker.com/u/colinrymer/docker-datomic-free/dockerfile/">ここに Datomic の Dockerfile があった</a><br />
ので、datomic の version は違うが修正したら、使えるだろうと思ってたら、使えた。  </p>

<p>最終的な Dockerfile は <a href="https://gist.github.com/vimtaku/94cef31a166921b9b7f2">こちら</a>。
これを元に build する。  </p>

<p><code>
    docker build -t datomicfree .
</code></p>

<p><code>
    docker exec -ti {container_id} /bin/bash
</code>
などとして、デバッグしたりした。  </p>

<h3 id="section">実行環境の説明</h3>
<p>MacbookPro -&gt; boot2docker(vagrant) -&gt; docker container<br />
という構成になっている。  </p>

<h3 id="docker-container-">docker container 起動</h3>
<p>最初、 boot2docker の vagrant の割り当てメモリが小さすぎて、 datomic が立たなかったので、<br />
一度 vm を停止してから、割り当てを変更して</p>

<p><code>
    docker run -p 4334:4334 -p 4335:4335 -p 4336:4336 -m 512m -t-i datomicfree
</code>
などとすることで、うまく起動した。<br />
結局、 port foward は 4334 だけで良いと思ったがそれだけではダメなので注意。  </p>

<p><code>
    ssh -L 4334:localhost:4334 -L 4335:localhost:4335 -L 4336:localhost:4336 docker@localhost -p 2022
    (password: tcuser)
</code></p>

<h3 id="lein-repl">lein repl</h3>
<p>あとは repl から操作するだけ。  </p>

<p><code>
    (def uri "datomic:free://localhost:4334/test")
    (d/create-database uri)
    (def conn (d/connect uri))
</code>
あとは先ほどの Dockerfile のリンクにもあるので、そちらを参照のこと。</p>

<h2 id="section-1">所感</h2>
<p>ちょっとハマったけど、これができたのは大きい。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Datomic まとめ]]></title>
    <link href="http://vimtaku.github.io/blog/2014/12/12/datomic-matome/"/>
    <updated>2014-12-12T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/12/12/datomic-matome</id>
    <content type="html"><![CDATA[<p>
</p>

<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#datomic-">datomic まとめ(追記していく)</a>    <ul>
      <li><a href="#datomic--1">datomic 自体の説明</a></li>
    </ul>
  </li>
  <li><a href="#datomic--2">datomic 本当のところ(使いながら追記していく)</a>    <ul>
      <li><a href="#createdat-updatedat-">created_at, updated_at は持つ必要がない</a></li>
      <li><a href="#where-nil-datomic--datalog">where での絞込みでは、nil のものは消えてしまう(datomic というより datalog)</a></li>
      <li><a href="#datomic--3">個人的に datomic を立てている設定</a></li>
      <li><a href="#datomic-console--hornetqexception-errortypesecurityexception-messagehq119031-unable-to-validate-user-vzk3d3j04arqgpmxi6zwfypxagoeawz1vedir5gdwte">datomic console から接続するときに HornetQException errorType=SECURITY_EXCEPTION message=HQ119031: Unable to validate user: vzk3d3j04aRQgPmXi6zwfYPxAGOeaWZ1vEdir5GdwtE=</a></li>
      <li><a href="#section">参考資料(便利)</a></li>
    </ul>
  </li>
</ul>

<h1 id="datomic-">datomic まとめ(追記していく)</h1>

<h2 id="datomic--1">datomic 自体の説明</h2>
<p>省略。<br />
いつか書くかも。
他に良い記事がたくさんあるので。  </p>

<h1 id="datomic--2">datomic 本当のところ(使いながら追記していく)</h1>

<h2 id="createdat-updatedat-">created_at, updated_at は持つ必要がない</h2>
<p>rails で mysql とかつかって作るときだと当たり前のように created_at とか updated_at を持っているけど、<br />
datomic を使う場合は必要ない。<br />
stack over flow に、持ってた方が良い？などの質問に対して、
おれは created_at 入れているみたいな意見があったけど、別にいらないと思う。  </p>

<p><div>
  <pre><code class='clojure'>&lt;/p&gt;

&lt;p&gt;; ——– 一応コピペしとく
(def db-url (ref “”))
(dosync
  (ref-set db-url  “datomic:free://localhost:4334/hoge”))&lt;/p&gt;

&lt;p&gt;(defn setup-db [db-url]
  (d/create-database db-url)
  (d/transact
    (d/connect db-url)
    (concat
      (ds/generate-parts d/tempid (dbparts))
      (ds/generate-schema d/tempid (dbschema)))))
(defn setup-testdb []
  (dosync
    (ref-set db-url (str “datomic:mem:” (d/squuid))))
  (setup-db @db-url)
)&lt;/p&gt;

&lt;p&gt;(defn connect-db []
  (d/connect @db-url)
)&lt;/p&gt;

&lt;p&gt;; ——– ここが本質
(defn history [eid]
  (d/q
    ‘[:find ?e ?a ?v ?tx ?added
      :in $ ?e
      :where
      [?e ?a ?v ?tx ?added]]
    (d/history (d/db (connect-db)))
    eid
    )
)</code></pre>
</div>
</p>

<p>これで帰ってくる値は [entity_id, attribute_id, value, transaction_id, added?]<br />
で、これらが引けるということは created_at, updated_at をあえて持たなくて良い。  </p>

<p><blockquote><p>#&lt;HashSet [<br/> [17592186045436 74 this is new emotion. 13194139534331 true],<br/> [17592186045436 73 0 13194139534331 true],<br/> [17592186045436 72 17592186045423 13194139534331 true],<br/> [17592186045436 71 17592186045421 13194139534331 true],<br/> [17592186045436 75 17592186045432 13194139534331 true],<br/> [17592186045436 70 #inst “2014-12-12T00:11:51.228-00:00” 13194139534331 true],<br/> [17592186045436 71 17592186045422 13194139534333 true],<br/> [17592186045436 71 17592186045421 13194139534333 false],<br/> [17592186045436 74 hogera! 13194139534333 true],<br/> [17592186045436 74 this is new emotion. 13194139534333 false]<br/>]&gt;</p></blockquote>
サンプルをはるとこんな感じで帰ってきている。(手動で sort 済み)<br />
これは 13194139534331 と 13194139534333 のトランザクションでインサートされたこと、<br />
71, 74 の属性が 変更されたことなどが読み取れる。  </p>

<h2 id="where-nil-datomic--datalog">where での絞込みでは、nil のものは消えてしまう(datomic というより datalog)</h2>

<p><code>
(d/q '[:find ?token ?arn
     :in $ ?uid
     :where
      [?dt :device_token/user ?uid]
      [?dt :device_token/endpoint_arn ?arn]
</code></p>

<p>などとしたとき、 device_token のレコードに、 arn をもともと空文字列か何かを入れておかないと、<br />
filter されてしまう。endpoint_arn がないときに、それを作って格納みたいなコードを書こうとしたとき<br />
ちょっと困った。  </p>

<h2 id="datomic--3">個人的に datomic を立てている設定</h2>
<p><a href="https://github.com/pointslope/docker-datomic-example.git">https://github.com/pointslope/docker-datomic-example.git</a>
を使って、 fig で up している。<br />
datomic console 付きで立つ。  </p>

<h2 id="datomic-console--hornetqexception-errortypesecurityexception-messagehq119031-unable-to-validate-user-vzk3d3j04arqgpmxi6zwfypxagoeawz1vedir5gdwte">datomic console から接続するときに HornetQException errorType=SECURITY_EXCEPTION message=HQ119031: Unable to validate user: vzk3d3j04aRQgPmXi6zwfYPxAGOeaWZ1vEdir5GdwtE=</h2>
<p>unable to validate user が出た。<br />
これは、 transactor に対して 3つ以上の接続をした時に出る模様。<br />
いったん接続している peer を落としてみたら、無事に接続できた。<br />
そういう意味では、datomic console を使って本番DB をみたいなら、必然的に 待ち受けている peer は 1つになる。<br />
まぁ基本的にはそれでいいのかな。  </p>

<h2 id="section">参考資料(便利)</h2>
<ul>
  <li><a href="http://sunday-programming.hatenablog.com/category/datomic">http://sunday-programming.hatenablog.com/category/datomic</a><br />
– めっちゃ参考にさせていただいております。  </li>
  <li><a href="http://www.learndatalogtoday.org/">http://www.learndatalogtoday.org/</a><br />
– datomic の query language である datalog のチュートリアル。datomic をやる前にこれを触っておくのオススメ。  </li>
  <li><a href="https://github.com/Datomic/day-of-datomic">https://github.com/Datomic/day-of-datomic</a>  </li>
  <li><a href="https://github.com/Yuppiechef/datomic-schema">https://github.com/Yuppiechef/datomic-schema</a><br />
– datomic のスキーマを書くのマジしんどいけどこれがあればいい感じでつくってくれて嬉しいやつ。  </li>
</ul>

]]></content>
  </entry>
  
</feed>
