<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev | vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2017-06-09T21:52:01+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[クライアント認証をもう一度やる@nginx]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/16/apache-nginx-client-certificate/"/>
    <updated>2014-03-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/16/apache-nginx-client-certificate</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">概要</a></li>
  <li><a href="#section-1">やったこと</a>    <ul>
      <li><a href="#section-2">補足</a>        <ul>
          <li><a href="#config-">config による直接的な制限</a></li>
          <li><a href="#revoke-">revoke による証明書の失効</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#nginx-ssl-">nginx による、SSL 設定とクライアント認証</a>    <ul>
      <li><a href="#section-3">ちなみに</a></li>
    </ul>
  </li>
  <li><a href="#section-4">所感</a></li>
</ul>

<h2 id="section">概要</h2>
<p>前回は、資料のようにやればできるって感じだったけど、<br />
理解して一つづつもう一度やってみたかったのでもう一度やってみた。  </p>

<h2 id="section-1">やったこと</h2>
<p>基本的には以下のサイトにしたがってすすめた。<br />
<a href="http://server-setting.info/centos/private-ca-cert.html">こちらのサイト</a><br />
基本的に前回の記事では、CA(.sh) という、<br />
openssl の ca を扱うのに便利な付属スクリプトは使っていなかったんだけど、<br />
今回のは CA(.sh) を使ってすすめた。<br />
というか、ほとんどやったことは上記のサイト通りなので、上記のサイト通りやると良いとおもう。<br />
解説もものすごく丁寧にされているので。<br />
なので、自分がやったことの補足だけ書いていく。  </p>

<h3 id="section-2">補足</h3>

<h4 id="config-">config による直接的な制限</h4>
<p>まず、背景として、vimtaku, hogetaku というユーザにそれぞれクライアント認証したい。<br />
それで、それぞれのクライアントの鍵はサーバで作成する。  </p>

<p>なので、サーバ側で  </p>

<ul>
  <li>クライアント用(vimtaku,hogetaku二人別々)の公開鍵と秘密鍵を作り、  </li>
  <li>csr をだし、</li>
  <li>それを ca が 署名して、</li>
  <li>pfx に変換して</li>
</ul>

<p>最終的に、配りたい対象ユーザのブラウザに渡すかんじになった。</p>

<p>client認証はしていて、さらに config レベルで、アクセスを制限したい場合には、
ssl.conf に
<div>
  <pre><code class='apache'>&lt;/p&gt;
&lt;location /&gt;

&lt;p&gt;SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
            and ( \
                  %{SSL_CLIENT_S_DN_CN} eq “vimtaku” \
                  or %{SSL_CLIENT_S_DN_CN} eq “hogetaku” \
                ) \
            )
&amp;lt;/Location&amp;gt;</code></pre>
</div>

などと書けば設定できる。  </p>

<p>他にも条件は書けそうなので、パラメータに関しては<a href="http://httpd.apache.org/docs/2.4/mod/mod_ssl.html">こちらを参考</a>に。  </p>

<p>デバッグとしては
<div>
  <pre><code class='apache'>CustomLog logs/ssl_request_log \
  “%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x %{SSL_CLIENT_S_DN_O}x %{SSL_CLIENT_S_DN_CN}x %{SSL_CLIENT_S_DN}x &quot;%r&quot; %b”</code></pre>
</div>

としてログだすとよいかもしれない。</p>

<h4 id="revoke-">revoke による証明書の失効</h4>
<p>config ではなく、 revoke で、たとえば hogetaku が会社辞めたとかで配った証明書を失効させる方法として、  </p>

<p><div>
  <pre><code class='bash'>cd /etc/pki/CA
cp serial crlnumber
openssl ca -gencrl -revoke  /etc/pki/CA/certs/hogetaku.ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.crt -config /etc/pki/tls/openssl-client.cnf
cd /etc/pki/CA/crl/
openssl ca -gencrl -out crl.pem</code></pre>
</div>

として、</p>

<p>そして<br />
/etc/httpd/conf.d/ssl.conf に、
<div>
  <pre><code class='apache'>SLCACertificateFile /etc/pki/CA/cacert.pem</code></pre>
</div>

の下くらいに<br />
<div>
  <pre><code class='apache'>SSLCARevocationCheck chain
SSLCARevocationFile /etc/pki/CA/crl/crl.pem</code></pre>
</div>

を追加した。  </p>

<p>それで、サーバを再起動すれば、revoke した証明書を持つクライアントはアクセスできなくなる(400)。</p>

<p>ちなみに revoke は
/etc/pki/CA/newcerts/内のファイル か /etc/pki/CA/newcerts/certs 内のファイルのどちらでもよさそう。  </p>

<h2 id="nginx-ssl-">nginx による、SSL 設定とクライアント認証</h2>
<p>はっきり言ってなんの問題もない</p>

<p><div>
  <pre><code class='bash'>sudo yum -y install nginx</code></pre>
</div>
</p>

<p>/etc/nginx/conf を編集。  </p>

<p><div>
  <pre><code class='nginx'>server {
        listen       443;
        server_name  localhost;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ssl                  on;
    ssl_certificate      /etc/pki/CA/certs/ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.crt.pem;
    ssl_certificate_key  /etc/pki/CA/private/ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.key;
    ssl_verify_client on;
    ssl_client_certificate /etc/pki/CA/cacert.pem;
    ssl_crl /etc/pki/CA/crl/crl.pem;

    ssl_session_timeout  5m;

    ssl_protocols  SSLv2 SSLv3 TLSv1; 
    ssl_ciphers  HIGH:!aNULL:!MD5; 
    ssl_prefer_server_ciphers   on;

    location / {
        root   html;
        index  index.html index.htm;
    }
}</code></pre>
</div>

</code></pre>

<p>大体、 apache と同じような設定を行えば使用できる。  </p>

<h3 id="section-3">ちなみに</h3>
<p>revoke したのをやっぱ辞めたいって場合は<br />
/etc/pki/CA/index.txt の<br />
R の行の R を V にして、 その次の次のカラムの 時間を 消してから、<br />
openssl ca -gencrl -out crl.pem<br />
してやればよい。  </p>

<h2 id="section-4">所感</h2>
<p>複雑だけど、さすがに2週連続で日曜日使えばだいたいわかる。<br />
でももっと奥深く知るにはちゃんと本を読むべきだと思う。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Linux に phpmyadmin を入れてクライアント認証する]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/10/amazon-linux-phpmysqladmin-clientauth/"/>
    <updated>2014-03-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/10/amazon-linux-phpmysqladmin-clientauth</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">概要</a></li>
  <li><a href="#section-1">下準備</a></li>
  <li><a href="#db-">DB の設定をあれこれする</a></li>
  <li><a href="#phpmyadmin--">phpmyadmin のアクセス制限,今回は クライアント認証する前提なので全開放</a></li>
  <li><a href="#section-2">クライアント認証</a>    <ul>
      <li><a href="#p12-">p12 のインストールについて</a></li>
    </ul>
  </li>
  <li><a href="#section-3">参考文献</a></li>
</ul>

<h2 id="section">概要</h2>
<p>amazon linux で phpmyadmin(httpd) を入れてクライアント認証するパターンになったのでやってみた。  </p>

<h2 id="section-1">下準備</h2>

<p><div>
  <pre><code class='bash'>## apache と phpmyadmin が入る
sudo yum –enablerepo=epel install phpmyadmin
## mod_ssl
sudo yum install mod24_ssl
sudo yum install openssl-devel</code></pre>
</div>
</p>

<h2 id="db-">DB の設定をあれこれする</h2>
<p><div>
  <pre><code class='bash'>sudo vim /etc/phpMyAdmin/config.inc.php</code></pre>
</div>
</p>

<h2 id="phpmyadmin--">phpmyadmin のアクセス制限,今回は クライアント認証する前提なので全開放</h2>
<p><div>
  <pre><code class='bash'>sudo vim /etc/httpd/conf.d/phpMyAdmin.conf</code></pre>
</div>
</p>

<p>とりあえず全開放
<div>
  <pre><code class='bash'>## L16 あたりに
Require all granted
## L26 あたりに
Allow from 0.0.0.0</code></pre>
</div>
</p>

<p><div>
  <pre><code class='bash'>/etc/httpd/conf.d/virtualhost.conf</code></pre>
</div>

<div>
  <pre><code class='apache'>&amp;lt;Directory “/phpmyadmin”&amp;gt;
    Options ExecCGI
    AllowOverride all
    Order Allow,Deny
    Allow from all
    RewriteEngine On
    RewriteCond %{SERVER_PORT} 80
    RewriteRule ^(.*)$ https://%{HTTP_HOST}/%{REQUEST_URI} [R,L]
    LogLevel alert rewrite:trace3
&amp;lt;/Directory&amp;gt;</code></pre>
</div>
</p>

<h2 id="section-2">クライアント認証</h2>
<p>については
<a href="https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">この資料</a>
がものっすごい参考になる。<br />
というかこのままやれば良い。  </p>

<h3 id="p12-">p12 のインストールについて</h3>
<p>Google Chrome  はキーチェーンに入れたら行けた。<br />
Vimperator(Firefox) についてはブラウザに pom.p12 を入れたら行けた。  </p>

<h2 id="section-3">参考文献</h2>
<p>phpmyadmin についてはこれが非常に役に立つ。<br />
<a href="http://sanketdangi.com/post/56623052533/phpmyadmin-on-amazon-ec2-manage-amazon-rds">http://sanketdangi.com/post/56623052533/phpmyadmin-on-amazon-ec2-manage-amazon-rds</a><br />
クライアント認証に関しては<br />
<a href="https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant に入門する]]></title>
    <link href="http://vimtaku.github.io/blog/2013/11/28/learning-vagrant/"/>
    <updated>2013-11-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2013/11/28/learning-vagrant</id>
    <content type="html"><![CDATA[<p>
</p>

<h2 id="vagrant">vagrant</h2>
<p>っていうか vagrant はめちゃくちゃ簡単に導入できる。<br />
chef-solo 入門の naoya 氏が書いたやつ買ったのと、ウェブに落ちまくってるやつを<br />
一緒に見ながら手を動かしてみたら、結構わかってきた。  </p>

<p>これは最初に覚えておいたらお釣りがくるレベルで使えそうなので<br />
まだ知らない人は早めに勉強しといたほうがいいね。</p>

<h2 id="section">読書途中経過</h2>
<ul>
  <li>パーフェクトルビー3章まで読んだ</li>
  <li>chef-solo 入門 #7 まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
</ul>

<p>おいおいまとめる</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[template test]]></title>
    <link href="http://vimtaku.github.io/blog/2013/11/20/template-test/"/>
    <updated>2013-11-20T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2013/11/20/template-test</id>
    <content type="html"><![CDATA[<p>
</p>

<h2 id="code-">code ハイライトテスト</h2>
<p>jekyll pygments.rb は python2.7 じゃないとだめらしい。</p>

<p><div>
  <pre><code class='ruby'>def foo
  puts ‘foo’
end</code></pre>
</div>
</p>

<p><div>
  <pre><code class='python'># coding: utf-8
import sys&lt;/p&gt;

&lt;p&gt;from pygments import highlight
from pygments.lexers import guess_lexer
from pygments.formatters import HtmlFormatter</code></pre>
</div>
</p>

<p><div>
  <pre><code class='bash'>$ cd UserName.github.com
$ git init
$ git add .
$ git commit -m “first commit”
$ git remote add origin https://github.com/UserName/UserName.github.git
$ git push -u origin master</code></pre>
</div>
</p>

<p><div>
  <pre><code class='vim'>function! SetColumnWidthLimit()
  setlocal textwidth=78
  if exists(‘+colorcolumn’)
    setlocal colorcolumn=+1
  endif
endfun&lt;/p&gt;

&lt;p&gt;au Filetype perl,javascript,vim call SetColumnWidthLimit()</code></pre>
</div>
</p>

<h2 id="url">参考URL</h2>
<p>http://web.sfc.keio.ac.jp/~t10078si/wpx/?p=862</p>
]]></content>
  </entry>
  
</feed>
