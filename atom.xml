<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2014-09-07T02:24:25+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableViewCell の中の UILabel の内容によって動的に Cell の高さを変える(not autolayout)]]></title>
    <link href="http://vimtaku.github.io/blog/2014/08/24/uilayout-sizetofit/"/>
    <updated>2014-08-24T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/08/24/uilayout-sizetofit</id>
    <content type="html"><![CDATA[<h2 id="uitableviewcell--uilabel--cell-not-autolayout">UITableViewCell の中の UILabel の内容によって動的に Cell の高さを変える(not autolayout)</h2>
<ol>
  <li>基本的には<a href="http://qiita.com/kotaroito/items/8bd2f10833e07f7a5809">こちらの記事にそっておこなった</a> が、自分のやり方がわるいのか、 selected 時しかうまくいかなかった。  </li>
  <li><a href="http://stackoverflow.com/questions/17823581/custom-cell-not-resizing-uilabels">このstackoverflow によると</a> sizeToFit は layoutSubviews に入れよ。とのこと。  </li>
</ol>

<blockquote><p>override func layoutSubviews() {<br />    super.layoutSubviews()<br />        self.body.sizeToFit()<br />}</p></blockquote>

<h2 id="section">その他の参考</h2>
<p><a href="http://qiita.com/yuch_i/items/b4612fae110254c816f4">http://qiita.com/yuch_i/items/b4612fae110254c816f4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_august_17]]></title>
    <link href="http://vimtaku.github.io/blog/2014/08/17/life-august-17/"/>
    <updated>2014-08-17T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/08/17/life-august-17</id>
    <content type="html"><![CDATA[<h2 id="section">いろいろ振り返り</h2>
<p>またしばらく期間が開いてしまった。<br />
精神的にバタバタしてしまっているのは変わらないが、だいぶ回復してきたっぽい。<br />
なんかまた頑張れそうな気がしてきたので、また来週から頑張ろう。  </p>

<h2 id="section-1">偉大な目標</h2>
<p>とあるハッカソンにでて意見をぶつけてきたら、みんな同じ課題は持っているが<br />
ソリューションが追い付いていないようだった。<br />
ものを作って持っていくしか無い。  </p>

<h2 id="section-2">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">読んでる</h3>
<ul>
  <li>SICP-問題2.4まで</li>
  <li>詳解UNIX プログラミング第3版(8章まで)</li>
  <li>ハイパフォーマンス ブラウザネットワーキング(2章まで)</li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>アルゴリズムクイックリファレンス 5章まで</li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 4章から</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>Vimscript テクニックバイブル</li>
  <li>ネットワークの剣</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/7)数学ガール(乱択アルゴリズム)</li>
  <li>(2014/6/12)1冊でわかる数学</li>
  <li>(2014/6/1)いかにして問題をとくか(とてもさらっと)</li>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺が考える最強ヘッドフォンゼンハイザーHD25-1 Ⅱ のベストカスタマイズ(リケーブル)]]></title>
    <link href="http://vimtaku.github.io/blog/2014/08/17/headphone-sennheiser-best/"/>
    <updated>2014-08-17T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/08/17/headphone-sennheiser-best</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>
<p>俺は音楽には結構こだわりがある(聞くほう)。<br />
なので以下に現時点での最強だと考えたカスタマイズを記しておく。<br />
だれかのためになれば幸いです。  </p>

<h2 id="section-1">ひとまず結論</h2>

<ul>
  <li>
    <p><a href="http://www.yodobashi.com/%E3%82%BC%E3%83%B3%E3%83%8F%E3%82%A4%E3%82%B6%E3%83%BC-SENNHEISER-HD25-1-II-%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E3%83%89%E5%9E%8B%E3%83%80%E3%82%A4%E3%83%8A%E3%83%9F%E3%83%83%E3%82%AF%E3%82%BF%E3%82%A4%E3%83%97-%E3%83%98%E3%83%83%E3%83%89%E3%83%9B%E3%83%B3/pd/100000001000898699/">基本の sennheiser HD25-1 Ⅱ</a>をまずひとつ<br />
– 25700円(ヨドバシ・ドット・コム 8月17日時点)  </p>
  </li>
  <li>
    <p>リケーブルは<a href="http://www.yodobashi.com/Oyaide-%E3%82%AA%E3%83%A4%E3%82%A4%E3%83%87-HPC-35HDX-Silver-1-3-HD650%E7%94%A8%E3%83%98%E3%83%83%E3%83%89%E3%83%9B%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89/pd/100000001001611601/">これ</a> 。HD25-1用じゃないけど刺さるし音はなる。レシートが手元に無いので要確認。<br />
– 6940円(ヨドバシ・ドット・コム 8月17日時点)  </p>
  </li>
  <li>
    <p><a href="http://www.yodobashi.com/%E3%82%BC%E3%83%B3%E3%83%8F%E3%82%A4%E3%82%B6%E3%83%BC-SENNHEISER-HD25-ALUMINIUM-EAR-PAD-%E4%BA%A4%E6%8F%9B%E7%94%A8%E3%82%A4%E3%83%A4%E3%83%BC%E3%83%91%E3%83%83%E3%83%89-1%E3%83%9A%E3%82%A2/pd/100000001002133128/">イヤーパッドはHD25のアルミニウム用のやつを使用</a><br />
– 3780円(ヨドバシ・ドット・コム 8月17日時点)  </p>
  </li>
</ul>

<p>合計36420円なり。<br />
ヨドバシの場合はポイントが10%つくので、大体最安値で揃えたら 33000円くらいまでは行けそうな予感。  </p>

<p>ちなみに環境としては、 iPhone5 に直刺しって感じ。<br />
よく聞くのは椿屋とかソノダバンドとか(ロック多め)。<br />
一応ポタアンは持っているけど除外、というか上記そろえたらポタアン全然いらない。  </p>

<h2 id="section-2">俺のリケーブルの歴史</h2>

<h3 id="section-3">純正ケーブル満足期(星3)</h3>
<p>実際リケーブルしなくても HD25-1 Ⅱ は本当に良い音を鳴らしてくれる。<br />
コスパ重視なら実際ママイキで十分。<br />
HD25-1 Ⅱ のいいところは、断線してもケーブル変えれば全然現役で動いてくれるところ。  </p>

<h3 id="hd25-4">オヤイデの黄色とか赤のHD25 専用ケーブル満足期(星4)</h3>
<p><a href="http://www.yodobashi.com/Oyaide-%E3%82%AA%E3%83%A4%E3%82%A4%E3%83%87-HPC-HD25-Yellow-HD25%E7%94%A8%E3%83%AA%E3%83%BC%E3%83%89%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB/pd/100000001001642386/">オヤイデの黄色とか赤のHD25 専用ケーブル</a>とかもあるので、純正のケーブル断線を期に購入。<br />
感想をいうと、単純にやっぱり音質は向上したように思う。<br />
音質以外では、普通にカラフルでおしゃれだったりする点と、<br />
純正よりプラグ部分が小さいので iPhone に直刺ししやすいあたりがよかった。<br />
しかし、弱点があると思っていて、プラグ部分が小さい分、ものすごく断線しやすいと思う。<br />
なんかに引っかかるとかはわりとありがちだけど、それでこれに 4回くらいリケーブルした。  </p>

<h3 id="sigma-acoustics-sennheiser-upgrade-cable--2">最上級ライン Sigma Acoustics SENNHEISER UPGRADE CABLE 交換用アップグレードケーブル クソ太い期(星2)</h3>
<p>一応<a href="http://www.amazon.co.jp/Sigma-Acoustics-SENNHEISER-UPGRADE-%E4%BA%A4%E6%8F%9B%E7%94%A8%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB/dp/B005LEY14Q">アマゾンリンク</a>。<br />
これは音質に関しては中高音が得意というとおり、本当にものすごく出てくる。<br />
ギターが超好きみたいなひとはこれがかなりいいんじゃないだろうか。<br />
ただしデメリットがたくさんある。  </p>

<p>まず、ケーブルが家用だと思われるのでクソ太い。<br />
写真から見た感じだとミニプラグに見えるのに、実は普通のプラグなので変換アダプタが必要。<br />
さらにケーブル自体が太いし、ざらざらしてるし、見た目もむっちゃ青いのでクソ目立つ。<br />
歩き(外)で使うには相当の苦労は覚悟しなければならない。<br />
ただ、 HD25 を外でつかう人たちはあんまり見た目は気にしないから大丈夫だとは思う(偏見)。  </p>

<p>あといい忘れてたけど中高音が得意なのをいいことに低音がザルになって HD25 感がまったくなくなるのでやばい。<br />
しかも値段が高いという、いま振り返ってみたら相当ダメな買い物だった。。<br />
値段が高かったのである程度信じこんでいたが。。笑。</p>

<h3 id="oyaide-hpc-35hdx-black25-hd6505">Oyaide(オヤイデ) HPC-35HDX Black/2.5 [HD650用ヘッドホンコード]最強期(星5)</h3>
<p><a href="http://www.yodobashi.com/Oyaide-%E3%82%AA%E3%83%A4%E3%82%A4%E3%83%87-HPC-35HDX-Silver-1-3-HD650%E7%94%A8%E3%83%98%E3%83%83%E3%83%89%E3%83%9B%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89/pd/100000001001611601/">ヨドバシリンク(もしかしたら違うかもしれないので要確認)</a>。
これがたぶん今のところ最強。明らかに音質がよくなった実感があった。好みもあるだろうけどね。  </p>

<h2 id="section-4">結論に関する詳細</h2>

<h3 id="hd25-1-2-">ゼンハイザーHD25-1 2 について</h3>
<p>やっぱり優秀だと思う。<br />
でもいまもし初めて買うなら HD25-1のアルミニウム買うのがいいと思う。  </p>

<h3 id="section-5">リケーブルについて</h3>
<p>実際上でちょっと書いた通り、これは一番良く感じる。<br />
この先断線したら、ちょっともう冒険は出来ないなぁと思う(これ買えばいいから)。  </p>

<h3 id="section-6">イヤーパッドについて</h3>
<p>実際あんま変わらんだろとか思ってたら、遮音性が圧倒的に違うことに気づく。<br />
幸運にもアルミニウムの変えパッドが売っているのでそれを買って装着すればいいだけ。<br />
オーディオマニアにとっての4000円などゴミのようなもんだろう?(煽り)  </p>

<h2 id="section-7">所感</h2>
<p>実際やっぱ最強感というか、HD25 に慣れると他のヘッドフォンがカス過ぎてヤバイみたいな感じになる(視聴コーナーでの個人の感想です)。<br />
イヤホンにも絶対戻れないし。<br />
俺の中の、この誰にも伝えられないこだわりが、インターネットを通して誰かに伝われば嬉しい。  </p>

<p>この記事にアフィはありません。念のため。  </p>

<p>音を楽しむのは本当に良い。人生が豊かになる。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker と CiscoVpnConnection の相性が悪くて辛みがあった件の対処]]></title>
    <link href="http://vimtaku.github.io/blog/2014/07/25/docker-and-cisco-connection/"/>
    <updated>2014-07-25T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/07/25/docker-and-cisco-connection</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">起きていたこと</a></li>
  <li><a href="#section-1">解法</a></li>
</ul>

<h2 id="section">起きていたこと</h2>
<p>docker info とか docker ps とかしても  </p>

<blockquote><p>Post http://192.168.59.103:2375/v1.13/containers/create: dial tcp 192.168.59.103:2375: operation timed out</p></blockquote>

<p>とか出まくってマジ辛い感じになった。</p>

<p><a href="https://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CB4QFjAA&amp;url=https%3A%2F%2Fbotbot.me%2Ffreenode%2Fdocker%2F2014-07-21%2F%3Ftz%3DAmerica%2FLos_Angeles&amp;ei=zjfSU9nvO9bp8AXYloL4CA&amp;usg=AFQjCNFIh-SOKA95uGKggfe5WGwUVf2NTA&amp;sig2=3_Zk6QOd_8nSzsp0S4lW5g&amp;bvm=bv.71667212,d.dGc">これ</a>とかみると definetly routing problem て感じだった。  </p>

<p>とりあえずしんどかったので、いつもの port fowarding で対応。  </p>

<h2 id="section-1">解法</h2>

<blockquote><p>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -p 2022 -i /Users/vimtaku/.ssh/id_boot2docker docker@localhost -L2375:localhost:2375</p></blockquote>

<p>docker ps, docker info できた。  </p>

<p>以上。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_july_7]]></title>
    <link href="http://vimtaku.github.io/blog/2014/07/07/life-july-7/"/>
    <updated>2014-07-07T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/07/07/life-july-7</id>
    <content type="html"><![CDATA[<h2 id="section">いろいろ振り返り</h2>
<p>しばらく期間が開いてしまった。<br />
仕事がかなり忙しかったり、精神的にバタバタしてしまっていた。<br />
先日受けた某試験に合格出来ていた。<br />
嬉しかったのでこの調子で勉強し続けたい。  </p>

<h2 id="section-1">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-2">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">読んでる</h3>
<ul>
  <li>SICP-問題1.33 まで</li>
  <li>数学ガール(乱択アルゴリズム)5章まで</li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>アルゴリズムクイックリファレンス 5章まで</li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 4章から</li>
  <li>詳解UNIX プログラミング第3版</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
  <li>ハイパフォーマンス ブラウザネットワーキング</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/6/12)1冊でわかる数学</li>
  <li>(2014/6/1)いかにして問題をとくか(とてもさらっと)</li>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_jun_15]]></title>
    <link href="http://vimtaku.github.io/blog/2014/06/15/life-jun-15/"/>
    <updated>2014-06-15T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/06/15/life-jun-15</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>イマイチ加速しない。<br />
地味な仕事が多かった。  </p>

<h2 id="section-1">週末振り返り</h2>
<p>ランニングした。<br />
angularJS についてかなり調べて概念はほぼ把握した。<br />
試しに実装してみたらわりと簡単に導入出来たが、<br />
rails との共存は一長一短な気がした。  </p>

<p>サンプルで作ってみた実装はこれ。<br />
基本はほとんど抑えたつもり。<br />
<a href="https://github.com/vimtaku/angular_study">https://github.com/vimtaku/angular_study</a><br />
<a href="http://vimtaku.github.io/angular_study/index.html">サンプルページ</a>  </p>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>アルゴリズムクイックリファレンス 5章まで</li>
  <li>SICP-問題1.17 まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 4章から</li>
  <li>詳解UNIX プログラミング第3版</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
  <li>ハイパフォーマンス ブラウザネットワーキング</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/6/12)1冊でわかる数学</li>
  <li>(2014/6/1)いかにして問題をとくか(とてもさらっと)</li>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS を触ってみた感想]]></title>
    <link href="http://vimtaku.github.io/blog/2014/06/15/angular-js-1/"/>
    <updated>2014-06-15T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/06/15/angular-js-1</id>
    <content type="html"><![CDATA[<h2 id="angularjs-">angularjs とは</h2>
<p>javascript の MVC フレームワークだ。<br />
評判が妙に良いとは思っていたが、噂通りにとても良く出来ている。  </p>

<h2 id="section">学習のためにやったこと</h2>
<ul>
  <li>angularjs のチュートリアルひと通りやった
– <a href="https://docs.angularjs.org/tutorial">https://docs.angularjs.org/tutorial</a></li>
  <li>angularjs を60分で知るビデオを見た
– <a href="https://www.youtube.com/watch?v=i9MHigUZKEM">https://www.youtube.com/watch?v=i9MHigUZKEM</a></li>
</ul>

<h2 id="section-1">感想</h2>

<h3 id="section-2">全体的な所感</h3>
<p>テンプレートエンジンのように view でループしたりゴニョゴニョしたりっていうのが<br />
めっちゃ簡単にできてすごく便利な時代になったなぁと思った。<br />
DI がすごく良く出来ていて、このコントローラでは、これらを使用するみたいなのが非常に簡単にかけてよかった。<br />
以前仕事でつかっていたオレオレ系フレームワークを、さらにもう一歩進化させているように思った。  </p>

<h3 id="section-3">疎結合なところ</h3>
<p>なにより、本当の意味での MVC というか、 model を操作すると view が即時に反映されるところが、とてもイケているなぁと思った。<br />
module 化の仕組みもとても綺麗で、あるドメインに関するモジュールはそれでまとめておいて、<br />
もう一つ上のレイヤーではそれに依存するような形でかけるのがかっこいい。<br />
var app = angular.module(“MyApp”, [“SomeDomain”]) と言った感じ。<br />
このモジュールの仕組で提供される ngResource だったり ngRoute だったり、<br />
モジュールとして使用できる仕組みが予め提供されている事による恩恵がすごく大きく、<br />
いろいろな部分で疎になるように設計されているのがかっこいい。  </p>

<h3 id="rails-">rails との共存</h3>
<p>rails と使うときに、どのように使うかは結構悩ましいところがあるように感じた。<br />
というのは、 rails をただの API server として使うのか、昔ながらてきにサーバサイドで view を描画して出すのかとか<br />
その辺の住み分けが微妙に大変そうだった。  </p>

<h3 id="seo-">SEO に関して</h3>
<p>とくに SEO との相性は気になった。<br />
参考 &gt; <a href="https://note.mu/wadako/n/n01733b19bc9c">https://note.mu/wadako/n/n01733b19bc9c</a><br />
これを見る限りちょっと大変じゃね？って感じだったけど、<br />
実際検索結果に載ってるあたり考えると不安はあるもののできそうなきもする。<br />
が、信頼度が求められる production 環境でいきなり使えるかと言われるとちょっと不安がある。  </p>

<h3 id="section-4">最後に</h3>
<p>とは言え、 angularjs は非常に強力な選択肢だなぁと感じた。<br />
学習コスト高いって書いてあったけど、はっきり言って chef とかと比べ物にならないくらい安いと思う。<br />
ちょっとした web の何かを作るときには angularjs を使うのは相当いい手段なんじゃないかな。  </p>

<h2 id="section-5">参考文献</h2>
<p><a href="https://angularjs.org/">https://angularjs.org/</a><br />
<a href="http://js.studio-kingdom.com/angularjs/guide/di">http://js.studio-kingdom.com/angularjs/guide/di</a><br />
<a href="http://js.studio-kingdom.com/angularjs/guide/providers">http://js.studio-kingdom.com/angularjs/guide/providers</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_jun_1]]></title>
    <link href="http://vimtaku.github.io/blog/2014/06/01/life-jun-1/"/>
    <updated>2014-06-01T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/06/01/life-jun-1</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>なんか調査とかしてたら終わったぐらいのかんじ。  </p>

<h2 id="section-1">週末振り返り</h2>
<p>ランニングした。<br />
4km くらい走れたけどすげぇしんどかった。  </p>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>アルゴリズムクイックリファレンス 5章まで</li>
  <li>SICP-問題1.10 まで</li>
  <li>1冊でわかる数学(2章、証明)</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 4章から</li>
  <li>詳解UNIX プログラミング第3版</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
  <li>ハイパフォーマンス ブラウザネットワーキング</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/6/1)いかにして問題をとくか(とてもさらっと)</li>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【書評】いかにして問題を解くか]]></title>
    <link href="http://vimtaku.github.io/blog/2014/06/01/"/>
    <updated>2014-06-01T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/06/</id>
    <content type="html"><![CDATA[<h2 id="section">いかにして問題をとくか</h2>
<p>この本は、数学を教える教師と、教わる生徒を主なターゲットとして、<br />
いかにして問題をとくかということを真剣に考えている本である。<br />
心に残った部分を以下に書いていく。  </p>

<h2 id="section-1">決定問題と証明問題</h2>
<p>何かを求めよ. という、問題の中の未知のものを見つけるものが決定問題で、<br />
証明問題はある命題が正しいか正しくないかを示すものである。  </p>

<p>本書では, 決定問題を解くことに重きをおいている。  </p>

<h2 id="section-2">フレームワーク(チートシート)</h2>
<ul>
  <li>未知のものは何か, 条件は何か, データはなにか?  </li>
  <li>条件をいくつかの部分に分けよ  </li>
  <li>データと未知のものとの関連を求めよ  </li>
  <li>未知のものをよく見よ! そして未知のものが同じかまたはよく似た問題は思い起こせ  </li>
  <li>条件の一部を残して他を捨てよ. それでどこまで未知の部分が定まるか?<br />
 – どの範囲で変化しうるか. データから何か役に立つ物を引き出しうるか.<br />
 – その未知のものを決めるのに 適当な他のデータを思いつくか.<br />
 – 未知のもの, データもしくはその両方を変えて新しい未知のものと, 新しいデータとが互いに近いものになるように出来るか?  </li>
  <li>すべてのデータを使ったか, すべての条件を使ったか。  </li>
</ul>

<h2 id="section-3">逆向きに考える</h2>
<p>4リットルと9リットルの桶しかないとき、ちょうど6リットルの水を汲むにはどうすればよいか？<br />
この問に関して、逆向きに考えることが非常に重要だと示された。<br />
答えとしては、9リットルの桶に、6リットルが入っている状態を考えればよい。<br />
9:1から6:4にすればよい。  </p>

<h2 id="section-4">トリアタマ</h2>
<p>食物があり、それとは逆コの字でサクがあったとした時、<br />
犬はそれを錯誤しに取ろうとするがしばらくしてサクを回りこんで<br />
食物を取りに行くことができるが、 鳥はひたすら食物を手前にバタバタしてしまうらしい。<br />
やはりしばらくの試行錯誤が必要ではあるが、あるタイミングで一旦物事を俯瞰してみる必要があるということだ。  </p>

<h2 id="section-5">所感</h2>
<p>とても難しい本ではあった。<br />
また数学レベルが上がった時に読みたい。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_25]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/25/life-may-25/"/>
    <updated>2014-05-25T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/25/life-may-25</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>なんか色々バタバタしてたら一週間終わった。<br />
また来週から忙しくなるので頑張ろうと思う。  </p>

<h2 id="section-1">週末振り返り</h2>
<p>ランニングした。<br />
4km くらいしか走ってないがそれくらいはまぁ今でもちゃんと走れてよかった。  </p>

<p>アルゴリズムクイックリファレンス第4章まで読んだ。<br />
末尾再帰についていろいろ調べてた。  </p>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 3章まで</li>
  <li>アルゴリズムクイックリファレンス 4章まで</li>
  <li>SICP-問題1.10 まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>詳解UNIX プログラミング第3版</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
  <li>ハイパフォーマンス ブラウザネットワーキング</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_18]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/18/life-may-18/"/>
    <updated>2014-05-18T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/18/life-may-18</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>プロダクトをリリースできてよかった。<br />
これからの成長が重要だ。  </p>

<h2 id="section-1">週末振り返り</h2>
<p>実際に料理を作ってみた。<br />
色々見つかったのでフィードバックしてみる。  </p>

<p>プロセッサを支える技術の第3章まで読んだ。<br />
アルゴリズムクイックリファレンス第3章まで読んだ。  </p>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界 3章まで</li>
  <li>アルゴリズムクイックリファレンス 3章まで</li>
  <li>SICP-問題1.8 まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_11]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/11/life-may-11/"/>
    <updated>2014-05-11T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/11/life-may-11</id>
    <content type="html"><![CDATA[<h2 id="section">週末振り返り</h2>
<p>築地の豊ちゃんっていう洋食屋でかつ丼を食べてきた。<br />
かなりうまかった。<br />
銀座の船見坂っていうラーメン屋のラーメンはかなりうまかった。  </p>

<p>プロセッサを支える技術の第2章まで読んだ。  </p>

<h3 id="section-1">2章までのキーワード</h3>
<ul>
  <li>メモリアドレス空間<br />
 – 64 ビットアーキテクチャとかは64ビットのアドレス空間に対応するために必要  </li>
  <li>RISC と CISC<br />
 – RISC(Reduced Instruction Set Computer) は固定長命令で、パイプライン制御をしやすくするために作られた<br />
 – CISC(Complex Instruction Set Computer) は可変長命令なので、パイプライン制御しにくかった  </li>
  <li>Out of Order と 分岐予測、投機実行<br />
 – プログラムの実行時に次の演算結果が依存しない時にその次の命令を先読み実行できる、これを Out of Order という。<br />
 – 分岐があるせいで演算の先読みが難しい<br />
 — 処理が多い方の条件分岐を先に実行しておく(分岐予測)<br />
 — Out of Order と 分岐予測を合わせた実行が投機実行  </li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界(2章まで)</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>アルゴリズムクイックリファレンス</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_6]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/06/life-may-6/"/>
    <updated>2014-05-06T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/06/life-may-6</id>
    <content type="html"><![CDATA[<h2 id="gw-">GW 後半振り返り</h2>

<h3 id="macmlh-">macmlh について</h3>
<p>というか昨日だけど、 ずっとやってみたかった vim-mlh の mac IME 移植を試みた。<br />
が、結論から言うとそう簡単ではないことがわかった。  </p>

<p>基本的に、 mlh で必要なもの、 と言うか必要なパーツってのは、<br />
 - カーソルの移動<br />
 - 文字列の削除<br />
 - 選択候補の表示<br />
 などである。<br />
mac の Input Method Kit という cocoa アプリを作成するときに<br />
非常に便利なライブラリがあったが、 それがサポートしているのは<br />
クライアントとサーバ形式での変換のやり取りなので基本的には<br />
文字列の削除、 カーソルの移動などはできなかった。<br />
割とこれが致命傷で、 mlh の場合は, というよりも俺が考える mlh では、<br />
入力中に候補が出るたぐいのものではない。<br />
入力中に候補が出るようにするのは全然造作なく作れるんだけど、<br />
俺が考える、半角英数入力が終わったあとに / + <space> が入力されて初めて  
変換されるようなものにするにはできなかった。  </space></p>

<p>NSString に ^H(Ctrl+V,Ctrl+H) を送っても、 iTerm2 ではうまく動くけど、<br />
xcode とか firefox ではうまく動かなかったり..<br />
とにかく、 vimscript でかく上では上記に上げた必要なパーツは全て揃っていたが、<br />
Input Method Kit 及びそれを書く cocoa アプリ作成では見つけられなかった。  </p>

<p>ゴールデンウィークらしいモラトリアム期間の中でやってみたチャレンジだったが<br />
非常に残念な結果になったので、 また平常運転で本を消化していこうと思う。  </p>

<p>Input Method Kit に詳しい人いたら教えてほしいです。<br />
@vimtaku までぜひご一報ください。  </p>

<h3 id="section">本を買った</h3>
<ul>
  <li>アルゴリズムクイックリファレンス  </li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界  </li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h2 id="section-1">今日の目標</h2>
<ul>
  <li>詳解UNIXプログラミング(第3版) 4章 まで読む</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>アルゴリズムクイックリファレンス</li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[時をかける少女の感想]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/04/tokikake/"/>
    <updated>2014-05-04T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/04/tokikake</id>
    <content type="html"><![CDATA[<h2 id="dvd-">時をかける少女の DVD をレンタルしてみた</h2>
<p>面白かった。<br />
いままでは、金曜ロードショーだけ見て楽しい映画だなぁと思っていたけど<br />
改めて DVD でみたらとても楽しめた。<br />
自分史上映画ランキングでもかなり上位だと思う。  </p>

<h2 id="section">最後のクライマックスシーンの解釈について</h2>
<p>「未来で待ってる」「すぐ行く、走って行く」の解釈は、<br />
いかにも映画らしく読者解釈に任せようというかんじだったけど、<br />
エンディング曲の歌詞から察すると、自分の解釈としては、  </p>

<p>もう逢えない関係性のなかでの、<br />
「いつまでも忘れない」と「わたしも」<br />
っていうやりとりなんだろう。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_5]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/04/life-may-5/"/>
    <updated>2014-05-04T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/04/life-may-5</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>仕事は相変わらず忙しいが一区切りつきそうである。  </p>

<h2 id="section-1">今日振り返り</h2>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>詳解UNIXプログラミング(第3版) 1章</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_april_29]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/29/life-april-29/"/>
    <updated>2014-04-29T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/29/life-april-29</id>
    <content type="html"><![CDATA[<h2 id="section">週末振り返り</h2>

<p>本を読みまくれたのでよかった。<br />
 - rails tutorial 流し読み<br />
 – なんていうかやっぱりだいたいわかってた。<br />
 – ホントは Rspec の本とか読むともっと良いテストかけるようになっていいと思っている<br />
 - Webエンジニアのためのデータベース技術［実践］入門 7章を読み干す<br />
 – 昨日ブログ書いたとおり、読み終えた<br />
 - オペレーティングシステムを読み干す<br />
 – これはさくっと読み飛ばした。<br />
 - ネットワークはなぜつながるのか?<br />
 – 読みきった。面白かった。  </p>

<p>TOEIC を受けてこようと思う。2014年7月21日。また podcast から始めるか。  </p>

<h2 id="section-1">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-2">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">読んでる</h3>
<ul>
  <li>とある本4章まで</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>詳解UNIXプログラミング(第3版) 1章</li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>DDD ショートバージョン</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-6">買いたい</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_april_28]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/28/life-april-28/"/>
    <updated>2014-04-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/28/life-april-28</id>
    <content type="html"><![CDATA[<h2 id="section">いろいろ振り返り</h2>
<p>すごく仕事が忙しかったのと、とある試験を受けるためにずっと勉強してて<br />
全然ブログを更新出来ていなかったが、両方そこそこに落ち着いてきたのでそろそろ<br />
また新しく書き始めることにする。  </p>

<h2 id="section-1">今日の目標</h2>
<ul>
  <li>
    <p>rails tutorial 終わらせる
 – これもうかけるし全然大丈夫じゃないかとは思っている
 – なのでさらっと読み飛ばす</p>
  </li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章を読み干す</li>
  <li>オペレーティングシステムを読み干す</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない..</p>

<h2 id="section-4">勉強途中経過</h2>

<h3 id="section-5">進んでない</h3>

<h2 id="section-6">読書途中経過</h2>

<h3 id="section-7">進んだ</h3>
<ul>
  <li>ネットワークはなぜつながるのか?(3章)</li>
  <li>とある本4章まで読んだ</li>
  <li>SICP-問題1.1.5 まで終了</li>
</ul>

<h3 id="section-8">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>DDD ショートバージョン</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-9">諦めそう</h3>
<ul>
  <li>詳解UNIXプログラミング
 – 新盤が出たのでそちらを読み直していく</li>
</ul>

<h3 id="section-10">まだ積んでないけど読む</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-11">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web エンジニアのためのデータベース技術入門をざっくり読んだ]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/28/book-webengineer-database/"/>
    <updated>2014-04-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/28/book-webengineer-database</id>
    <content type="html"><![CDATA[<h2 id="web-">web エンジニアのためのデータベース技術入門をざっくり読んだ</h2>

<p><a href="http://hamasyou.com/blog/2012/05/09/4774150207/">この人の感想ブログがいい感じ</a>。<br />
なので、自分で気になったあたりを調べたところとかを、以下にメモしていく。  </p>

<h3 id="sharding-">Sharding と更新性能</h3>
<p>RAID を組んだ マスタの場合、冗長性だけでなく並列性においても有利である。<br />
MySQLではマスタはマルチスレッドで動作するが、<br />
スレーブはシングルスレッドで動いているから、スレーブのほうが負荷がかかりやすく、<br />
さらに raid のせいで I/O での差が発生する。<br />
なので、スレーブだけ SSD とか、SSD のなかでもさらに高性能な PCI-express SSD を使うと余裕になるっていう話。  </p>

<h3 id="hash-join-">Hash JOIN について</h3>
<p>MySQL では join とかするときは、残念なことに MySQL5.6 でも Nested Loop に変換されてしまう。<br />
MariaDB とか PostgreSQL とかでは Hash Join が実装されているようだ。<br />
Hash JOIN のほうがすごく早い場合がある、が、単純に Hash Join のほうが早いというわけではない。<br />
 <a href="http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/">mysql performance blog</a>の結論部をたいして無い英語力で翻訳してみると、  </p>

<blockquote><p>Based on the above information and the benchmark results for different test cases, we can see where Hash Joins work best and where they don’t. First of all Hash joins only work for equijoins. Hash join work best when you are joining very big tables with no WHERE clause, or a WHERE clause on a non-indexed column. They also provide big improvement in query response time when you are joining tables with no indexes on the join condition (Full Join). The best performance with Hash Join can be achieved when the left table can fit completely in the join buffer, or when the least amount of buffer refills are needed, as each buffer refill means a scan of the right-side table. However, Hash joins do not outperform BNL or BKA when you are joining a really small subset of rows, as then scanning the right-side table becomes costly in comparison. Block Nested Loop Join would perform better than Hash Join when you are joining two tables on a PK column such that both tables are read in PK order. One use case that I can think of for hash joins is data warehouse applications that need to run reporting queries that need to join on lookup tables which tend to be small mostly. What use cases can you think of</p></blockquote>

<blockquote><p>まず Hash join は inner join じゃなきゃそもそもうごかない。  <br />Hash join は where 句なしの大きいテーブルか、  <br />where 使っているけど インデックスはられていないカラムの条件指定の時に効果を発揮するよ。  <br />もしくは、index がはられていない列同士の結合とかにもだいぶ効果発揮するよ。  <br />ベストパフォーマンス発揮するタイミングは、左のテーブルがジョインバッファに全部収まる  <br />(最低限再度バッファに入れる時に入るサイズ)ときだ。  <br />それは右のテーブルを読みきった時にまたジョインバッファ更新するから。  <br />すげぇ小さいテーブルとか、右のテーブルに const 検索条件が使われている時とかは BNL とか BKA とかのほうがいい感じだぜ。  <br />BNL は PK での 検索条件とか、 PK での sort order 使ってるときに Hash join よりいいぜ。  <br />まぁ、一つ思いつくのは data ware hause Application とかでレポートする処理とか書く時にかなり早くなりそうだよね。  <br />あとなんかある？</p></blockquote>

<p>って感じだ。<br />
なるほど、そう考えると格段と良くなるとは言えないが、場合によっては相当効力がありそうだ。<br />
しかもグラフを見ると、なるほど、たしかに、そうとうパフォーマンスが上がっている場所がある。<br />
というか mysql 5.5 と 5.6 の差が違いすぎてウケる。  </p>

<h4 id="section">参考:</h4>
<p><a href="http://d.hatena.ne.jp/interdb/20131020/1382280437">http://d.hatena.ne.jp/interdb/20131020/1382280437</a><br />
<a href="http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/">http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/</a>  </p>

<h3 id="section-1">スレッドプールについて</h3>
<p>MariaDB だとスレッドプールが使用できるが、MySQL 5.6 ではその機能はない。<br />
エンタープライズ版とかだと用意されているらしい。 ちなみに MySQL6 とかで実装されるらしい。  </p>

<h3 id="mysql-">MySQL チューニングについて</h3>
<p>これらの記事がおそらくとても参考になるので、本番運用前にチェックしてみるとよいかも。<br />
<a href="http://yakst.com/ja/posts/200">http://yakst.com/ja/posts/200</a><br />
<a href="http://nippondanji.blogspot.jp/2009/03/mysql7.html">http://nippondanji.blogspot.jp/2009/03/mysql7.html</a><br />
<a href="http://dsas.blog.klab.org/archives/50860867.html">http://dsas.blog.klab.org/archives/50860867.html</a><br />
<a href="http://www.slideshare.net/kenmasu/ss-12604339">http://www.slideshare.net/kenmasu/ss-12604339</a>  </p>

<p>以下メモ<br />
show engine innodb status;<br />
で ロックが発生していないか見る。  </p>

<p>これで遅いトランザクションの洗い出しが可能。<br />
https://github.com/yoshinorim/MySlowTranCapture  </p>

<p>この辺は見直すとよいかも。</p>
<div>
  <pre><code class="sql">mysql&gt; show global variables like '%innodb_lock_wait_timeout%';</code></pre>
</div>

<h3 id="rds-">RDS におけるリストアについて</h3>
<p>オンプレミスな DB のリストアなら、<br />
ある地点のスナップショットのリストア + バイナリログをロールフォワードだと思うけど<br />
RDS ならどうするんだろうと思ってちょっと調べたけど、最初から MultiAZ にしておけば<br />
自動フェイルオーバーしてくれる模様。<br />
しかし3-5分くらいかかる模様なので、その間システムが落ちるのかと思うと結構しんどい。<br />
<a href="http://ijin.github.io/blog/2013/05/21/custom-non-rds-multi-az-mysql-replication/">手動でフェイルオーバー</a>
とかもあってこっちは復旧はすごく早いけどこれも結構デメリットはあるみたい。<br />
何を取るかだとは思うけど(おそらく組織レベルでサービスの停止が許せるかどうか)、<br />
メンテの楽さを考えると RDS 任せのほうが楽な気はする。  </p>

<h3 id="section-2">所感</h3>
<p>この本に関しては、業務でやっている、やっていたことが結構書かれていた。<br />
無意識レベルでやっていたことが結構書かれていたのでそういうところは飛ばして読んだ。<br />
でも、mysql のチューニングのあたりなどはあまりやったことがない経験だった。
前職では運用チームの人たちがいたのでその人達で閉じていた知識だと思うので、<br />
今の職場で活かせるようにチューニングしたいと思った。  </p>

<p>Wikipedia や Google は MariaDB を採用しているらしい。<br />
まだ枯れているという印象は全然ないけど、実際に使われていることや、ほぼ MySQL だったりするところ、<br />
スレッドプールが使えるあたりはかなり変わってきそう。<br />
hash join も使えるので、オプティマイザが賢ければかなりその恩恵受けられそう。<br />
<a href="http://d.hatena.ne.jp/interdb/20131020/1382280437">オプティマイザ比較しているブログ</a>
見る限り、実は postgresql が頑張っている。<br />
postgresql は前前職で使っていたが vacuum の印象が強くてあんまりいいイメージはない。<br />
今度自分のプロダクトを作るときには MariaDB を使ってみようと思う。  </p>

<h3 id="section-3">参考</h3>
<ul>
  <li><a href="http://dba.stackexchange.com/questions/43439/is-there-any-way-to-force-mysql-use-hash-join-instead-of-nested-loop-join">http://dba.stackexchange.com/questions/43439/is-there-any-way-to-force-mysql-use-hash-join-instead-of-nested-loop-join</a></li>
  <li><a href="http://nippondanji.blogspot.jp/2009/03/mysql7.html">http://nippondanji.blogspot.jp/2009/03/mysql7.html</a>  </li>
  <li>[http://www.atmarkit.co.jp/ait/articles/0503/24/news107<em>2.html](http://www.atmarkit.co.jp/ait/articles/0503/24/news107</em>2.html)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jbuilder のフラグメントキャッシュで、配列で書きたい場合とハッシュで書きたい場合のキャッシュを共通化したい]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips/"/>
    <updated>2014-04-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips</id>
    <content type="html"><![CDATA[<h2 id="section">結論</h2>
<p>views/book/_book.jbuilder  </p>
<div>
  <pre><code class="ruby">json.cache! book do
  _j = book.to_builder.target!
    JSON.parse(_j).each do |k,v|
        json.set! k, v
    end
end</code></pre>
</div>

<p>controller で @tmpl[:book] が set されていると仮定<br />
views/book/show.jbuilder  </p>
<div>
  <pre><code class="ruby">json.book do
  json.partial! 'book/book', book: @tmpl[:book]
end</code></pre>
</div>

<p>controller で @tmpl[:books] が set されていると仮定<br />
views/book/list.jbuilder  </p>
<div>
  <pre><code class="ruby">json.books @tmpl[:books], partial:'book/book', as: :book</code></pre>
</div>

<h2 id="section-1">背景</h2>
<p>単体表示に  </p>
<div>
  <pre><code class="ruby">{
    book: {
        bookId: &quot;moge&quot;
    }
}</code></pre>
</div>

<p>複数表示に  </p>
<div>
  <pre><code class="ruby">{
    books:[
    {
      bookId: &quot;moge&quot;
    },
    {
      bookId: &quot;moge2&quot;
    }
    ]
}</code></pre>
</div>

<p>としたいみたいなやつがググっても全然出てこなかったので。</p>

<h2 id="section-2">所感</h2>
<p>まぁこうは普通しないわなぁ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jbuilder で 共通パラメータを付与したい時は layout を使うといいかも]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout/"/>
    <updated>2014-03-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout</id>
    <content type="html"><![CDATA[<h2 id="section">前提</h2>
<ul>
  <li>rails4</li>
  <li>jbuilder(1.5.3)</li>
</ul>

<h2 id="section-1">背景</h2>
<p>jbuilder を使うと、 api のレスポンスをシンプルに定義できる。<br />
例えば、hoge_controller.rb#new の場合に<br />
app/views/hoge/new.jbuilder とかを用意しておいて、<br />
そこに template で返したい値などを書いて定義できる。<br />
しかし、共通で値を返したい場合どうするんだってことになって<br />
いろいろ考えた結果以下に落ち着いた。  </p>

<h2 id="section-2">解法</h2>
<p>layout を使う。  </p>

<p>controller にたとえば<br />
layout ‘api/application.jbuilder’ 
などと定義しておく。  </p>

<p>それで上記の例で言うと、 hoge_controller.rb#new では<br />
app/views/hoge/new.jbuilder が呼ばれるので、  </p>

<p>app/views/hoge/new.jbuilder</p>
<div>
  <pre><code class="ruby">json.from_hoge &quot;from_hoge_param&quot;</code></pre>
</div>

<p>layouts/api/application.jbuilder  </p>
<div>
  <pre><code class="ruby"># common に値を付与
json.common &quot;common_param_is_here&quot;
# controller の @hoge を参照できる
json.hoge @hoge
# template の値を付与
JSON.parse(yield).each do |k,v|
  json.set! k, v
end</code></pre>
</div>

<p>とかしておくと良いのかもしれない。<br />
結果は
{common:”common_param_is_here”, fromHoge:”from_hoge_param”, hoge:”hoge_from_controller”}
てな感じになる。  </p>

<p>ちなみに camelCase には公式の通り、 Jbuilder.key_format camelize: :lower でできる。</p>

<p>上記は、まだ実践してないけど手元で試してみた見たかんじこれで行けそう。  </p>

<h2 id="section-3">所感</h2>
<p>もっといい方法あれば教えて下さい。  </p>

<h2 id="section-4">蛇足</h2>
<p>stack over flow とかで書いてある render! を定義する方法や<br />
json.render JSON.parse(yield)  だとうまく行かなかった。  </p>

]]></content>
  </entry>
  
</feed>
