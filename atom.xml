<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2016-05-03T16:29:42+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[let's encrypt で ec2 で単独で動いているサービスを https 化する]]></title>
    <link href="http://vimtaku.github.io/blog/2016/05/03/lets-encrypt/"/>
    <updated>2016-05-03T16:19:17+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/05/03/lets-encrypt</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>
<p>前提として、 EC2 に passanger + nginx でサービスを動かしている。<br />
Let’s encrypt を導入するには主に以下をやる必要があるだろう。</p>

<ol>
  <li>サーバにログインして letsencrypt-auto スクリプトを使用して証明書を作成</li>
  <li>nginx に設定し、再起動</li>
  <li>90日で切れるので、証明書の自動更新をつける</li>
</ol>

<p>以下では、<br />
 - force SSL 的な設定は今のところ nginx などではやらない。<br />
 - クライアント側のアプリなどで対応する。  </p>

<h2 id="section-1">1. 証明書を作成</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /opt
</span><span class="line">git clone https://github.com/letsencrypt/letsencrypt
</span><span class="line">cd /opt/letsencrypt
</span><span class="line"># ec2 のセキュリティグループで 443 を開けておく
</span><span class="line">./letsencrypt-auto certonly --standalone</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nginx-">2. nginx に設定し、再起動</h2>

<p>以下をいい感じに追加する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   listen 443 ssl;
</span><span class="line">
</span><span class="line">   ssl_certificate /etc/letsencrypt/live/your.domain.name/fullchain.pem;
</span><span class="line">   ssl_certificate_key /etc/letsencrypt/live/your.domain.name/privkey.pem;
</span><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
</span><span class="line">   ssl_prefer_server_ciphers on;
</span><span class="line">   ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">3. 自動更新</h2>

<p>su で crontab -e</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">00 05 01 * * /etc/init.d/nginx stop; /opt/letsencrypt/letsencrypt-auto certonly --standalone -d your.domain.name --renew-by-default --debug ; /etc/init.d/nginx start;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">所感</h2>
<p>https 化が簡単にできて最高な時代だなぁと思った。</p>

<h2 id="section-4">参考</h2>
<p><a href="https://www.mitchcanter.com/lets-encrypt-ssl-amazon-aws/">https://www.mitchcanter.com/lets-encrypt-ssl-amazon-aws/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺が考える最強ヘッドフォンゼンハイザーHD25-1 Ⅱ を超えた Amperior with リケーブル]]></title>
    <link href="http://vimtaku.github.io/blog/2016/03/05/headphone-sennheiser-hd25-amperior/"/>
    <updated>2016-03-05T16:53:16+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/03/05/headphone-sennheiser-hd25-amperior</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>

<p><a href="http://vimtaku.github.io/blog/2014/08/17/headphone-sennheiser-best/">過去の記事</a>で書いたとおり、ゼンハイザーHD25-1 は俺が考える最強ヘッドフォンだった。<br />
しかし、 Amperior はさらにそれを超えている。しかも現在では Amazon だと HD25-1 より安い。<br />
本記事ではこのヘッドフォンについてレビューをする。  </p>

<h2 id="section-1">いまのベストを書く</h2>

<ul>
  <li>
    <p>2万5千円あるならこれを買おう。
<a href="http://www.amazon.co.jp/gp/product/B009QV14MC/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B009QV14MC&amp;linkCode=as2&amp;tag=vimtaku-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B009QV14MC&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=vimtaku-22" /></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=vimtaku-22&amp;l=as2&amp;o=9&amp;a=B009QV14MC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
  </li>
  <li>
    <p>リケーブルはこれ。
<a href="http://hb.afl.rakuten.co.jp/hgc/14c7dd20.11028942.14c7dd22.8f5ec1f7/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fneowing-r%2fneoacs-55378%2f%3fscid%3daf_link_txt&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fneowing-r%2fn%2fneoacs-55378" target="_blank">FURUTECH(フルテック) / ADL ヘッドホンリケーブル SENNHEISER HD25-1 / HD25-1 II向け（ケーブルの長さ1.3M） iHP-35S HD25 1.3m[グッズ]</a></p>
  </li>
</ul>

<p>これらで至高の環境が手に入る。  </p>

<h2 id="section-2">詳細</h2>

<h3 id="amperior-">Amperior について</h3>
<p>HD25-1 と比べてずっしりとした重さをかんじるが、別に装着してて疲れるわけではない。<br />
HD25-1 とくらべて、音質が一つづつクリアになっているように感じる。<br />
HD25-1 の音のでかたや音圧は、初めてした時は圧倒的に感じるが、Amperior とくらべてしまうと<br />
どこかぼやっとしてしまうように思う。<br />
Amperior は音圧もすごく、特にロックのサビなどにおけるベースラインのクリアさは驚きがある。<br />
中高音はやはり得意な領域で、低音もやはり得意だろうと思う。<br />
ドラムのシンバルのような音や、シャリッとした音は少し弱めに思うだろう。<br />
それにしても、全体的にクリアで、ゼンハイザーが好きな人なら絶対満足するだろう。  </p>

<p>イヤーパッドはベロアで、しかもしっかりとしていて良い。<br />
HD25-1 とくらべて締りはそんなに強くないと思う。  </p>

<h3 id="section-3">リケーブルについて</h3>
<p>純正のケーブルは、数ヶ月で断線する。<br />
HD25-1 を使っている方はもうおなじみだと思うが、これは確実に起こるだろう。<br />
普通に生きていてこうなるのだ。もう諦めよう。<br />
ただ、そのたびに新しいリケーブルを試せる。<br />
前回までイイと思ってたやつがあったんだけど、今回のリケーブルはそれを超えてきた。  </p>

<p>基本的にはギターが得意なケーブルだと思う。HD25-1 にしばらくさして聞いていたが、<br />
シールド?コネクタ部もとてもぶっとくて断線しにくそうだし、かなりクリアに中高音が聞こえる。<br />
これからどれくらい持つかで評価が変わると思うが、長持ちするならこれは素晴らしい。<br />
まぁ値段も普通に 8000円とかするからそうじゃなきゃこまるんだけど。</p>

<p>ちなみにリケーブルは、もともとのケーブルと クランプ部分が別途が接着してるので、こういうのが必要らしい、約1000円。<br />
<a href="http://hb.afl.rakuten.co.jp/hgc/14c806de.4979485e.14c806df.b0d67e71/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fe-earphone%2f4012418444334%2f%3fscid%3daf_link_txt&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fe-earphone%2fn%2f4012418444334" target="_blank">SENNHEISER(ゼンハイザー) ケーブルクランプセット Cable Clamp Set For HD25【044433】</a></p>

<p>しかも、このクランプのネジが精密ネジとからしく、この特殊ドライバーの H6 っていうやつを使う必要があった、約2000円。<br />
<a href="http://www.amazon.co.jp/gp/product/B002HVMFRG/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B002HVMFRG&amp;linkCode=as2&amp;tag=vimtaku-22">アネックス(ANEX) スーパーフィット精密両頭差替ヘクスローブドライバービット3本組セット ケース付 No.3602</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=vimtaku-22&amp;l=as2&amp;o=9&amp;a=B002HVMFRG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h2 id="section-4">所感</h2>
<p>ゼンハイザーの MOMENTUM シリーズとかも、便利だし音もいい感じなんだけど、<br />
結局 HD25-1 の方が良いと思った。<br />
それよりも素晴らしい Amperior は、本当にいいヘッドフォンだと思う。<br />
みんな買えばいいんじゃないかな、損はしないと、俺は言い切れるよ。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails4 で utf8mb4 にしたい話]]></title>
    <link href="http://vimtaku.github.io/blog/2015/12/09/utf8mb4/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/12/09/utf8mb4</id>
    <content type="html"><![CDATA[<p>自分用のメモ</p>

<h2 id="etcmycnf">/etc/my.cnf</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[client]
</span><span class="line">default-character-set=utf8mb4
</span><span class="line">
</span><span class="line">[mysqld]
</span><span class="line">character-set-server=utf8mb4
</span><span class="line">innodb_file_per_table
</span><span class="line">innodb_file_format=barracuda
</span><span class="line">innodb_large_prefix = 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="railsrootconfigdatabaseyml">$RAILS_ROOT/config/database.yml</h2>
<p>default に追加</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">charset: utf8mb4
</span><span class="line">encoding: utf8mb4
</span><span class="line">collation: utf8mb4_general_ci</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ridgepole--schemafile">ridgepole の Schemafile</h2>
<p>create_table :news, force: true, id: :bigint, options: “ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC” do |t|
    blahblah…
end</p>

<h2 id="section">参考</h2>
<p><a href="http://blog.arith-metic.jp/category/rails">http://blog.arith-metic.jp/category/rails</a>
<a href="http://yamacent.hatenablog.com/entry/2015/06/06/235900">http://yamacent.hatenablog.com/entry/2015/06/06/235900</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wanna test view *_path on my rails console(pry), so what should i do?]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/rails-url-helper/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/rails-url-helper</id>
    <content type="html"><![CDATA[<h2 id="just-do">Just do</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pry(main)&gt; include Rails.application.routes.url_helpers
</span><span class="line">
</span><span class="line">pry(main)&gt; admin_customer_path(User.first)
</span><span class="line">User Load (0.3ms)  SELECT  `users`.* FROM `users`  ORDER BY `users`.`id` ASC LIMIT 1
</span><span class="line">=&gt; "/admin/customers/1"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<p>If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses.</p>

<h1 id="detail">Detail</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Hoge
</span><span class="line">  def self.exec
</span><span class="line">    raise "something is not good" if something_check
</span><span class="line">
</span><span class="line">    ActiveRecord::Base.transaction do
</span><span class="line">      User.create(username:"moge")
</span><span class="line">      User.create(username:"moge")
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    rescue StandardError =&gt; e
</span><span class="line">      # if database transaction has occured, this statements will be called
</span><span class="line">      p "duplicate error"
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This code looks good, but includes terrible problem.
It’s definetly rescue clause. In this code, something_check return true, raise “something is not good” error,<br />
<code>and shows "duplicate error"</code>. Terrible.</p>

<p>so if you use ActiveRecord::Base, I strongly recommend use begin rescue clauses implicit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Hoge
</span><span class="line">  def self.exec
</span><span class="line">    raise "something is not good" if something_check
</span><span class="line">
</span><span class="line">    begin
</span><span class="line">      ActiveRecord::Base.transaction do
</span><span class="line">        User.create(username:"moge")
</span><span class="line">        User.create(username:"moge")
</span><span class="line">      end
</span><span class="line">
</span><span class="line">      rescue StandardError =&gt; e
</span><span class="line">        # if database transaction has occured, this statements will be called
</span><span class="line">        p "duplicate error"
</span><span class="line">      end
</span><span class="line">    end
</span><span class="line">
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruboty を github private で動かす]]></title>
    <link href="http://vimtaku.github.io/blog/2015/09/27/ruboty/"/>
    <updated>2015-09-27T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/09/27/ruboty</id>
    <content type="html"><![CDATA[<h2 id="section">何箇所かハマったので記録しておく</h2>
<p><a href="http://kentana20.hatenablog.com/entry/2014/11/02/180812">http://kentana20.hatenablog.com/entry/2014/11/02/180812</a></p>

<p>基本的には上記の記事にそって行けば大丈夫なんだけど、なんかしょかハマった。<br />
具体的には、readme の deploy ボタンで連携できないことだ。<br />
ただ、問題なく連携はできる。<br />
heroku の deploy タブ の Github のところから private に clone した(fork は不可なので)やつを<br />
指定すれば連携ができる。<br />
あと、dotenv の設定が必要なので、環境変数の設定のために</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku config:add SLACK_PASSWORD='' SLACK_ROOM="" SLACK_TEAM="" SLACK_USERNAME=""</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>というような感じで設定する。  </p>

<p>あと、Add ons で Redis to go を検索して追加する。この時カードを登録してなければ、クレカ登録が促されるので、がんばる。  </p>

<p>password の部分は xmpp の slack パスワードを使うことに注意する(https://xxx.slack.com/account/gateways) 。  </p>

<p><code>bundle exec ruboty</code> を起動させるところ(heroku の resources free dyno で edit して 変更して保存する)。<br />
fork した ruboty-template が依存している xrc の version が 0.1.4 で、  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parent.rb:41:in `each'
</span><span class="line">p/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:249:in `block in on_features_received': undefined method `name' for "   ":REXML::Text (NoMethodError)
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parent.rb:41:in `each'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:247:in `on_features_received'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:176:in `on_received'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:217:in `block in connection'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:78:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:78:in `consume'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:49:in `end_element'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:26:in `block (2 levels) in bind'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `block in parse'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `parse'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `each'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:38:in `parse'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:34:in `start'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:14:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/robot.rb:45:in `adapt'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:24:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-slack-0.1.7/lib/ruboty/adapters/slack.rb:81:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-slack-0.1.7/lib/ruboty/adapters/slack.rb:14:in `run'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/robot.rb:22:in `run'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/bin/ruboty:6:in `&lt;top (required)&gt;'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/commands/run.rb:5:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/bin/ruboty:23:in `load'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/bin/ruboty:23:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こんな感じのエラーがでたので、 xrc のバージョンが古いっぽかったので<br />
Gemfile.lock の version を 0.1.8 に編集して commit したらいけた。  </p>

<p>以上。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model.update_attribute の罠]]></title>
    <link href="http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap/"/>
    <updated>2015-07-14T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>update_attribute で一つだけupdate しようと思ってたら他の属性も変わってて意味不明だった。  </p>

<h2 id="section-1">ヌワー</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">user = User.first
</span><span class="line">p user.name  ## "vimtaku"
</span><span class="line">
</span><span class="line">user.name = "hoge"
</span><span class="line">user.update_attribute(:age, 100)
</span><span class="line">##  UPDATE users SET `name` = 'hoge', `age` = 100 where `id` = 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>結局 user.reload した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クリティカル・シンキング]]></title>
    <link href="http://vimtaku.github.io/blog/2015/05/27/critical-thinking/"/>
    <updated>2015-05-27T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/05/27/critical-thinking</id>
    <content type="html"><![CDATA[<h1 id="section">クリティカル・シンキング</h1>

<h2 id="section-1">ベネフィット</h2>
<p>相手によってベネフィットは変わる。<br />
どのようにベネフィットを聞き出すのかが問題。<br />
また、ベネフィットに答えるために、有効な実績があるのは強い。  </p>

<h2 id="section-2">難しさ</h2>
<p>何かを提案、説得するためには、ベネフィットに答えることを意識すると良いと思う。<br />
実績を作るための努力はいつも怠らないことが重要なのだと思う。<br />
また、実績がない場合も、それに準ずる実績を提示することで、その可能性を示すことができる。  </p>

<h2 id="section-3">提案における顧客のベネフィットの共通項</h2>
<ul>
  <li>お前は誰なのか。信用できるのか。  </li>
  <li>困っていることを解決できるのか。  </li>
  <li>実際に効果があるのか。  </li>
  <li>コスト感<br />
    <ul>
      <li>導入しやすさ  </li>
      <li>値段  </li>
    </ul>
  </li>
</ul>

<p>面接でも、何かの商品を売る場合でも、上記は必要なのだと思った。  </p>

<h2 id="section-4">所感</h2>
<p>イイタイコト、キキタイコトでブレストすると、本当に相手が求める質問に辿りつけた。<br />
たとえばプレゼンや、面接でも、相手がどういうことを聞きたいか、などをある程度想定して、<br />
それを事前に考えてみることはかなり効果的だと思う。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create staging server using jvm with t2.micro]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/12/datomic-lein-for-ec2-t2-micro/"/>
    <updated>2015-04-12T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/12/datomic-lein-for-ec2-t2-micro</id>
    <content type="html"><![CDATA[<h1 id="create-staging-server-using-jvm-with-t2micro">Create staging server using jvm with t2.micro</h1>

<h2 id="jvm-is-required-many-memories">jvm is required many memories</h2>
<p>I ran command <code>lein ring server</code>, not-enough-memory error has raised.<br />
I googled and found solution.<br />
<a href="https://github.com/omcljs/om/issues/101">https://github.com/omcljs/om/issues/101</a>  </p>

<h2 id="memo-for-create-staging-on-ec2-instanceamazon-linux">memo for create staging on ec2 instance(amazon linux)</h2>

<p>something like this(picked up from history)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install leiningen
</span><span class="line">wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
</span><span class="line">mkdir bin
</span><span class="line">chmod a+x lein
</span><span class="line">./lein
</span><span class="line">ssh-keygen
</span><span class="line">export MY_DATOMIC_USERNAME="moge@gmail.com"
</span><span class="line">export MY_DATOMIC_PASSWORD="datomic_password"
</span><span class="line">sudo yum install java-1.8.0-openjdk.x86_64
</span><span class="line">ll /etc/alternatives/java
</span><span class="line">cd /etc/alternatives/
</span><span class="line">sudo mv /etc/alternatives/java{,.bak}
</span><span class="line">ln -s /usr/lib/jvm/jre-1.8.0/bin/java /etc/alternatives/java
</span><span class="line">sudo ln -s /usr/lib/jvm/jre-1.8.0/bin/java /etc/alternatives/java
</span><span class="line">lein ring server</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンジニアのための 確定拠出年金]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/12/401k-for-engineer/"/>
    <updated>2015-04-12T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/12/401k-for-engineer</id>
    <content type="html"><![CDATA[<h1 id="section">エンジニアのための 確定拠出年金</h1>

<h2 id="section-1">はじめに</h2>
<p>俺だ、 vimtax だ。<br />
今日は確定拠出年金について調べてみるぞ。  </p>

<h1 id="section-2">確定拠出年金について</h1>

<h2 id="section-3">確定拠出年金とは</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">確定拠出年金は、公的年金に上乗せするための選択肢として作られた年金制度です。  
</span><span class="line">60歳未満の自営業者（国民年金加入者）や企業等にお勤めの方（厚生年金保険加入者）を対象とし、  
</span><span class="line">公的年金等に確定拠出年金を上乗せすることで、老後の資産形成に役立てることができます。</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>引用:<a href="http://www.jp-bank.japanpost.jp/kojin/sonaeru/kakutei/kj_sn_kt_what.html">http://www.jp-bank.japanpost.jp/kojin/sonaeru/kakutei/kj_sn_kt_what.html</a>  </p>

<p>と書いてあるが、60歳まで下ろせない貯金で、そのままためておくこともできるし、<br />
資産運用することもできる、っていうかんじのものだ。  </p>

<h2 id="section-4">対象</h2>
<p>確定拠出年金には 個人型と、企業型がある。<br />
個人型にもパターンがあるが、この記事では、<br />
大抵のサラリーマンが該当するであろう個人型の第2号被保険者を扱うものとする。<br />
自分が何型なのかとかは、上記の ゆうちょのページを読んで、判別して欲しい。  </p>

<h2 id="section-5">メリット</h2>

<h3 id="section-6">所得税、住民税の控除</h3>
<p><a href="http://iitoushi-tanken-nisshi.hateblo.jp/entry/2013/12/26/022333" title="このリンク">このリンク</a>によると、<br />
年収が396万円以上695万円未満の人だと仮定すると(所得税が20%)、<br />
月額2万3千円(これが最大)を12ヶ月払い、年末調整で申告すると、 23,000 * 12 = 276000 の 20% = 4万6千円 が<br />
返ってくるらしい。これは馬鹿にできない。<br />
さらに、来年の住民税も 10%分(2万3千円) やすくなるらしい。<br />
合計6万9千円も得するようだ。<br />
これはやらない手はないのではないか、と思わせる。  </p>

<h3 id="section-7">資産運用による利益に対する非課税</h3>
<p><a href="https://www.toushin.or.jp/dc/labo/vol2_yamasaki/">https://www.toushin.or.jp/dc/labo/vol2_yamasaki/</a><br />
とかを見ればわかるように、資産運用で得られた利益が非課税であるのは大きい。  </p>

<h2 id="section-8">デメリット</h2>

<h3 id="section-9">手数料</h3>
<p><a href="http://shacho-radio.com/?p=1680">http://shacho-radio.com/?p=1680</a><br />
個人型の場合は手数料がかかるらしい。  </p>

<h4 id="sbi">SBI証券の例</h4>
<p>SBI証券の例を見てみる。<br />
[http://ad401k.sbisec.co.jp/kojin/01<em>04.html](http://ad401k.sbisec.co.jp/kojin/01</em>04.html)  </p>

<h4 id="section-10">最初だけかかる額</h4>
<p>加入時に 3,857円</p>

<h4 id="section-11">月額課金</h4>
<p>50万円になるまでは、324円 + 167円 = 491円(月額)かかる。<br />
50万円以上になると、 167円(月額)かかる。  </p>

<p>なので、初年度だと、<br />
491 * 12 + 3857 = 9749 円かかる。<br />
ただ、4万6千円の税制メリットと比べれば、良さそうに見える。  </p>

<h3 id="section-12">60歳まで下ろせない</h3>
<p>最大で預けたと仮定すると、基本的に 276000円(年額) が下ろせないということになる。<br />
276000円をつかって個人的に運用だったり、なにかの活動資金に割り当てて、儲けが出たときに、
課税された上での額が5万9千円以上なら、やる価値はあるように見える。  </p>

<p>ただ、急にお金が必要になる場合ってたぶんあるので、そこんところは考えなきゃダメだと思う。<br />
といっておきながらも、 SBI 証券のを見ていると年1回、額の変更は可能なのであまり考えなくてもいいかも。  </p>

<h1 id="section-13">所感</h1>
<p>急にお金が必要になるって、結婚式挙げるか、家買うか、病気なおすか、そのくらいじゃないのかな。<br />
お金(貯金)に余裕があるか、老後のための貯金に自信がない人は、是非やったらいいように見える。<br />
手元にお金があることのほうがメリットだろ！っていう人には向かないと思う。<br />
自分の場合は奨学金とかもまだあるから、その辺を繰り上げ返済したほうがメリットあるんじゃねぇかっていうのもある。<br />
とりあえず直近ではお金必要ないので、上限突っ込んでもいい気がするなぁ。<br />
だけど、年取ってから使うお金と、今使うべきお金って割りと違う気もするんだよなぁ。<br />
そういう意味で、手元にお金があるメリットっていうのは、額面通りじゃあないように思う。  </p>

<p>こういうお金の話って向き合うのスーパーめんどいけど、休みの日とか、時間があるときに少しずつまとめていくのは、<br />
結局得になるかもしれないとおもうと、今後もたまにはこういうのを調べていきたい。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シンプルな wiki 「gollum」 を評価した]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/05/gollum-eval/"/>
    <updated>2015-04-05T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/05/gollum-eval</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<ul>
  <li>backlog はかなり緑だけど、よく出来てた  </li>
  <li>gollum は backlog と比べると、今の組織ではまだ早い  </li>
  <li>気合があれば gollum を修正して使うといいんじゃないの  </li>
</ul>

<h1 id="section">背景</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">【緩募】シンプルな wiki で無料で markdown がかけてデザインがイケてて添付ファイルが up できて backlog より便利なヤツ  </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こういう要求があった。<br />
今、会社で wikiシステムにも backlog を使っていて、よく出来ているんだけど、<br />
エンジニア的な視点からは非常に使いづらい気がしていて、<br />
markdown でもっとイイ感じのなにかが欲しかった。  </p>

<h2 id="backlog-">はたして backlog の何が不満なのか</h2>
<ul>
  <li>なんか全体的に緑なデザイン  </li>
  <li>markdown プレビューがだるい点  </li>
  <li>(重要)コンフルに比べて、小ページの概念がないこと<br />
    <ul>
      <li>いま気づいたけど、これがマジでイケてない。コンフルはそれが便利だったことに今気づいた。<br />
        <ul>
          <li>どうでもいいけど コンフルは検索がクソな印象がある。  </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>(重要)なんかロックインされちゃう点<br />
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>ぶっちゃけ疎にしておきたい。(エクスポート</td>
              <td>インポートできるようになっていてほしい(調べてない))</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>markdown という表記自体もある種ロックインだけど、markdown からの変換は期待できるし、現在のデファクトだからそれはそれでいいかと..  </li>
    </ul>
  </li>
</ul>

<h1 id="gollum-">それで気になっていた gollum を評価した</h1>
<p><a href="https://github.com/gollum/gollum">gollum</a> はシンプルな wiki で、かなり良く出来ていると思う。<br />
ただ、まだ実用にはたえないと思う。足りないと感じている点は以下に述べる。  </p>

<h2 id="section-1">足りないと感じている点</h2>
<ul>
  <li>pdf のファイルを添付したとき、それがプレビューにならない(pdf.js的な)。  </li>
  <li>ファイルを添付した場合、その画面に添付されているリストが出て欲しいが、出ない  </li>
  <li>ライブプレビュー機能はあるがずいぶん画面が変わってしまう。非エンジニアにとっては、ライブプレビューがない方が使いやすい(WYSWIG?だっけ、があるから)  </li>
  <li>だけど、ほんとはライブプレビューしたい。 docbase みたいなライブプレビューがある方が良い。  </li>
  <li>どのファイルが最近編集されたのか、というようなストリームが欲しいが、ない。  </li>
  <li>多くのボタンが英語で書かれている点。<br />
    <ul>
      <li>rails 的に i18n でおけばイイってことではないように見える。  </li>
    </ul>
  </li>
  <li>ディレクトリ一覧のファイルを見たいとき、URL を削ってディレクトリを指定するが、そのとき期待する動作は自分にとってはそのパス以下のファイル一覧であるが、見れない(ページ作成になる)。<br />
    <ul>
      <li>Apache とかでディレクトリの中が見えてるあれを期待してる(伝われ)  </li>
    </ul>
  </li>
  <li>あるファイルを見ている時、それ以下のファイルが木構造で見えていて欲しい、もしくは簡単に見えるようになってほしい<br />
    <ul>
      <li>コンフル小ページの発想  </li>
    </ul>
  </li>
  <li>Dropbox と連携とかするとウマイことできるかなぁと感じたけど、エクセルとかそういうのを web で見ようとしてダウンロードになっちゃって辛みみたいなのがかなりある  </li>
  <li>(自分はあまり必要としていないが)変更をメールで飛ばせる機能がない<br />
    <ul>
      <li>そういう意味で コンフルも一度編集したら勝手に記憶していて、メール通知が飛んでくる機能があった。まぁ悪くない。  </li>
    </ul>
  </li>
  <li>日本語での検索でエラーがでる(これはたぶんいろいろ追ったら普通に修正可能だと思う)  </li>
  <li>チームで使うなら、TOP のロゴみたいなやつは欲しい。  </li>
</ul>

<p>ただ、これらのほぼすべてについて、自分たち用に修正することができるのは、とんでもないメリットだ。<br />
ただ修正するには時間が必要であることは間違いない。  </p>

<h2 id="section-2">良いなと思っている点</h2>
<ul>
  <li>シンプルで動作が早く、unix な人にはかなり便利に使える点  </li>
  <li>ディレクトリを スラッシュで切っていく点は本当に便利(アトラシアンのコンフルとかで／とかで区切っていた風潮)  </li>
  <li>markdown でかける  </li>
  <li>h1, h2 がリンクになる点。これは素晴らしい。  </li>
  <li>(重要)すべてがファイルになっているので、なにかいい仕組みが出てきた時に気軽に変更できる点  </li>
</ul>

<h2 id="gollum--memo">gollum 使用方法 memo</h2>
<p><a href="https://github.com/gollum/gollum">https://github.com/gollum/gollum</a>
を見て欲しい。<br />
日本語対応は<a href="http://d.hatena.ne.jp/a_bicky/20140915/1410750993">この記事</a> を参考にした。<br />
なんか、普通に保存したときエラーがでるのは、 ググッた結果 Gemfile に<br />
<code>gem 'gollum-rugged_adapter' </code>
を追加してなんかウマイことやったら回避できた。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># アップロード付き、 rugged はエラー回避で必要だった、 show-all でファイルが全部観れる
</span><span class="line">bundle exec gollum --allow-upload page --adapter rugged --show-all</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">所感</h2>
<p>こと、営業職の多い組織だと、素での gollum 使用はしんどいに違いない。<br />
backlog と比べて出来ないことが多すぎて、それ以上のメリットを享受できないからだ。<br />
だから、大抵の場合はたぶん既存で使っているやつのほうがいいかもしれない。  </p>

<p>エンジニアが多い職場で、本当に金がないなら、これは導入する価値はあると思う。<br />
(ぶっちゃけ、markdown 系共有のサービスで有料なものが多すぎると思う。<br />
エンジニアとしてビジネスする側で考えたら非常にいいなと思うけど、<br />
おかね払って使う立場から考えたら markdown が共有できたくらいでお金を払いたくないっていうのが<br />
僕の正直なキモチだ。)<br />
(そして逆に言うと、このオープンソースを使って自分が欲しい機能を付け足すだけで<br />
お金をとれるレベルのサービスを創れる気もする。fork して月額100円くらいで売り出したい。<br />
(まぁそんな時間ないんだけども。)
)
でも、今考えると gollum と、 qiita や docbase とかって微妙に立ち位置が違う気もしてきた。  </p>

<p><a href="https://support-project.org/knowledge_info/index">https://support-project.org/knowledge_info/index</a>
っていうオープンソースを作っている人がいて、これもかなり有用で、いい感じな気はしているんだけど、<br />
個人的に、Java で書かれているのがネックで、JVM を起動したり、Java でメンテするってのを考えると<br />
ちょっと敷居が高かったりするのがホンネだ。  </p>

<p>そういう意味で、何もなかったら gollum に contribute したいんだけど、<br />
ぶっちゃけそれ以上にやらなきゃならんことがたくさんあるのでちょっとしんどい。<br />
それでも少しずつは貢献できたらいいなと思う(したいに価値はないが)。  </p>

<p>この週末というか今日はかなりコレの評価に費やしたので記事にしておく。<br />
だれかにとってこの記事がためになれば幸いです。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出るときの解決法]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker/"/>
    <updated>2015-04-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker</id>
    <content type="html"><![CDATA[<h1 id="section">概要</h1>
<p>rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出る。<br />
原因は
<a href="http://qiita.com/kuboon/items/1d009e2f89729fe5db78">参考のQiita</a> 参照。  </p>

<p>自分の場合はうまくいかなかったので、ソースおったらここ直せば良さそうだったので<br />
ここを上書きする感じにした。  </p>

<h4 id="configinitializersrailsadminrb">config/initializers/rails_admin.rb</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Fix for bug when specified japanese datetime string
</span><span class="line"># http://qiita.com/kuboon/items/1d009e2f89729fe5db78
</span><span class="line">module RailsAdmin
</span><span class="line">  module Config
</span><span class="line">    module Fields
</span><span class="line">      module Types
</span><span class="line">        class Datetime &lt; RailsAdmin::Config::Fields::Base
</span><span class="line">          ## こいつを入れないと変更ない時にダメだった
</span><span class="line">          def form_value
</span><span class="line">            I18n.l(self.value, format:localized_date_format)
</span><span class="line">          end
</span><span class="line">          def localized_date_format
</span><span class="line">            "%Y-%m-%d"
</span><span class="line">          end
</span><span class="line">        end
</span><span class="line">      end
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alamofire_SwiftyJSON でビルドエラーが出るとき]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/30/swiftyjson-alamofire/"/>
    <updated>2015-03-30T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/30/swiftyjson-alamofire</id>
    <content type="html"><![CDATA[<h1 id="section">こんなエラーが出ていた</h1>
<p>The operation couldn’t be completed. No such file or directory.  </p>

<h1 id="pods--dependencies--alamofire--swiftyjson-">pods の dependencies に alamofire と swiftyjson をたしてあげよう</h1>
<p>たぶんそれで行けるはず。  </p>

<h1 id="section-1">他のマシーンでなぜか動かない場合</h1>
<p><a href="http://stackoverflow.com/questions/26834293/swift-could-not-build-objective-c-module-alamofire">この stack overflow の</a>
Dependencies を 削除する、でうまく行った。<br />
Clean で全部消えないとか、どんだけ罠なんだよ。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ヒメダイをマルで買ってきて捌いて食べてみた]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/24/himedai/"/>
    <updated>2015-03-24T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/24/himedai</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<ul>
  <li>ヒメダイはすごく美味しい白身魚だった</li>
  <li>ムニエルだと引くレベルでウマイ</li>
</ul>

<h2 id="section">チャート</h2>
<ul>
  <li>捌く難易度
    <ul>
      <li>割りとシンプルなタイ。鱗を取るのがめっちゃダルい。</li>
    </ul>
  </li>
  <li>味
    <ul>
      <li>すこぶる美味</li>
    </ul>
  </li>
  <li>料理
    <ul>
      <li>刺し身はかなり美味</li>
      <li>ムニエルはすこぶる美味</li>
    </ul>
  </li>
</ul>

<h2 id="section-1">写真あるけど</h2>
<p>めんどいから省略</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vue.js ではまったこと]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/19/vue-js-error/"/>
    <updated>2015-03-19T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/19/vue-js-error</id>
    <content type="html"><![CDATA[<h2 id="typeerror-thiselremoveattribute-is-not-a-function">TypeError: this.el.removeAttribute is not a function</h2>
<p>とかいうエラーが出た。
いろいろ悩みまくったが、 x-template の直下に二つのdom を並べたらエラーになるっぽい。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[やるべきこと、やるべき場所]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/14/yarubekikoto-poem/"/>
    <updated>2015-03-14T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/14/yarubekikoto-poem</id>
    <content type="html"><![CDATA[<h1 id="section">やるべきこと</h1>
<p>人には、やるべきことが与えられていると、最近思うようになった。<br />
こういうと大層なことを言っているように聞こえるかもしれないけど、<br />
一つ一つの仕事が社会に影響して、人々の生活が回ってる。  </p>

<p>それぞれの仕事には向き不向きがあったり、不満や人間関係があったり、<br />
楽しいことや辛いこともあるけど、仕事を通して影響を与えられるなら、<br />
こんなに楽しいことはない。  </p>

<p>自分が満足して、自分らしく生きられて、大きく社会に影響できる環境を、<br />
創れるようにならなきゃダメだなぁと思う。  </p>

<h1 id="section-1">やるべき場所</h1>
<p>たぶん働くべき場所というか、自分がもっと輝く場所っていうのは<br />
人それぞれにちゃんとあって、そのやるべき場所っていうのは答えが無いんだけど、<br />
今いる場所が、自分がいるべき場所か? 自分がやるべきことをやってるのか?<br />
という問いは、定期的に行ったほうがいいかもしれない。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fig and rails env is too heavy, I found workaround(Mac OSX)]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/04/fig-so-slow/"/>
    <updated>2015-03-04T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/04/fig-so-slow</id>
    <content type="html"><![CDATA[<h2 id="ps">(PS)</h2>
<p>I quit use fig so I decieded to develop localhost. because I have no time to construct devenv.<br />
Firstly, this blog was quite good and effective for me.<br />
Sync is working fine, but suddonly, rsync was getting weird.<br />
Additionally, these rsync strategy is faster than sync folder,<br />
 but it is definetly slow than localhost.<br />
Localhost is super fast.<br />
And I faced problems as follows. 
 - rails console history or mysql history is gone away when fig restart.<br />
 - rails console mysql connection has gone away because of restarting db.<br />
For now, I think fig(docker compose) is not good as development environment.<br />
If you have identical dev env, please message to me.  </p>

<h2 id="tldr">TL;DR</h2>
<ul>
  <li>virtual box disk io is not good because of file sync. so turn off.<br />
 – <img src="http://gyazo.com/f02f61fea1a6f2d306c37d08b6553776.png" alt="http://gyazo.com/f02f61fea1a6f2d306c37d08b6553776" />  </li>
  <li>use NFS, for sync your directories.  </li>
</ul>

<h2 id="environment">Environment</h2>
<ul>
  <li>fig 1.0.0  </li>
  <li>boot2docker v1.3.1  </li>
  <li>docker container(rails)  </li>
  <li>docker container(mysql)  </li>
</ul>

<h2 id="background--problem">Background &amp; Problem</h2>
<p>Recently, it is very easy to create development env because fig and docker.<br />
But I was starting development, I noticed it is verrrry slow… It’s so annoying.  </p>

<h2 id="workaround">Workaround</h2>

<h3 id="turn-off-users-directory-sync">Turn off /Users directory sync</h3>
<p>By default, /Users directory is synced with boot2docker.<br />
This sync is very slow so I turned it off, response speed is up.  </p>

<h3 id="use-nfs">Use NFS</h3>
<p>I turn off sync, so I have to another method to sync my host’s source code.<br />
I googled, and found <a href="https://github.com/boot2docker/boot2docker/issues/64"> this thread </a>.<br />
This thread is quite good for me.  </p>

<p>I used <a href="https://gist.github.com/Jupiterrr/5348f7f95df7de2888f0">this solution</a>
because I wanna use fig.  </p>

<h4 id="syncsh">sync.sh</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">!/bin/bash
</span><span class="line">
</span><span class="line">set -u # prevent unbound variables
</span><span class="line">set -e # terminate on error
</span><span class="line">
</span><span class="line">SSH_PORT=$(boot2docker config 2&gt;&amp;1 | awk '/SSHPort/ {print $3}')
</span><span class="line">
</span><span class="line"># load rsync
</span><span class="line">boot2docker ssh tce-load -wi rsync
</span><span class="line">
</span><span class="line"># ensure existance of .rsyncignore
</span><span class="line">touch .rsyncignore
</span><span class="line">
</span><span class="line">function sync {
</span><span class="line">  # sync current directory to ~/share on the vm
</span><span class="line">  rsync -rlz --exclude-from=.rsyncignore -e "ssh -i $HOME/.ssh/id_boot2docker -p $SSH_PORT" --force --delete ./ docker@localhost:/home/docker/share
</span><span class="line">  echo "sync: $(date)"
</span><span class="line">}
</span><span class="line">
</span><span class="line">sync
</span><span class="line">#fswatch -o . | xargs -n1 -I{} sync</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This script is almost good, but in my case, the last command fswatch is don’t affect.<br />
so I used simple command <code>watch -n 2 sh sync.sh</code>. it works for me.<br />
I wrote .rsyncignore something like below.  </p>

<h4 id="rsyncignore">.rsyncignore</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tmp/
</span><span class="line">vendor/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="dockerfile">Dockerfile</h4>

<p>gem is installed global.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">FROM ruby
</span><span class="line">RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev ruby-nokogiri vim
</span><span class="line">RUN mkdir /myapp
</span><span class="line">WORKDIR /myapp
</span><span class="line">ADD Gemfile /myapp/Gemfile
</span><span class="line">ADD . /myapp
</span><span class="line">RUN bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="figyml">fig.yml</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">db:
</span><span class="line">  image: mysql:5.6
</span><span class="line">  ports:
</span><span class="line">    - "3306:3306"
</span><span class="line">  environment:
</span><span class="line">    - MYSQL_ROOT_PASSWORD=hoge
</span><span class="line">  # volumes:
</span><span class="line">  #   - ./data:/var/lib/mysql
</span><span class="line">
</span><span class="line">web:
</span><span class="line">  build: .
</span><span class="line">  command: bundle exec rails server --port=3000 --binding=0.0.0.0
</span><span class="line">  working_dir: /myapp
</span><span class="line">  dns: localhost
</span><span class="line">  volumes:
</span><span class="line">    - /home/docker/share:/myapp
</span><span class="line">  ports:
</span><span class="line">    - "3000:3000"
</span><span class="line">  expose:
</span><span class="line">    - 3000
</span><span class="line">  links:
</span><span class="line">    - db</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In db section, volumes isn’t need.<br />
In web section, volumes is attached from boot2docker to web container.  </p>

<p>That’s it.  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fig(docker compose) で rails する]]></title>
    <link href="http://vimtaku.github.io/blog/2015/03/03/fig-rails/"/>
    <updated>2015-03-03T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/03/03/fig-rails</id>
    <content type="html"><![CDATA[<h1 id="section">追記</h1>
<p>この内容は古いです、というか fig で建てるところまではコレでイケルと思いますが、実際には自分で fig で開発してないです。<br />
フォルダの同期が以上に重たく、そのせいで rails console や server とかしても実用に耐えられないレベルのパフォーマンスしか出ないからです。<br />
おそらく sync ディレクトリを変える、 rsync で送る、 イイ感じに出来たら pull する仕組みを創るなどすれば、うまくいくとは思いますが、<br />
localhost での開発に慣れている場合、それはただの時間の浪費としか思えないと思います。<br />
現在では開発環境として扱うのは難しいという判断に至りました(当然個人の感想です)。<br />
参考までに<a href="http://vimtaku.github.io/blog/2015/03/04/fig-so-slow/">rsync の記事も参照される</a>と良いかもです。  </p>

<h1 id="section-1">メモ</h1>

<p>ちなみに、 現在では、 fig は  <a href="https://github.com/docker/compose">docker-compose</a> になっている。<br />
が、それに気づかず しばらく fig で進めた。  </p>

<p>fig で rails は tutorial 通りでは動かなかった。<br />
基本は tutorial にそってやったが、boot2docker 経由でやる場合に、<br />
binding のあたりで、container 内からは呼べるけど、 boot2docker の中から呼べなくて、<br />
その辺を修正した。<br />
ちなみに、 postgresql がサンプルになっていたが、 mysql でやりたかったので適宜変更した。  </p>

<h3 id="figyml">fig.yml</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">db:
</span><span class="line">  image: mysql:5.6
</span><span class="line">  ports:
</span><span class="line">    - "3306:3306"
</span><span class="line">  environment:
</span><span class="line">    - MYSQL_ROOT_PASSWORD=hogehoge
</span><span class="line">
</span><span class="line">web:
</span><span class="line">  build: .
</span><span class="line">  command: bundle exec rails server --port=3000 --binding=0.0.0.0
</span><span class="line">  volumes:
</span><span class="line">    - .:/myapp
</span><span class="line">  ports:
</span><span class="line">    - "3000:3000"
</span><span class="line">  links:
</span><span class="line">    - db</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>fig run web rake db:create db:migrate</code></p>

<p>なぜか mysql に繋げなくなるパターンがあったが、<br />
docker images でだした image を docker rmi で全て消してやり直したり、<br />
それでも微妙だったので、 fig run db mysqld  とかするといい感じになった。  </p>

<h1 id="section-2">所感</h1>
<p>fig でやれたらよかったと思ったので、ちょっと時間がかかったけど、うまくできそうでよかった(小並感)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[楽天カード(e-NAVI)の現地利用額(為替レート)は翌月12日まで照会できない]]></title>
    <link href="http://vimtaku.github.io/blog/2015/02/23/rakuten-kard/"/>
    <updated>2015-02-23T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/02/23/rakuten-kard</id>
    <content type="html"><![CDATA[<h2 id="e-navi12">楽天カード(e-NAVI)の現地利用額(為替レート)は翌月12日まで照会できない</h2>
<p>タイトルの通りであるのだが、電話で問い合わせたところ、<br />
システム的に翌月になるまで照会が出来ないとのこと。<br />
もし同じ要求がある人がいたら、翌月12日まで待つしかないので諦めよう。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac 開発環境 setup 2015]]></title>
    <link href="http://vimtaku.github.io/blog/2015/02/21/mac-setup-2015/"/>
    <updated>2015-02-21T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/02/21/mac-setup-2015</id>
    <content type="html"><![CDATA[<h1 id="mac-">新しい mac を手に入れた時にすること</h1>
<p><a href="http://www.d-wood.com/blog/2014/03/12_5808.html">これが非常に良さそう</a>
なので、一旦自分用に考えてみる。  </p>

<h2 id="section">気をつけるべきこと</h2>
<ul>
  <li>一番最初のセットアップ時に、 firevalut にチェックを入れるかどうか  </li>
  <li>入れないほうがセキュリティ的にはどうかと思うけど、なんか変なハマり方しなくて良さそう  </li>
</ul>

<h2 id="section-1">準備</h2>

<h3 id="brewfile-">あらかじめ Brewfile を作っておく</h3>
<ul>
  <li>brew install rcmdnk/file/brew-file  </li>
  <li>この後使用するコマンドが依存している python ライブラリを入れる必要がある<br />
– sudo easy_install pip<br />
– pip install requests<br />
– brew file init vimtaku/Brewfile<br />
– あとは手順にしたがってすすめると push とかいろいろやってくれる  </li>
</ul>

<h2 id="section-2">手順</h2>

<h3 id="xcode-">xcode のインストール</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">xcode-select —install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="homebrew-">homebrew のインストール</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</span><span class="line">brew doctor</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="brewfile--1">Brewfile からインストール</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/vimtaku/Brewfile.git
</span><span class="line">cd Brewfile
</span><span class="line">brew file -f Brewfile install</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="homesick-">homesick のインストール</h3>
<p>ちょっと違うかも。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/usr/local/bin/zsh
</span><span class="line">gem install homesick
</span><span class="line">rbenv rehash
</span><span class="line">homesick clone vimtaku/dotfiles
</span><span class="line">homesick link</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
</feed>
