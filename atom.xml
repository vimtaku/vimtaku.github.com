<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2014-05-12T20:16:36+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[life_may_11]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/11/life-may-11/"/>
    <updated>2014-05-11T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/11/life-may-11</id>
    <content type="html"><![CDATA[<h2 id="section">週末振り返り</h2>
<p>築地の豊ちゃんっていう洋食屋でかつ丼を食べてきた。<br />
かなりうまかった。<br />
銀座の船見坂っていうラーメン屋のラーメンはかなりうまかった。  </p>

<p>プロセッサを支える技術の第2章まで読んだ。  </p>

<h3 id="section-1">2章までのキーワード</h3>
<ul>
  <li>メモリアドレス空間<br />
 – 64 ビットアーキテクチャとかは64ビットのアドレス空間に対応するために必要  </li>
  <li>RISC と CISC<br />
 – RISC(Reduced Instruction Set Computer) は固定長命令で、パイプライン制御をしやすくするために作られた<br />
 – CISC(Complex Instruction Set Computer) は可変長命令なので、パイプライン制御しにくかった  </li>
  <li>Out of Order と 分岐予測、投機実行<br />
 – プログラムの実行時に次の演算結果が依存しない時にその次の命令を先読み実行できる、これを Out of Order という。<br />
 – 分岐があるせいで演算の先読みが難しい<br />
 — 処理が多い方の条件分岐を先に実行しておく(分岐予測)<br />
 — Out of Order と 分岐予測を合わせた実行が投機実行  </li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界(2章まで)</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>アルゴリズムクイックリファレンス</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/11)入門コンピュータ科学</li>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_6]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/06/life-may-6/"/>
    <updated>2014-05-06T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/06/life-may-6</id>
    <content type="html"><![CDATA[<h2 id="gw-">GW 後半振り返り</h2>

<h3 id="macmlh-">macmlh について</h3>
<p>というか昨日だけど、 ずっとやってみたかった vim-mlh の mac IME 移植を試みた。<br />
が、結論から言うとそう簡単ではないことがわかった。  </p>

<p>基本的に、 mlh で必要なもの、 と言うか必要なパーツってのは、<br />
 - カーソルの移動<br />
 - 文字列の削除<br />
 - 選択候補の表示<br />
 などである。<br />
mac の Input Method Kit という cocoa アプリを作成するときに<br />
非常に便利なライブラリがあったが、 それがサポートしているのは<br />
クライアントとサーバ形式での変換のやり取りなので基本的には<br />
文字列の削除、 カーソルの移動などはできなかった。<br />
割とこれが致命傷で、 mlh の場合は, というよりも俺が考える mlh では、<br />
入力中に候補が出るたぐいのものではない。<br />
入力中に候補が出るようにするのは全然造作なく作れるんだけど、<br />
俺が考える、半角英数入力が終わったあとに / + <space> が入力されて初めて  
変換されるようなものにするにはできなかった。  </space></p>

<p>NSString に ^H(Ctrl+V,Ctrl+H) を送っても、 iTerm2 ではうまく動くけど、<br />
xcode とか firefox ではうまく動かなかったり..<br />
とにかく、 vimscript でかく上では上記に上げた必要なパーツは全て揃っていたが、<br />
Input Method Kit 及びそれを書く cocoa アプリ作成では見つけられなかった。  </p>

<p>ゴールデンウィークらしいモラトリアム期間の中でやってみたチャレンジだったが<br />
非常に残念な結果になったので、 また平常運転で本を消化していこうと思う。  </p>

<p>Input Method Kit に詳しい人いたら教えてほしいです。<br />
@vimtaku までぜひご一報ください。  </p>

<h3 id="section">本を買った</h3>
<ul>
  <li>アルゴリズムクイックリファレンス  </li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界  </li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h2 id="section-1">今日の目標</h2>
<ul>
  <li>詳解UNIXプログラミング(第3版) 4章 まで読む</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
  <li>アルゴリズムクイックリファレンス</li>
  <li>プロセッサを支える技術- 果てしなくスピードを追求する世界</li>
  <li>ハイパフォーマンスHTTP サーバ nginx 入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[時をかける少女の感想]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/04/tokikake/"/>
    <updated>2014-05-04T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/04/tokikake</id>
    <content type="html"><![CDATA[<h2 id="dvd-">時をかける少女の DVD をレンタルしてみた</h2>
<p>面白かった。<br />
いままでは、金曜ロードショーだけ見て楽しい映画だなぁと思っていたけど<br />
改めて DVD でみたらとても楽しめた。<br />
自分史上映画ランキングでもかなり上位だと思う。  </p>

<h2 id="section">最後のクライマックスシーンの解釈について</h2>
<p>「未来で待ってる」「すぐ行く、走って行く」の解釈は、<br />
いかにも映画らしく読者解釈に任せようというかんじだったけど、<br />
エンディング曲の歌詞から察すると、自分の解釈としては、  </p>

<p>もう逢えない関係性のなかでの、<br />
「いつまでも忘れない」と「わたしも」<br />
っていうやりとりなんだろう。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_may_5]]></title>
    <link href="http://vimtaku.github.io/blog/2014/05/04/life-may-5/"/>
    <updated>2014-05-04T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/05/04/life-may-5</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>仕事は相変わらず忙しいが一区切りつきそうである。  </p>

<h2 id="section-1">今日振り返り</h2>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">読んでる</h3>
<ul>
  <li>とある本8章まで読んだ</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>詳解UNIXプログラミング(第3版) 1章</li>
  <li>DDD ショートバージョン(P40まで</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/5/4)作って学ぶプログラミング言語(Ruby による Scheme の実装)読破</li>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_april_29]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/29/life-april-29/"/>
    <updated>2014-04-29T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/29/life-april-29</id>
    <content type="html"><![CDATA[<h2 id="section">週末振り返り</h2>

<p>本を読みまくれたのでよかった。<br />
 - rails tutorial 流し読み<br />
 – なんていうかやっぱりだいたいわかってた。<br />
 – ホントは Rspec の本とか読むともっと良いテストかけるようになっていいと思っている<br />
 - Webエンジニアのためのデータベース技術［実践］入門 7章を読み干す<br />
 – 昨日ブログ書いたとおり、読み終えた<br />
 - オペレーティングシステムを読み干す<br />
 – これはさくっと読み飛ばした。<br />
 - ネットワークはなぜつながるのか?<br />
 – 読みきった。面白かった。  </p>

<p>TOEIC を受けてこようと思う。2014年7月21日。また podcast から始めるか。  </p>

<h2 id="section-1">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-2">完成してないゲーム</h2>
<p>全く進んでない</p>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">読んでる</h3>
<ul>
  <li>とある本4章まで</li>
  <li>SICP-問題1.1.5 まで</li>
  <li>詳解UNIXプログラミング(第3版) 1章</li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>DDD ショートバージョン</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-6">買いたい</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/4/29)ネットワークはなぜつながるのか?</li>
  <li>(2014/4/29)オペレーティングシステム</li>
  <li>(2014/4/28)Webエンジニアのためのデータベース技術［実践］入門</li>
  <li>(2014/3/1)chef-solo 入門</li>
  <li>(2014/3/1)パーフェクトルビー</li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_april_28]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/28/life-april-28/"/>
    <updated>2014-04-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/28/life-april-28</id>
    <content type="html"><![CDATA[<h2 id="section">いろいろ振り返り</h2>
<p>すごく仕事が忙しかったのと、とある試験を受けるためにずっと勉強してて<br />
全然ブログを更新出来ていなかったが、両方そこそこに落ち着いてきたのでそろそろ<br />
また新しく書き始めることにする。  </p>

<h2 id="section-1">今日の目標</h2>
<ul>
  <li>
    <p>rails tutorial 終わらせる
 – これもうかけるし全然大丈夫じゃないかとは思っている
 – なのでさらっと読み飛ばす</p>
  </li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章を読み干す</li>
  <li>オペレーティングシステムを読み干す</li>
</ul>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない..</p>

<h2 id="section-4">勉強途中経過</h2>

<h3 id="section-5">進んでない</h3>

<h2 id="section-6">読書途中経過</h2>

<h3 id="section-7">進んだ</h3>
<ul>
  <li>ネットワークはなぜつながるのか?(3章)</li>
  <li>とある本4章まで読んだ</li>
  <li>SICP-問題1.1.5 まで終了</li>
</ul>

<h3 id="section-8">積んでる</h3>
<ul>
  <li>作って学ぶプログラミング言語(Ruby による Scheme の実装)</li>
  <li>DDD ショートバージョン</li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-9">諦めそう</h3>
<ul>
  <li>詳解UNIXプログラミング
 – 新盤が出たのでそちらを読み直していく</li>
</ul>

<h3 id="section-10">まだ積んでないけど読む</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-11">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web エンジニアのためのデータベース技術入門をざっくり読んだ]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/28/book-webengineer-database/"/>
    <updated>2014-04-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/28/book-webengineer-database</id>
    <content type="html"><![CDATA[<h2 id="web-">web エンジニアのためのデータベース技術入門をざっくり読んだ</h2>

<p><a href="http://hamasyou.com/blog/2012/05/09/4774150207/">この人の感想ブログがいい感じ</a>。<br />
なので、自分で気になったあたりを調べたところとかを、以下にメモしていく。  </p>

<h3 id="sharding-">Sharding と更新性能</h3>
<p>RAID を組んだ マスタの場合、冗長性だけでなく並列性においても有利である。<br />
MySQLではマスタはマルチスレッドで動作するが、<br />
スレーブはシングルスレッドで動いているから、スレーブのほうが負荷がかかりやすく、<br />
さらに raid のせいで I/O での差が発生する。<br />
なので、スレーブだけ SSD とか、SSD のなかでもさらに高性能な PCI-express SSD を使うと余裕になるっていう話。  </p>

<h3 id="hash-join-">Hash JOIN について</h3>
<p>MySQL では join とかするときは、残念なことに MySQL5.6 でも Nested Loop に変換されてしまう。<br />
MariaDB とか PostgreSQL とかでは Hash Join が実装されているようだ。<br />
Hash JOIN のほうがすごく早い場合がある、が、単純に Hash Join のほうが早いというわけではない。<br />
 <a href="http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/">mysql performance blog</a>の結論部をたいして無い英語力で翻訳してみると、  </p>

<blockquote><p>Based on the above information and the benchmark results for different test cases, we can see where Hash Joins work best and where they don’t. First of all Hash joins only work for equijoins. Hash join work best when you are joining very big tables with no WHERE clause, or a WHERE clause on a non-indexed column. They also provide big improvement in query response time when you are joining tables with no indexes on the join condition (Full Join). The best performance with Hash Join can be achieved when the left table can fit completely in the join buffer, or when the least amount of buffer refills are needed, as each buffer refill means a scan of the right-side table. However, Hash joins do not outperform BNL or BKA when you are joining a really small subset of rows, as then scanning the right-side table becomes costly in comparison. Block Nested Loop Join would perform better than Hash Join when you are joining two tables on a PK column such that both tables are read in PK order. One use case that I can think of for hash joins is data warehouse applications that need to run reporting queries that need to join on lookup tables which tend to be small mostly. What use cases can you think of</p></blockquote>

<blockquote><p>まず Hash join は inner join じゃなきゃそもそもうごかない。  <br />Hash join は where 句なしの大きいテーブルか、  <br />where 使っているけど インデックスはられていないカラムの条件指定の時に効果を発揮するよ。  <br />もしくは、index がはられていない列同士の結合とかにもだいぶ効果発揮するよ。  <br />ベストパフォーマンス発揮するタイミングは、左のテーブルがジョインバッファに全部収まる  <br />(最低限再度バッファに入れる時に入るサイズ)ときだ。  <br />それは右のテーブルを読みきった時にまたジョインバッファ更新するから。  <br />すげぇ小さいテーブルとか、右のテーブルに const 検索条件が使われている時とかは BNL とか BKA とかのほうがいい感じだぜ。  <br />BNL は PK での 検索条件とか、 PK での sort order 使ってるときに Hash join よりいいぜ。  <br />まぁ、一つ思いつくのは data ware hause Application とかでレポートする処理とか書く時にかなり早くなりそうだよね。  <br />あとなんかある？</p></blockquote>

<p>って感じだ。<br />
なるほど、そう考えると格段と良くなるとは言えないが、場合によっては相当効力がありそうだ。<br />
しかもグラフを見ると、なるほど、たしかに、そうとうパフォーマンスが上がっている場所がある。<br />
というか mysql 5.5 と 5.6 の差が違いすぎてウケる。  </p>

<h4 id="section">参考:</h4>
<p><a href="http://d.hatena.ne.jp/interdb/20131020/1382280437">http://d.hatena.ne.jp/interdb/20131020/1382280437</a><br />
<a href="http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/">http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/</a>  </p>

<h3 id="section-1">スレッドプールについて</h3>
<p>MariaDB だとスレッドプールが使用できるが、MySQL 5.6 ではその機能はない。<br />
エンタープライズ版とかだと用意されているらしい。 ちなみに MySQL6 とかで実装されるらしい。  </p>

<h3 id="mysql-">MySQL チューニングについて</h3>
<p>これらの記事がおそらくとても参考になるので、本番運用前にチェックしてみるとよいかも。<br />
<a href="http://yakst.com/ja/posts/200">http://yakst.com/ja/posts/200</a><br />
<a href="http://nippondanji.blogspot.jp/2009/03/mysql7.html">http://nippondanji.blogspot.jp/2009/03/mysql7.html</a><br />
<a href="http://dsas.blog.klab.org/archives/50860867.html">http://dsas.blog.klab.org/archives/50860867.html</a><br />
<a href="http://www.slideshare.net/kenmasu/ss-12604339">http://www.slideshare.net/kenmasu/ss-12604339</a>  </p>

<p>以下メモ<br />
show engine innodb status;<br />
で ロックが発生していないか見る。  </p>

<p>これで遅いトランザクションの洗い出しが可能。<br />
https://github.com/yoshinorim/MySlowTranCapture  </p>

<p>この辺は見直すとよいかも。</p>
<div>
  <pre><code class="sql">mysql&gt; show global variables like '%innodb_lock_wait_timeout%';</code></pre>
</div>

<h3 id="rds-">RDS におけるリストアについて</h3>
<p>オンプレミスな DB のリストアなら、<br />
ある地点のスナップショットのリストア + バイナリログをロールフォワードだと思うけど<br />
RDS ならどうするんだろうと思ってちょっと調べたけど、最初から MultiAZ にしておけば<br />
自動フェイルオーバーしてくれる模様。<br />
しかし3-5分くらいかかる模様なので、その間システムが落ちるのかと思うと結構しんどい。<br />
<a href="http://ijin.github.io/blog/2013/05/21/custom-non-rds-multi-az-mysql-replication/">手動でフェイルオーバー</a>
とかもあってこっちは復旧はすごく早いけどこれも結構デメリットはあるみたい。<br />
何を取るかだとは思うけど(おそらく組織レベルでサービスの停止が許せるかどうか)、<br />
メンテの楽さを考えると RDS 任せのほうが楽な気はする。  </p>

<h3 id="section-2">所感</h3>
<p>この本に関しては、業務でやっている、やっていたことが結構書かれていた。<br />
無意識レベルでやっていたことが結構書かれていたのでそういうところは飛ばして読んだ。<br />
でも、mysql のチューニングのあたりなどはあまりやったことがない経験だった。
前職では運用チームの人たちがいたのでその人達で閉じていた知識だと思うので、<br />
今の職場で活かせるようにチューニングしたいと思った。  </p>

<p>Wikipedia や Google は MariaDB を採用しているらしい。<br />
まだ枯れているという印象は全然ないけど、実際に使われていることや、ほぼ MySQL だったりするところ、<br />
スレッドプールが使えるあたりはかなり変わってきそう。<br />
hash join も使えるので、オプティマイザが賢ければかなりその恩恵受けられそう。<br />
<a href="http://d.hatena.ne.jp/interdb/20131020/1382280437">オプティマイザ比較しているブログ</a>
見る限り、実は postgresql が頑張っている。<br />
postgresql は前前職で使っていたが vacuum の印象が強くてあんまりいいイメージはない。<br />
今度自分のプロダクトを作るときには MariaDB を使ってみようと思う。  </p>

<h3 id="section-3">参考</h3>
<ul>
  <li><a href="http://dba.stackexchange.com/questions/43439/is-there-any-way-to-force-mysql-use-hash-join-instead-of-nested-loop-join">http://dba.stackexchange.com/questions/43439/is-there-any-way-to-force-mysql-use-hash-join-instead-of-nested-loop-join</a></li>
  <li><a href="http://nippondanji.blogspot.jp/2009/03/mysql7.html">http://nippondanji.blogspot.jp/2009/03/mysql7.html</a>  </li>
  <li>[http://www.atmarkit.co.jp/ait/articles/0503/24/news107<em>2.html](http://www.atmarkit.co.jp/ait/articles/0503/24/news107</em>2.html)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jbuilder のフラグメントキャッシュで、配列で書きたい場合とハッシュで書きたい場合のキャッシュを共通化したい]]></title>
    <link href="http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips/"/>
    <updated>2014-04-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/04/10/jbuilder-tips</id>
    <content type="html"><![CDATA[<h2 id="section">結論</h2>
<p>views/book/_book.jbuilder  </p>
<div>
  <pre><code class="ruby">json.cache! book do
  _j = book.to_builder.target!
    JSON.parse(_j).each do |k,v|
        json.set! k, v
    end
end</code></pre>
</div>

<p>controller で @tmpl[:book] が set されていると仮定<br />
views/book/show.jbuilder  </p>
<div>
  <pre><code class="ruby">json.book do
  json.partial! 'book/book', book: @tmpl[:book]
end</code></pre>
</div>

<p>controller で @tmpl[:books] が set されていると仮定<br />
views/book/list.jbuilder  </p>
<div>
  <pre><code class="ruby">json.books @tmpl[:books], partial:'book/book', as: :book</code></pre>
</div>

<h2 id="section-1">背景</h2>
<p>単体表示に  </p>
<div>
  <pre><code class="ruby">{
    book: {
        bookId: &quot;moge&quot;
    }
}</code></pre>
</div>

<p>複数表示に  </p>
<div>
  <pre><code class="ruby">{
    books:[
    {
      bookId: &quot;moge&quot;
    },
    {
      bookId: &quot;moge2&quot;
    }
    ]
}</code></pre>
</div>

<p>としたいみたいなやつがググっても全然出てこなかったので。</p>

<h2 id="section-2">所感</h2>
<p>まぁこうは普通しないわなぁ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jbuilder で 共通パラメータを付与したい時は layout を使うといいかも]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout/"/>
    <updated>2014-03-28T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/28/jbuilder-layout</id>
    <content type="html"><![CDATA[<h2 id="section">前提</h2>
<ul>
  <li>rails4</li>
  <li>jbuilder(1.5.3)</li>
</ul>

<h2 id="section-1">背景</h2>
<p>jbuilder を使うと、 api のレスポンスをシンプルに定義できる。<br />
例えば、hoge_controller.rb#new の場合に<br />
app/views/hoge/new.jbuilder とかを用意しておいて、<br />
そこに template で返したい値などを書いて定義できる。<br />
しかし、共通で値を返したい場合どうするんだってことになって<br />
いろいろ考えた結果以下に落ち着いた。  </p>

<h2 id="section-2">解法</h2>
<p>layout を使う。  </p>

<p>controller にたとえば<br />
layout ‘api/application.jbuilder’ 
などと定義しておく。  </p>

<p>それで上記の例で言うと、 hoge_controller.rb#new では<br />
app/views/hoge/new.jbuilder が呼ばれるので、  </p>

<p>app/views/hoge/new.jbuilder</p>
<div>
  <pre><code class="ruby">json.from_hoge &quot;from_hoge_param&quot;</code></pre>
</div>

<p>layouts/api/application.jbuilder  </p>
<div>
  <pre><code class="ruby"># common に値を付与
json.common &quot;common_param_is_here&quot;
# controller の @hoge を参照できる
json.hoge @hoge
# template の値を付与
JSON.parse(yield).each do |k,v|
  json.set! k, v
end</code></pre>
</div>

<p>とかしておくと良いのかもしれない。<br />
結果は
{common:”common_param_is_here”, fromHoge:”from_hoge_param”, hoge:”hoge_from_controller”}
てな感じになる。  </p>

<p>ちなみに camelCase には公式の通り、 Jbuilder.key_format camelize: :lower でできる。</p>

<p>上記は、まだ実践してないけど手元で試してみた見たかんじこれで行けそう。  </p>

<h2 id="section-3">所感</h2>
<p>もっといい方法あれば教えて下さい。  </p>

<h2 id="section-4">蛇足</h2>
<p>stack over flow とかで書いてある render! を定義する方法や<br />
json.render JSON.parse(yield)  だとうまく行かなかった。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[life_march_23]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/23/life-march-23/"/>
    <updated>2014-03-23T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/23/life-march-23</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>引き続き、ものすごく仕事が忙しくてやばかった。<br />
でも進んできた感があるので、この調子でがんばろう。<br />
(先週と同じ</p>

<h2 id="section-1">週末振り返り</h2>
<p>3連休だった。<br />
その割に大したことはしなかった。<br />
自由が丘でうさぎカフェに行って初めてうさぎとすごく触れ合った。<br />
うさぎはすごく現金なやつで、餌をあげるときしかきてくれなかった。 
いつか猫カフェに行きたい。  </p>

<h2 id="section-2">偉大な目標</h2>
<p>全く進んでない</p>

<h2 id="section-3">完成してないゲーム</h2>
<p>全く進んでない..</p>

<h2 id="section-4">勉強途中経過</h2>

<h3 id="section-5">進んでない</h3>
<ul>
  <li>rails tutorial 6 まで</li>
</ul>

<h2 id="section-6">読書途中経過</h2>

<h3 id="section-7">進んだ</h3>
<ul>
  <li>ネットワークはなぜつながるのか?(2章)</li>
  <li>とある本2章まで読んだ</li>
</ul>

<h3 id="section-8">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>DDD ショートバージョン</li>
  <li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">http://www.infoq.com/jp/minibooks/domain-driven-design-quickly</a></li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-9">まだ積んでないけど読む</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-10">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memo_before_migrate]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/17/memo-before-migrate/"/>
    <updated>2014-03-17T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/17/memo-before-migrate</id>
    <content type="html"><![CDATA[<h2 id="memo">memo</h2>
<p>before_migrate は、migrate しようがしまいが呼ばれる。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3月ももう半ば]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/16/life-march-16/"/>
    <updated>2014-03-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/16/life-march-16</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>引き続き、ものすごく仕事が忙しくてやばかった。<br />
でも進んできた感があるので、この調子でがんばろう。  </p>

<h2 id="section-1">不摂生</h2>
<p>不摂生がたたってついに体に異常をきたし始めたのでそろそろ<br />
控えようと思う。  </p>

<h2 id="section-2">週末振り返り</h2>

<h3 id="section-3">プチ旅行</h3>
<p>三浦半島の先にある三浦海岸というところで河津桜の祭りがあるとのことで<br />
春を先取りしてきた。<br />
おどろくべきことに、すでに桜は散り始めていて、ピークは2週間前くらいのように感じた。<br />
もちろん桜だけではもったいないので、三崎口というつぎの駅辺りでよくとれるらしい  </p>

<p><a href="http://tabelog.com/kanagawa/A1406/A140603/14002818/">紀川さんで</a> マグロを寿司でいただいてきた。<br />
そこで頼んだ特上ずしは、すごく美味しかった。<br />
トロがうますぎて別でさらに注文してしまった。<br />
そして、梅酒がとても美味しかった。ある種、梅酒目当てでも寄れるくらいおいしかった。  </p>

<h3 id="section-4">クライアント認証について再び勉強</h3>
<p>あとで書くけど、クライアント認証やサーバのオレオレ認証局などについて再勉強した。<br />
すごく理解が深まった感がある。  </p>

<h2 id="section-5">来週は</h2>
<p>4日しかないし、不摂生しないように頑張る。  </p>

<h2 id="section-6">勉強途中経過</h2>

<h3 id="section-7">進んでない</h3>
<ul>
  <li>rails tutorial 6 まで</li>
</ul>

<h2 id="section-8">読書途中経過</h2>

<h3 id="section-9">進んだ</h3>
<ul>
  <li>ネットワークはなぜつながるのか?(2章)</li>
</ul>

<h3 id="section-10">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>DDD ショートバージョン</li>
  <li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">http://www.infoq.com/jp/minibooks/domain-driven-design-quickly</a></li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-11">まだ積んでないけど読む</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-12">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クライアント認証をもう一度やる@nginx]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/16/apache-nginx-client-certificate/"/>
    <updated>2014-03-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/16/apache-nginx-client-certificate</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">概要</a></li>
  <li><a href="#section-1">やったこと</a>    <ul>
      <li><a href="#section-2">補足</a>        <ul>
          <li><a href="#config-">config による直接的な制限</a></li>
          <li><a href="#revoke-">revoke による証明書の失効</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#nginx-ssl-">nginx による、SSL 設定とクライアント認証</a>    <ul>
      <li><a href="#section-3">ちなみに</a></li>
    </ul>
  </li>
  <li><a href="#section-4">所感</a></li>
</ul>

<h2 id="section">概要</h2>
<p>前回は、資料のようにやればできるって感じだったけど、<br />
理解して一つづつもう一度やってみたかったのでもう一度やってみた。  </p>

<h2 id="section-1">やったこと</h2>
<p>基本的には以下のサイトにしたがってすすめた。<br />
<a href="http://server-setting.info/centos/private-ca-cert.html">こちらのサイト</a><br />
基本的に前回の記事では、CA(.sh) という、<br />
openssl の ca を扱うのに便利な付属スクリプトは使っていなかったんだけど、<br />
今回のは CA(.sh) を使ってすすめた。<br />
というか、ほとんどやったことは上記のサイト通りなので、上記のサイト通りやると良いとおもう。<br />
解説もものすごく丁寧にされているので。<br />
なので、自分がやったことの補足だけ書いていく。  </p>

<h3 id="section-2">補足</h3>

<h4 id="config-">config による直接的な制限</h4>
<p>まず、背景として、vimtaku, hogetaku というユーザにそれぞれクライアント認証したい。<br />
それで、それぞれのクライアントの鍵はサーバで作成する。  </p>

<p>なので、サーバ側で  </p>

<ul>
  <li>クライアント用(vimtaku,hogetaku二人別々)の公開鍵と秘密鍵を作り、  </li>
  <li>csr をだし、</li>
  <li>それを ca が 署名して、</li>
  <li>pfx に変換して</li>
</ul>

<p>最終的に、配りたい対象ユーザのブラウザに渡すかんじになった。</p>

<p>client認証はしていて、さらに config レベルで、アクセスを制限したい場合には、
ssl.conf に</p>
<div>
  <pre><code class="apache">&lt;Location /&gt;
SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
            and ( \
                  %{SSL_CLIENT_S_DN_CN} eq &quot;vimtaku&quot; \
                  or %{SSL_CLIENT_S_DN_CN} eq &quot;hogetaku&quot; \
                ) \
            )
&lt;/Location&gt;</code></pre>
</div>

<p>などと書けば設定できる。  </p>

<p>他にも条件は書けそうなので、パラメータに関しては<a href="http://httpd.apache.org/docs/2.4/mod/mod_ssl.html">こちらを参考</a>に。  </p>

<p>デバッグとしては</p>
<div>
  <pre><code class="apache">CustomLog logs/ssl_request_log \
  &quot;%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x %{SSL_CLIENT_S_DN_O}x %{SSL_CLIENT_S_DN_CN}x %{SSL_CLIENT_S_DN}x \&quot;%r\&quot; %b&quot;</code></pre>
</div>

<p>としてログだすとよいかもしれない。</p>

<h4 id="revoke-">revoke による証明書の失効</h4>
<p>config ではなく、 revoke で、たとえば hogetaku が会社辞めたとかで配った証明書を失効させる方法として、  </p>

<div>
  <pre><code class="bash">cd /etc/pki/CA
cp serial crlnumber
openssl ca -gencrl -revoke  /etc/pki/CA/certs/hogetaku.ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.crt -config /etc/pki/tls/openssl-client.cnf
cd /etc/pki/CA/crt/
openssl ca -gencrl -out crl.pem</code></pre>
</div>

<p>として、</p>

<p>そして<br />
/etc/httpd/conf.d/ssl.conf に、</p>
<div>
  <pre><code class="apache">SLCACertificateFile /etc/pki/CA/cacert.pem</code></pre>
</div>

<p>の下くらいに  </p>
<div>
  <pre><code class="apache">SSLCARevocationCheck chain
SSLCARevocationFile /etc/pki/CA/crl/crl.pem</code></pre>
</div>

<p>を追加した。  </p>

<p>それで、サーバを再起動すれば、revoke した証明書を持つクライアントはアクセスできなくなる(400)。</p>

<p>ちなみに revoke は
/etc/pki/CA/newcerts/内のファイル か /etc/pki/CA/newcerts/certs 内のファイルのどちらでもよさそう。  </p>

<h2 id="nginx-ssl-">nginx による、SSL 設定とクライアント認証</h2>
<p>はっきり言ってなんの問題もない</p>

<div>
  <pre><code class="bash">sudo yum -y install nginx</code></pre>
</div>

<p>/etc/nginx/conf を編集。  </p>

<div>
  <pre><code class="nginx">server {
        listen       443;
        server_name  localhost;

        ssl                  on;
        ssl_certificate      /etc/pki/CA/certs/ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.crt.pem;
        ssl_certificate_key  /etc/pki/CA/private/ec2-xxxxxxxxxxxxx.ap-northeast-1.compute.amazonaws.com.key;
        ssl_verify_client on;
        ssl_client_certificate /etc/pki/CA/cacert.pem;
        ssl_crl /etc/pki/CA/crl/crl.pem;

        ssl_session_timeout  5m;

        ssl_protocols  SSLv2 SSLv3 TLSv1; 
        ssl_ciphers  HIGH:!aNULL:!MD5; 
        ssl_prefer_server_ciphers   on;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }</code></pre>
</div>

<p>大体、 apache と同じような設定を行えば使用できる。  </p>

<h3 id="section-3">ちなみに</h3>
<p>revoke したのをやっぱ辞めたいって場合は<br />
/etc/pki/CA/index.txt の<br />
R の行の R を V にして、 その次の次のカラムの 時間を 消してから、<br />
openssl ca -gencrl -out crl.pem<br />
してやればよい。  </p>

<h2 id="section-4">所感</h2>
<p>複雑だけど、さすがに2週連続で日曜日使えばだいたいわかる。<br />
でももっと奥深く知るにはちゃんと本を読むべきだと思う。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby の WEBRick のワンライナーでサーバが立つかすぐ確認する]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/10/ruby-webrick-onewriner/"/>
    <updated>2014-03-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/10/ruby-webrick-onewriner</id>
    <content type="html"><![CDATA[<h2 id="section">ワンライナー</h2>
<div>
  <pre><code class="ruby">ruby -e &quot;require 'webrick'; server = WEBrick::HTTPServer.new( {:BindAddress =&gt; '0.0.0.0', :Port =&gt; 80}); trap(:INT){server.shutdown}; server.start;&quot;</code></pre>
</div>

<h2 id="section-1">普通の方</h2>
<div>
  <pre><code class="ruby">require 'webrick'
server = WEBrick::HTTPServer.new({:BindAddress =&gt; '0.0.0.0', :Port =&gt; 80})
trap(:INT){server.shutdown}
server.start</code></pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3月2週目]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/10/life-march-9/"/>
    <updated>2014-03-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/10/life-march-9</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>ものすごく仕事が忙しくてやばかった。<br />
rails に慣れてきた感は出てきたが、まだまだ大変だ。  </p>

<p>病院行きたいけど忙しいからなかなか行けないんだよなぁ。  </p>

<h2 id="section-1">週末振り返り</h2>
<p>vimplugin 書いたし、ちょっと今後やりそうなことの技術調査ができたし、<br />
気になっていたこともわかってよかった。  </p>

<h2 id="section-2">困っていること</h2>
<p>くっそ忙しくてちょっと余裕がない。<br />
まぁでもいまはちょっとやるしかないのでがんばる。  </p>

<h2 id="gem">最近の gem</h2>
<p>gem ‘default_value_for’
これデフォルト値いい感じに埋めれてなんか便利だった</p>

<h2 id="section-3">勉強途中経過</h2>

<h3 id="section-4">進んでない</h3>
<ul>
  <li>rails tutorial 6 まで</li>
</ul>

<h2 id="section-5">読書途中経過</h2>

<h3 id="section-6">進んだ</h3>
<ul>
  <li>ネットワークはなぜつながるのか?(1章)</li>
</ul>

<h3 id="section-7">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>DDD ショートバージョン</li>
  <li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">http://www.infoq.com/jp/minibooks/domain-driven-design-quickly</a></li>
  <li>ミクシィ公認 スマホアプリ開発実践ガイド［iOS/Android両対応］ [Kindle版]</li>
  <li>論語入門</li>
</ul>

<h3 id="section-8">まだ積んでないけど読む</h3>
<ul>
  <li>nginxの本</li>
</ul>

<h3 id="section-9">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Linux に phpmyadmin を入れてクライアント認証する]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/10/amazon-linux-phpmysqladmin-clientauth/"/>
    <updated>2014-03-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/10/amazon-linux-phpmysqladmin-clientauth</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">概要</a></li>
  <li><a href="#section-1">下準備</a></li>
  <li><a href="#db-">DB の設定をあれこれする</a></li>
  <li><a href="#phpmyadmin--">phpmyadmin のアクセス制限,今回は クライアント認証する前提なので全開放</a></li>
  <li><a href="#section-2">クライアント認証</a>    <ul>
      <li><a href="#p12-">p12 のインストールについて</a></li>
    </ul>
  </li>
  <li><a href="#section-3">参考文献</a></li>
</ul>

<h2 id="section">概要</h2>
<p>amazon linux で phpmyadmin(httpd) を入れてクライアント認証するパターンになったのでやってみた。  </p>

<h2 id="section-1">下準備</h2>

<div>
  <pre><code class="bash">## apache と phpmyadmin が入る
sudo yum --enablerepo=epel install phpmyadmin
## mod_ssl
sudo yum install mod24_ssl
sudo yum install openssl-devel</code></pre>
</div>

<h2 id="db-">DB の設定をあれこれする</h2>
<div>
  <pre><code class="bash">sudo vim /etc/phpMyAdmin/config.inc.php</code></pre>
</div>

<h2 id="phpmyadmin--">phpmyadmin のアクセス制限,今回は クライアント認証する前提なので全開放</h2>
<div>
  <pre><code class="bash">sudo vim /etc/httpd/conf.d/phpMyAdmin.conf</code></pre>
</div>

<p>とりあえず全開放</p>
<div>
  <pre><code class="bash">## L16 あたりに
Require all granted
## L26 あたりに
Allow from 0.0.0.0</code></pre>
</div>

<div>
  <pre><code class="bash">/etc/httpd/conf.d/virtualhost.conf</code></pre>
</div>

<div>
  <pre><code class="apache">&lt;Directory &quot;/phpmyadmin&quot;&gt;
    Options ExecCGI
    AllowOverride all
    Order Allow,Deny
    Allow from all
    RewriteEngine On
    RewriteCond %{SERVER_PORT} 80
    RewriteRule ^(.*)$ https://%{HTTP_HOST}/%{REQUEST_URI} [R,L]
    LogLevel alert rewrite:trace3
&lt;/Directory&gt;</code></pre>
</div>

<h2 id="section-2">クライアント認証</h2>
<p>については
<a href="https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">この資料</a>
がものっすごい参考になる。<br />
というかこのままやれば良い。  </p>

<h3 id="p12-">p12 のインストールについて</h3>
<p>Google Chrome  はキーチェーンに入れたら行けた。<br />
Vimperator(Firefox) についてはブラウザに pom.p12 を入れたら行けた。  </p>

<h2 id="section-3">参考文献</h2>
<p>phpmyadmin についてはこれが非常に役に立つ。<br />
<a href="http://sanketdangi.com/post/56623052533/phpmyadmin-on-amazon-ec2-manage-amazon-rds">http://sanketdangi.com/post/56623052533/phpmyadmin-on-amazon-ec2-manage-amazon-rds</a><br />
クライアント認証に関しては<br />
<a href="https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">https://github.com/mechamogera/MyTips/wiki/Apache%E3%81%A7%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%AA%8D%E8%A8%BC%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim-operator-mdurl という vim plugin 書いた]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/08/vim-operator-mdurl/"/>
    <updated>2014-03-08T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/08/vim-operator-mdurl</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>
<p>この記事は <a href="http://atnd.org/events/45072">Vim Advent Calender 2013</a> の 98 日目 の記事になります。</p>

<h2 id="section-1">背景</h2>
<p>Vimmer のみなさんが blog を書くなら普通に vim で markdown を書いていることと思います。<br />
例に違わず僕も markdown で blog を書いているんですが、非常に不満に思っていたことがありました。<br />
それは url を書くときそれを[]() で囲わなきゃならなかったことです。<br />
まぁ書き慣れりゃ楽なんですけど最初は()[] なのか []() なのかわからなくて逆になって辛いみたいな<br />
ことが起こっていました。<br />
http://example.com みたいな url があった時に,<br />
簡単に <a href="http://example.com">http://example.com</a> とできるような plugin が欲しかったのです。<br />
正直言うと幾つか方法があって, 保存時に変換とかもやりようによっちゃあるんですが<br />
僕はおせっかいが嫌なので自分で変換できる operator が欲しかったのです。  </p>

<h2 id="section-2">概要</h2>
<p>http://example.com という文字列を  </p>
<div>
  <pre><code class="vim">[http://example.com](http://example.com)</code></pre>
</div>

<p>と簡単に変換できる operator plugin を書きました。<br />
また, blog を書くときに参考資料とかに url を memo で書いていて,<br />
それを</p>
<div>
  <pre><code class="vim">[ここのリンク](http://example.com)</code></pre>
</div>

<p>みたいなふうに<br />
作りたいというのがよくあったので, yank している url を 文字列にリンク展開できるようにもしました。  </p>

<h2 id="section-3">成果物</h2>
<p><a href="https://github.com/vimtaku/vim-operator-mdurl">https://github.com/vimtaku/vim-operator-mdurl</a>  </p>

<h3 id="section-4">使用方法</h3>

<h4 id="option-vim-textobj-url-">0. (option) vim-textobj-url をインストール</h4>
<p>なくてもいいんだけど、あったら多分便利だと思います。</p>
<div>
  <pre><code class="vim">NeoBundle 'mattn/vim-textobj-url'</code></pre>
</div>

<h4 id="vim-operator-mdurl--">1. vim-operator-mdurl を インストール</h4>
<p>.vimrc に  </p>
<div>
  <pre><code class="vim">NeoBundle 'vimtaku/vim-operator-mdurl'</code></pre>
</div>

<h4 id="vimrc--map-">2. .vimrc に map を書く</h4>
<p>設定例)  </p>
<div>
  <pre><code class="vim">map L &lt;Plug&gt;(operator-mdurl)
map M &lt;Plug&gt;(operator-mdurlp)</code></pre>
</div>

<h4 id="section-5">3. 使う</h4>
<p>http://example.com とかの文字列の何処かで LiW とかするとできます。<br />
http://example.com を yank しておいて hoge とかの文字列上で Miw とかすると、<br />
<a href="http://example.com">hoge</a> になります。  </p>

<p>0 の手順で url のテキストオブジェクトプラグインを入れておいたら LiW とかの W の部分が<br />
デフォルトでは u で統一できて楽。  </p>

<h3 id="text-obj-user--vimrc-">直接関係ないけど、text-obj-user の .vimrc の設定について</h3>

<p>vim-textobj-user では map を変えられます。<br />
textobj-wiw ですでに u は使っていたので<br />
text-obj-url のデフォルトの u(i|a) とかぶると嫌なので以下の様に書きました。  </p>

<div>
  <pre><code class="vim">xmap ah  &lt;Plug&gt;(textobj-url-a)
omap ah  &lt;Plug&gt;(textobj-url-a)
xmap ih  &lt;Plug&gt;(textobj-url-i)
omap ih  &lt;Plug&gt;(textobj-url-i)

xmap au  &lt;Plug&gt;(textobj-wiw-a)
omap au  &lt;Plug&gt;(textobj-wiw-a)
xmap iu  &lt;Plug&gt;(textobj-wiw-i)
omap iu  &lt;Plug&gt;(textobj-wiw-i)</code></pre>
</div>

<h2 id="section-6">所感</h2>
<p>最近は vim に注力出来ていなかったけど、ずっと書きたかった plugin がかけて良かったです。<br />
もし良かったら使ってみてください。<br />
<a href="http://atnd.org/events/45072">VAC 2013</a> にも参加できてとりあえず良かったです。<br />
バグはちょろちょろ直していきます。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise に入門してみる]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/z_devise1/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/z_devise1</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p><a href="http://vimtaku.github.io/blog/2014/03/02/warden/">devise を知るには warden を知るべしと思ったので warden を勉強した。</a><br />
大体 warden はわかったので warden の仕組みをかぶせた認証エンジンである<br />
<a href="https://github.com/plataformatec/devise">devise</a> を触ってみる。  </p>

<h2 id="section-1">では早速、以下メモ。</h2>

<div>
  <pre><code class="bash">/Users/mac/try_devise/try_devise% be rails g devise:install
      create  config/initializers/devise.rb
      create  config/locales/devise.en.yml
===============================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root :to =&gt; &quot;home#index&quot;

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       &lt;p class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;
       &lt;p class=&quot;alert&quot;&gt;&lt;%= alert %&gt;&lt;/p&gt;

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

===============================================================================</code></pre>
</div>

<p>bundle exec rails g devise User<br />
予めcreate database しておく<br />
bundle exec rake db:migrate  </p>

<p>すると出来上がる。</p>
<div>
  <pre><code class="sql">CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL DEFAULT '',
  `encrypted_password` varchar(255) NOT NULL DEFAULT '',
  `reset_password_token` varchar(255) DEFAULT NULL,
  `reset_password_sent_at` datetime DEFAULT NULL,
  `remember_created_at` datetime DEFAULT NULL,
  `sign_in_count` int(11) NOT NULL DEFAULT '0',
  `current_sign_in_at` datetime DEFAULT NULL,
  `last_sign_in_at` datetime DEFAULT NULL,
  `current_sign_in_ip` varchar(255) DEFAULT NULL,
  `last_sign_in_ip` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_users_on_email` (`email`),
  UNIQUE KEY `index_users_on_reset_password_token` (`reset_password_token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</code></pre>
</div>

<p>config/routes.rb に行が追加されている。  </p>
<blockquote><p>devise_for :users</p></blockquote>

<p>localhost:3000 にアクセスすると<br />
<img src="http://gyazo.com/ff5a659072c28ff0934f6ec51ca74dc3.png" /><br />
/users/にものすごくたくさんいろいろできている。  </p>

<p>login した後の、 users/edit とか<br />
<img src="http://gyazo.com/27ca0f5038500c7796c51c81973755a9.png" />  </p>

<h2 id="view-">独自の view を使うには</h2>

<p>独自の view を使うには、<br />
scope (admin モデルと user モデルがいる場合に使用)のロジックを使う方法と、<br />
view を単純に上書きする方法がある。<br />
当然、用途に応じて admin と user のモデルを使うんなら scope を使えば良い。<br />
単純にひとつだけなら、 view を上書きする方法が良い。  </p>

<p>view を上書きする方法では、<br />
be rails generate devise:views して、<br />
devise/sessions/new.html.erb<br />
を編集などすれば良い。  </p>

<p>scope を使う方法では、<br />
config/initializers/devise.rb に<br />
config.scoped_views = true<br />
を追加して、<br />
be rails generate devise:views users<br />
すれば、<br />
users/sessions/new.html.erb<br />
などが使われるようになる。  </p>

<h2 id="section-2">所感</h2>
<p>全然入門できてない。続きはまた書く。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise を知るにはまず warden を知るが良い]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/warden/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/warden</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>devise という gem があるが、warden をベースにした認証の仕組みだということだった。<br />
devise を知るには、まず warden を知らなければなるまい。<br />
そう思った俺は warnden を rack ベースでいじってみることにした。  </p>

<h2 id="warden-">warden とは</h2>

<p>これのこと。<br />
<a href="https://github.com/hassox/warden">https://github.com/hassox/warden</a><br />
wiki が充実していたのでかなりわかりやすかった。<br />
<a href="https://github.com/hassox/warden/wiki">https://github.com/hassox/warden/wiki</a>  </p>

<h2 id="section-1">とりあえずやってみる、以下メモ書き。</h2>

<p>config.rb</p>
<div>
  <pre><code class="ruby">require 'rack'
require 'pp'
require 'warden'

class Application

  def call(env)
    request = Rack::Request.new(env)
    response = if request.path_info = '/'
                 body = &quot;#{request.request_method}: Hello! #{request.params['name']}!&quot;
                 Rack::Response.new(body, &quot;200&quot;, {'Content-Type' =&gt; 'text/plain'})
               else
                 Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
               end
    response.finish
  end

end


app = Rack::Builder.new do
  use Rack::Session::Cookie, :secret =&gt; &quot;replace this with some secret key&quot;

  use Warden::Manager do |manager|
    manager.default_strategies :password, :basic
    #manager.failure_app = BadAuthenticationEndsUpHere
  end

  run lambda { |env| Application.new().call(env) }
end

run app</code></pre>
</div>

<p>基本的に, default_strategies で定義した順に行われて、一つでも成功したら成功になる模様。  </p>

<p>cookie セットされている<br />
<img src="http://gyazo.com/be238cfa0282a588b1fad41ae91dd804.png" />
<img src="http://gyazo.com/95a09e0d872829e8e0fef2204728cdaa.png" /></p>

<p>試しに nil を返した時。<br />
<img src="http://gyazo.com/de50e8c049809e31a41231c7b6fb1cd4.png" /></p>

<p>明らかに error ハンドラがないぞッて感じのエラーが出ているので、<br />
雰囲気でBadAuthenticationEndsUpHere クラスを足してみる。  </p>

<div>
  <pre><code class="ruby">class BadAuthenticationEndsUpHere
  def self.call(env)
    p env
    p &quot;BadAuthenticationEndsUpHere&quot;
    Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
  end
end</code></pre>
</div>

<p>思い通りだ。 error ハンドラとして BadAuthenticationEndsUpHere クラスが呼ばれた。<br />
<img src="http://gyazo.com/f44ae6997b92aab707291851645c565a.png" /></p>

<p>それでは、正しく期待している serialize_from_session が動くように User.get を定義する。  </p>

<div>
  <pre><code class="ruby">def get(id)
    ## 永続化されたものから引いてうまく引けたと過程して返す
    return User.new(id)
  end</code></pre>
</div>

<p>1回目、とりあえずログインされるはず。<br />
<img src="http://gyazo.com/9a31a0967443614441eeb729e34d6ba7.png" /></p>

<p>サーバのデバッグログ  </p>
<blockquote><p>&#8220;Authenticate!!!!!!!!!!!!&#8221;<br />&#8220;serialize into session!!!!!!!!!!!!&#8221;</p></blockquote>
<p>ログから、セッションに値が仕込まれた模様。</p>

<p>2回目、セッションから値を引いてみる。<br />
<img src="http://gyazo.com/e5db07a78d1f75119ffa76740d10032b.png" />
あれ、ミス。。あ、 serialize_from_session が読んでるのは User.get(id) だから class method だった。。<br />
修正して再チャレンジ。  </p>

<p>ちゃんときたっぽい！<br />
<img src="http://gyazo.com/c1225bebd28bd178e9c9aaa5967d8c89.png" /></p>

<p>デバッグログ</p>
<blockquote><p>&#8220;Authenticate!!!!!!!!!!!!&#8221;<br />&#8220;serialize from session!!!!!!!!!!!!&#8221;<br />127.0.0.1 - - [01/Mar/2014 18:54:54] &#8220;GET /?password=hoge HTTP/1.1&#8221; 200 13 0.0022</p></blockquote>

<p>get されている模様！  </p>

<p>これで user にアクセスできる。  </p>
<div>
  <pre><code class="ruby">p &quot;warden user is &quot;
p env['warden'].user</code></pre>
</div>

<p>ドキュメントを読むと、<br />
Warden::Strategies で定義した #valid? に関しては、定義されてようがなかろうが呼ばれるらしい。  </p>

<p>試しにこの時点で #valid? で nil を返すと次の strategy にチャレンジがうつった。<br />
すべての strategy で失敗したら、 failure_app が呼ばれる。  </p>

<p>特筆すべきは、ここで呼ばれるのが /unauthenticated だということだ。<br />
この url http://localhost:9292/?password=hoge を叩くと<br />
127.0.0.1 - - [01/Mar/2014 19:01:45] “GET /unauthenticated?password=hoge HTTP/1.1” 404 9 0.0012<br />
がデバッグログに表示されている。  </p>

<div>
  <pre><code class="ruby">class BadAuthenticationEndsUpHere
  def self.call(env)
    p &quot;in BadAuthenticationEndsUpHere!!!!!!!!!!!!&quot;
    request = Rack::Request.new(env)

    p &quot;request.path_info is &quot;
    p request.path_info

    Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
  end
end</code></pre>
</div>

<p>をデバッグとして試しに書いてみた。<br />
やはり、内部的に path_info を unauthenticated に書き換えているようだ。<br />
これは lib/warden/manager.rb のあたりを見ればわかる。<br />
def process_unauthenticated(env, options={})<br />
や<br />
def call_failure_app(env, options = {})<br />
で実際にそのように書かれている。<br />
と思ったら<br />
<a href="https://github.com/hassox/warden/wiki/Failures">https://github.com/hassox/warden/wiki/Failures</a><br />
ここにめっちゃそのように書いてあった。  </p>

<p>halt! や success など便利なメソッドが strategy で使える模様。<br />
<a href="https://github.com/hassox/warden/wiki/Strategies">https://github.com/hassox/warden/wiki/Strategies</a>
詳細はコチラを参照。  </p>

<p>このような認証の仕組みが rack で使えて、 認証自体が strategy パターンになっているので<br />
いい感じに他の人が作った strategy を使えるようになっている。  </p>

<p><a href="https://github.com/hassox/warden/wiki/Setup#advanced-setup-with-scopes">https://github.com/hassox/warden/wiki/Setup#advanced-setup-with-scopes</a><br />
これを見ると、warden は、認証の scope を分けられるようになっている。<br />
それぞれの認証で、違うロジックを定義して、認証できるようだ。<br />
特に指定がない場合は、 env[‘warden’] は user として認証する。<br />
しかし、これは上書きができるようだ。<br />
default の設定上書きとは別に、明示的にスコープを指定することもできる。  </p>
<div>
  <pre><code class="ruby">env['warden'].authenticate! :scope =&gt; :api</code></pre>
</div>

<h3 id="callback">callback</h3>

<div>
  <pre><code class="ruby">&quot;serialize into session!!!!!!!!!!!!&quot;
&quot;after_set_user caled!&quot;
&quot;auth is&quot;
Warden::Proxy:70106638122900 @config={:default_scope=&gt;:default, :scope_defaults=&gt;{}, :default_strategies=&gt;{:_all=&gt;[:password, :basic]}, :intercept_401=&gt;true, :failure_app=&gt;BadAuthenticationEndsUpHere}
&quot;logout called!!!!!!!!!!!&quot;
&quot;in BadAuthenticationEndsUpHere!!!!!!!!!!!!&quot;
&quot;request.path_info is &quot;
&quot;/unauthenticated&quot;
127.0.0.1 - - [01/Mar/2014 19:55:10] &quot;GET /unauthenticated?password=hoge HTTP/1.1&quot; 404 9 0.0025</code></pre>
</div>

<p>これも結構参考になる。<br />
<a href="https://gist.github.com/lukesutton/107966">https://gist.github.com/lukesutton/107966</a></p>

<h2 id="section-2">所感</h2>
<p>warden 大体わかった。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3月が来た]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/life-march-2/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/life-march-2</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>一週間開いてしまった。<br />
やっぱ life 的なブログは毎週書かないとダメな気がしてきた。  </p>

<p>先週はお腹の調子がひたすら悪くてしんどかった。<br />
rails っていう覚えゲーをひたすらこなしているんだけど<br />
とにかく雪崩のように覚えることがあって大変だ。  </p>

<p>でも二回目以降(知識が増えたら)もっと楽になるだろうから今だけだと思って頑張ろう。  </p>

<p>ついに花粉が本気出し始めた。<br />
早めに病院に行ってこようと思う。<br />
ちなみにロラタジンってくすりが俺にとってはすごく効いた(去年)。  </p>

<h2 id="section-1">困っていること</h2>
<p>筋トレのモチベーションがどうも上がらない。<br />
太る一方だし。。<br />
あと ruby に駆り立てられてすごい頭を使ってるからずいぶん疲れている。<br />
ruby の勉強というか調査とかのせいであんまり本を最近読めてない。<br />
これは改善すべきだ。  </p>

<h2 id="section-2">勉強途中経過</h2>

<h3 id="section-3">進んでない</h3>
<ul>
  <li>rails tutorial 6 まで</li>
</ul>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>DDD ショートバージョン</li>
  <li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">http://www.infoq.com/jp/minibooks/domain-driven-design-quickly</a></li>
  <li>論語入門</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
</feed>
