<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2018-12-12T23:23:06+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[落日]]></title>
    <link href="http://vimtaku.github.io/blog/2018/12/12/2018-is-over/"/>
    <updated>2018-12-12T22:48:44+09:00</updated>
    <id>http://vimtaku.github.io/blog/2018/12/12/2018-is-over</id>
    <content type="html"><![CDATA[<p>ほぼ自分のためのまとめ。</p>

<p>あっという間の 3年9ヶ月だった。
所詮地球が太陽の周りを3週しただけのはなし。</p>

<p>次はまぁおいおい。</p>

<h2 id="section">わかりやすい成果</h2>
<p>「魚 仕入れ」で検索したら ads 以外で一番上に出てくるであろうページを参照</p>

<h2 id="section-1">良かったこと</h2>
<ul>
  <li>メインプロダクトに対しては、プルリク 600 くらい出してて、圧倒的に改善や機能開発を進めることができた
    <ul>
      <li>勝手に rails に詳しくなった</li>
      <li>レガシーなコードを改善していける力がぐっと高まった</li>
    </ul>
  </li>
  <li>ある問題にたいして自分なりに考えて咀嚼し、ソリューションを出せたこと
    <ul>
      <li>ライブラリや gem やアプリなど、必要なものを考えてじっさい作成する力がぐっとついたこと
        <ul>
          <li>chawan (形態素解析 mecab のラッパーライブラリを作ることができたこと)</li>
          <li>gomasaba</li>
          <li>specification_parser</li>
          <li>android アプリ2つ</li>
          <li>その他</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>売上、利益率、粗利など、自社の会社の売上や利益に対して真剣に意識が向けられるようになったこと</li>
  <li>もうだいぶ前になんちゃらアワードっていう、頑張ったひとがもらえるぽいやつに2回選ばれたこと(うち一回は全社MVPで、りっぱなボールペンをもらった)</li>
  <li>毎日、全力でただ前を向いてがんばれた</li>
  <li>オーナーシップ</li>
</ul>

<h2 id="section-2">悪かったこと</h2>
<ul>
  <li>多くないですがなんか言われたら嫌なので省略</li>
  <li>上場までいられなかったこと(個人的な事情でやめるので. うまくいくと思ってます)</li>
</ul>

<h2 id="section-3">変わったこと</h2>
<ul>
  <li>魚への興味、ドメイン知識が圧倒的に増えた</li>
  <li>世間一般のひとはまぐろで一括りにしているが、メバチマグロ、本マグロ(クロマグロ、メジマグロ)、キハダマグロなどがあること
    <ul>
      <li>イナダ、ワラサ、ブリ、ハマチの違い(諸説あり)</li>
    </ul>
  </li>
  <li>いままで知らなかった魚種を知ることができたこと
    <ul>
      <li>ホウボウ(おいしいしおすすめ)</li>
      <li>ヒゲソリダイ(おいしいし、結構安い。おすすめ)</li>
      <li>アカカマス(おいしい)</li>
      <li>ヒメダイ(おいしい)</li>
      <li>マトウダイ(おいしい)</li>
      <li>クエ(おいしいけどたかい)</li>
      <li>カナガシラ(おいしいけどちいさい)</li>
      <li>アカムツ(のどぐろ)</li>
      <li>ギマ</li>
      <li>メダイ</li>
      <li>イシガキダイ(あんまおいしくない)</li>
      <li>コショウダイ(切るのが硬い)</li>
      <li>その他思い出せないけど多数…</li>
    </ul>
  </li>
  <li>本当に美味しい魚に出会えたこと
    <ul>
      <li>五島列島の特大の天然活〆神経抜き真鯛。あんなに美味いタイがあるとは思わなんだ。</li>
      <li>特大ヒラメ。あのヒラメのムニエルは信じられないくらいうまかった。</li>
      <li>ヒラソウダ。美味いカツオはマグロを超える。</li>
    </ul>
  </li>
  <li>値切りかたを身に着けて実際に実行することができるようになったこと</li>
</ul>

<h2 id="section-4">気づいたこと</h2>
<ul>
  <li>できる営業のヒトは電話をしてるんじゃなくて狩りをしているらしい</li>
  <li>できる営業のヒトはゴールをすでにおいている。ゴールがあるし、サブゴールもあるからブレない。一般人はそんなのに勝てるわけない(偏見)</li>
  <li>経営というか、売上、利益率、原価率、そういう数字に詳しくない、興味ないエンジニアさんは多いので、そこは価値だせる領域(簿記3級、あと3点(1問)で落ちたけど)
    <ul>
      <li>活動してるときにこんなにビジネス感覚があるエンジニアさんは初めて会いましたって言われたのは、結構嬉しかった。</li>
      <li>一方、他の会社では全然足りないなぁとかんじたのでそこはもっと埋めていく</li>
    </ul>
  </li>
  <li>何をやるか、何をやりたいかはめっちゃ重要
    <ul>
      <li>自分の人生の方向性というか、やっていきたいことがわかってよかった</li>
    </ul>
  </li>
  <li>転職したいって誰にも言ってなかったけど、たまたまご飯にさそってくれて、その後につながる話をしてくれたひとが何人もいたこと</li>
  <li>前提としてすごくヒトのことが嫌いだったんだけど、ヒトを大切にしたほうがいいなぁっておもいました</li>
  <li>人生ずっと勉強</li>
  <li>すごい人「他人と比べない。それだといつまでも幸せになれない。」
    <ul>
      <li>これは真実だとおもうし、あなたみたいなひとが言うと…そうですよね。的な重みがある言葉。</li>
    </ul>
  </li>
  <li>あとはもろもろかけないので省略</li>
</ul>

<p>たぶんいま書いてあるものの 200 倍くらい色々あったとおもうけど、紙面の都合上以上になります。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で 画像を drag and drop してプレビューして写真をアップロードしたいだけなら ezdz がよかった]]></title>
    <link href="http://vimtaku.github.io/blog/2018/04/29/rails-drag-and-drop-image/"/>
    <updated>2018-04-29T10:25:20+09:00</updated>
    <id>http://vimtaku.github.io/blog/2018/04/29/rails-drag-and-drop-image</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Rails のフォームで、画像をドラッグ・アンド・ドロップでプレビューしてファイルをアップロードしたい欲求があった。<br />
<a href="https://github.com/jaysalvat/ezdz">ezdz</a> というのがあって、それで自分の欲求が満たせましたという話。<br />
(jQuery 依存です)</p>

<h2 id="section">背景</h2>
<p>Rails のフォームを生成していて、画像をドラッグ・アンド・ドロップでプレビューしてファイルをアップロードしたい欲求があった。<br />
(ただし、ここでは単一ファイルのアップロードを前提とする)。<br />
いろいろ調べてみると <a href="http://www.dropzonejs.com/">Dropzone.js</a> というのが結構便利そうだったし、今回は jQuery に依存していたので<br />
これでやってみようとしらべてみた。 dropzone-rails というプラグインがあってすぐに rails に組み込めて楽そうだった。  </p>

<h2 id="dropzone-rails-">dropzone-rails をつかってかんじたつらみ</h2>
<ol>
  <li>新規作成時には entity は保存されていないので、entity を保存してから update するような設計にしないとうまく作りにくい。
    <ul>
      <li>理由は基本的に xhr でデータを送信するから。</li>
      <li>autoprocessQueue を false にすれば、画像を D&amp;D したときにそうしないようにできる。結局 Dropzone のインスタンスの processQueue をコールしないといけない。</li>
      <li>entity がすでに作成されていたら それに対して update をかけるだけでよいのでそういうやり方でいけるならそれでよし。</li>
      <li>もしそれがいやなら temp みたいなよくわからない entity に作成したあとに その uuid を form に埋め込んでサーバで保存するみたいな回りくどいことをしなければいけない気がする</li>
    </ul>
  </li>
  <li>上記の xhr でデータを送信するところに rails との致命的な相性の悪さがある(のはもうわかっているとおもうが)。
    <ul>
      <li>model の validation に引っかかったときなどのハンドリングを js 側に持ってこなければいけない</li>
      <li>すなわち rails の view で頑張ったエラーなどに合わせたりという謎の努力が必要になる。</li>
    </ul>
  </li>
  <li>そもそもそんなにがんばりたくない
    <ul>
      <li>dropzone-rails の js の client のソースコードを結局追って修正したりを繰り返さないとおもったことができなかった</li>
    </ul>
  </li>
</ol>

<h2 id="section-1">代替え案を探すことに</h2>
<p>そもそも自分がやりたいのは</p>

<ul>
  <li>xhr じゃなくてよし</li>
  <li>いったん1ファイルでよし</li>
  <li>画像をプレビューしたい</li>
  <li>jQuery は使用可能(bootstrap4 があるから)</li>
</ul>

<p>だったので、それっぽい代替を探していたら <a href="https://github.com/jaysalvat/ezdz">ezdz</a>  を見つけた。<br />
demo をみたらそれっぽかったし、 rails の binding もあったので必要十分だった。  </p>

<h2 id="section-2">所感</h2>
<p>active storage でもプレビューできるみたいなのがあったのでそういうのを調べても良かったんだけど、<br />
まだ rails5 に至ってないひとはもしかしたら上記が有効かもしれません。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンジニアのための最もイケているバッグは DEFY BAG では説]]></title>
    <link href="http://vimtaku.github.io/blog/2017/11/24/engineer-great-defy-bag/"/>
    <updated>2017-11-24T14:33:58+09:00</updated>
    <id>http://vimtaku.github.io/blog/2017/11/24/engineer-great-defy-bag</id>
    <content type="html"><![CDATA[<h1 id="defy-">エンジニアのための最もイケているバッグは DEFY のバッグでは説</h1>

<h2 id="tldr">TL;DR</h2>
<p>DEFY のバッグは約4万円とめっちゃ高い。<br />
しかし、そもそもカッコイイし耐久性も十分っぽい。<br />
さらにあまり人とかぶらないので最高では。  </p>

<h2 id="defy--1">DEFY のバッグ</h2>

<p>買ったのはこのバッグだ。  </p>

<p><a href="https://hb.afl.rakuten.co.jp/hgc/16326cca.759537ed.16326ccb.59696a68/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fdelicious%2F12000036%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fdelicious%2Fi%2F10009090%2F&amp;link_type=pict&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0Iiwic2l6ZSI6IjQwMHg0MDAiLCJuYW0iOjEsIm5hbXAiOiJkb3duIiwiY29tIjoxLCJjb21wIjoiZG93biIsInByaWNlIjoxLCJib3IiOjEsImNvbCI6MH0%3D" target="_blank" rel="nofollow" style="word-wrap:break-word;"><img src="https://hbb.afl.rakuten.co.jp/hgb/16326cca.759537ed.16326ccb.59696a68/?me_id=1230468&amp;item_id=10009090&amp;m=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fdelicious%2Fcabinet%2F36%2F12000036_1.jpg%3F_ex%3D80x80&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fdelicious%2Fcabinet%2F36%2F12000036_1.jpg%3F_ex%3D400x400&amp;s=400x400&amp;t=pict" border="0" style="margin:2px" alt="" title="" /></a></p>

<p>とにかくカッコイイ。<br />
上記のリンクは楽天のものだが、俺は気付かずに普通に DEFY オンラインショップから直接仕入れて、結果約4万円だった。  </p>

<p><a href="https://defybags.com/collections/bags/products/bucktown-backpack-black-wax-canvas">https://defybags.com/collections/bags/products/bucktown-backpack-black-wax-canvas</a></p>

<p>内訳は $289(商品) - $28.9(10%クーポン、メルマガ登録で取得可) + 配送料(東京) $61.4 で 37946 JPY。さらに 関税 と関税にかかる消費税(!) で + 2800円。 トータル 40746 円！
たっけー。</p>

<p>おそらく、直接仕入れるのは最安ではなさそうだ。<br />
買ってから気づいたけど、上記の楽天リンク(アフィです) は3万5千円なので普通に輸入するよりは安いと思う(本物かどうかはしりませんが多分大丈夫だろう)。  </p>

<h3 id="section">実際の写真</h3>

<p>まるっこいフェイス。</p>

<p><img src="https://i.gyazo.com/2915219977de6260fbd0a3e585bf4828.jpg" alt="https://i.gyazo.com/2915219977de6260fbd0a3e585bf4828.jpg" /></p>

<p>お洒落かつ頑丈そうなのが明らかにわかる。<br />
ジッパーかわいい。</p>

<p><img src="https://i.gyazo.com/d96839892362b938e19e11c64fda47e8.jpg" alt="https://i.gyazo.com/d96839892362b938e19e11c64fda47e8.jpg" /></p>

<p><img src="https://i.gyazo.com/2f5bb5ab06d33bbf105f5a2def4fa2de.jpg" alt="https://i.gyazo.com/2f5bb5ab06d33bbf105f5a2def4fa2de.jpg" /></p>

<p><code>DEFY OR DIE</code>  </p>

<p><code>おいしい</code>  </p>

<p>オリジナルのシールがかわいい。  </p>

<p>これは本場で買ったもののみが味わえる雰囲気だとおもう(たぶん)。  </p>

<p>最後に遠目のやつ。  </p>

<p><img src="https://i.gyazo.com/9b61528749234bcb085e7d787ff86d78.jpg" alt="https://i.gyazo.com/9b61528749234bcb085e7d787ff86d78.jpg" /></p>

<p>かっこいいなぁ。  </p>

<h2 id="c6">c6(シーシックス)のリュック</h2>

<p>そもそもリュックなんてあんまり買わないけど、今回は使っていたリュックに穴があいてしまったから買い直しとあいなった。<br />
もともと使っていたのはコレだった。<br />
こちらはお値段 3万2千円。<br />
約2年間つかった。まさか2年でボロボロになるとおもってなかったので結構ショックがでかい。  </p>

<p><a href="https://hb.afl.rakuten.co.jp/hgc/16326e6f.961a0e0f.16326e70.62e07c43/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Ftorato%2Fc1321%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Ftorato%2Fi%2F10001373%2F&amp;link_type=pict&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0Iiwic2l6ZSI6IjQwMHg0MDAiLCJuYW0iOjEsIm5hbXAiOiJkb3duIiwiY29tIjoxLCJjb21wIjoiZG93biIsInByaWNlIjowLCJib3IiOjEsImNvbCI6MH0%3D" target="_blank" rel="nofollow" style="word-wrap:break-word;"><img src="https://hbb.afl.rakuten.co.jp/hgb/16326e6f.961a0e0f.16326e70.62e07c43/?me_id=1319954&amp;item_id=10001373&amp;m=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Ftorato%2Fcabinet%2Fupload%2Fsave_image%2Fcs%2Fcs013x-00b.jpg%3F_ex%3D80x80&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Ftorato%2Fcabinet%2Fupload%2Fsave_image%2Fcs%2Fcs013x-00b.jpg%3F_ex%3D400x400&amp;s=400x400&amp;t=pict" border="0" style="margin:2px" alt="" title="" /></a></p>

<p>このリュックを買った理由は  </p>

<ol>
  <li>見た目のデザインがお洒落</li>
  <li>Macbook Pro 15inch が入るポケットがある(背中に近い部分にPCを入れられる)</li>
  <li>PC が入る空間とわかれた空間がある</li>
  <li>横にポケットが付いていてなんでも入れやすい、取り出しやすい</li>
</ol>

<p>だった。<br />
上記の条件に当てはまるリュックは結構少なかった。  </p>

<p>その他にも
<a href="https://hb.afl.rakuten.co.jp/hgc/16326f12.f79a1dc0.16326f13.34052373/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fglv%2Fcec-94%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fglv%2Fi%2F10064500%2F&amp;link_type=text&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJ0ZXh0Iiwic2l6ZSI6IjQwMHg0MDAiLCJuYW0iOjEsIm5hbXAiOiJkb3duIiwiY29tIjoxLCJjb21wIjoiZG93biIsInByaWNlIjowLCJib3IiOjEsImNvbCI6MH0%3D" target="_blank" rel="nofollow" style="word-wrap:break-word;">Cote&amp;Ciel コートエシエル </a> とかも人気で、実際に見にいったが、<br />
PC が入る部分の開け閉めに非常に問題がありそうでやめた。  </p>

<h3 id="c6-1">c6(シーシックス)のリュックはどうだったのか</h3>
<p>買ってからすぐに旅行に行くタイミングがあって、結構重めの荷物を入れたら速攻でかたのリュックの紐が少し取れる程度の作りの悪さだった。<br />
小洒落たパンとかを入れる都会の人間にはこのようなことは起きないかもしれないので何とも言えないが、<br />
ハード目に使うようなひとにはこのリュックは向かないと思う。<br />
しかも、これも自分に限っての可能性が高いが、結構 Macbook Pro 15 inch を入れたまま走る機会がおおく、その影響で ノートPC 格納ポケットを突き破り、<br />
さらに Macbook の重みで底面の記事も突き破るという始末。  </p>

<p>値段の割にとにかく自分的には出来が悪かったので、すごくムカついていた。<br />
歴代のバッグの中でも群を抜いてできが悪かったと思う。<br />
(PORTER, マスターピース, gravis, c6, DEFY)</p>

<p>今考えたら中国産だったしなぁ。</p>

<h2 id="defy--2">DEFY のバッグの使い心地</h2>
<p>(数ヶ月使用したあとに追記予定)</p>

<p>1日使って感想。けっこう重いから肩がこるかも。</p>

<h2 id="section-1">所感</h2>
<p><strong>DEFY のバッグ、おすすめです。 これから流行りそうな予感がします。</strong></p>

<p>(昔マスターピースが出たてのころ、これは流行りそうだと思って流行ったし、ミステリーランチも流行りそうだなとおもって流行ったので。)</p>

<p>重さがそもそも苦じゃないタイプなので、もしかしたら人によっては重いかもしれないけど、
選択肢の一つとして考えてみてはいかがでしょうか。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thor_for_rails_scaffold_generate_path]]></title>
    <link href="http://vimtaku.github.io/blog/2017/08/30/thor-for-rails-scaffold-generate-path/"/>
    <updated>2017-08-30T12:15:08+09:00</updated>
    <id>http://vimtaku.github.io/blog/2017/08/30/thor-for-rails-scaffold-generate-path</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>If you want to override jbuilder generator when scaffolding, put it <code>Rails.root + lib/templates/rails/jbuilder/index.json.jbuilder</code></p>

<p><code>vim /Users/vimtaku/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def find_in_source_paths(file) # rubocop:disable MethodLength
</span><span class="line">  possible_files = [file, file + TEMPLATE_EXTNAME]
</span><span class="line">  relative_root = relative_to_original_destination_root(destination_root, false)
</span><span class="line">  binding.pry
</span><span class="line">
</span><span class="line">  source_paths.each do |source|
</span><span class="line">    possible_files.each do |f|
</span><span class="line">      source_file = File.expand_path(f, File.join(source, relative_root))
</span><span class="line">      return source_file if File.exist?(source_file)
</span><span class="line">    end
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="background">Background</h2>
<p>I searched pathes for used generator, but I cant find where template is used.
I’m using jbuilder.</p>

<h2 id="libtemplates">lib/templates</h2>
<p><code>Rails.root + lib/templates</code> dir is used as tempaltes path by default.<br />
if you want to override jbuilder templates, you can put<br />
<code>Rails.root + lib/templates/rails/jbuilder/index.json.jbuilder</code>.</p>

<h2 id="see-also">see also</h2>
<p><code>thor-0.19.1/lib/thor/actions/file_manipulation.rb</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react_native_fcm_undeclaired_identifier]]></title>
    <link href="http://vimtaku.github.io/blog/2017/06/09/react-native-fcm-undeclaired-identifier/"/>
    <updated>2017-06-09T21:48:23+09:00</updated>
    <id>http://vimtaku.github.io/blog/2017/06/09/react-native-fcm-undeclaired-identifier</id>
    <content type="html"><![CDATA[<h1 id="i-got-these-message-when-start-to-use-react-native-fcm">I got these message when start to use react-native-fcm</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">error: use of undeclared identifier 'FIRMessagingConnectionStateChangedNotification'
</span><span class="line">   name:FIRMessagingConnectionStateChangedNotification object:nil];</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I lot of time consumed, but I found that Firebase version is weired for me.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pod install --repo-update</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>save me.</p>

<p>that’s it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS Sierra で Karabiner-elements がない場合に keyrepeat を早く適切にする方法]]></title>
    <link href="http://vimtaku.github.io/blog/2017/01/29/keyrepeat/"/>
    <updated>2017-01-29T11:15:34+09:00</updated>
    <id>http://vimtaku.github.io/blog/2017/01/29/keyrepeat</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">defaults write -g InitialKeyRepeat -int 9
</span><span class="line">defaults write -g KeyRepeat -int 2</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">背景</h2>
<p>Mac OS Sierra にしてから karabiner elements になって、キーリピートの設定ができなくなった。
mac の system preferences からできる最速ではもちろん物足りないので、一旦目安としての数値がなかったので記述する。</p>

<h2 id="section-1">概要</h2>
<p>iterm から</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">defaults write -g InitialKeyRepeat -int 9
</span><span class="line">defaults write -g KeyRepeat -int 2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>の各コマンドを実行して再起動したら反映された。若干はやいきもするが、慣れの問題かと思っている。</p>

<h2 id="section-2">所感</h2>
<p>最初1,1 とかにしたら大変なことになったので、誰かのためになればさいわいです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone6 + au(誰でも割+LTEフラット) 運用を、 iPhoneSE と格安SIM(mineo Dプラン) の運用にする]]></title>
    <link href="http://vimtaku.github.io/blog/2016/09/18/au_mineo_iphonese/"/>
    <updated>2016-09-18T12:02:17+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/09/18/au_mineo_iphonese</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<ul>
  <li>iPhone6 を iPhoneSE に変更(大体30分)
    <ul>
      <li>約3万</li>
      <li>アップルストアで30分(バックアップ戻す時間込み)</li>
    </ul>
  </li>
  <li>2016年11月1日(あたり)に mineo Dプランを、エントリーパッケージ経由で契約する
    <ul>
      <li>その後自動でau が解約される(解約更新月なので9800円くらいがかからない)。</li>
      <li>au は月末解約扱いになるらしいが、システムの対応が間に合ってないせいでまだそうなってないっぽい。</li>
    </ul>
  </li>
</ul>

<h2 id="section">背景</h2>
<p>iPhone6 が日本にて発売されたのが 2014年9月で、おそらくそのときに購入した。<br />
その流れで、 au の「誰でも割」「LTEフラット」を契約して、約2年間運用してきた。<br />
そもそもパケットの料金が高すぎるので不満をいだいて居たので、<br />
格安シムのほうが安くなるのはおそらく確実だろうということで、<br />
どのようにすればよいか調べたのでココに記しておく。  </p>

<h3 id="section-1">自分の要求</h3>
<ul>
  <li>もちろん速度が出ると良い。  </li>
  <li>テザリングは必須。  </li>
  <li>電話はあまりしない。(するときは実家になど、たまに長くなるとお金がかかる)  </li>
  <li>大体実績値がパケット使用量 7GB/月 程度。もうちょっとあっていいと思っている。  </li>
</ul>

<h2 id="section-2">概要</h2>
<ul>
  <li>端末を何にすればよいか?  </li>
  <li>MVNO をどこにすればよいか？  </li>
  <li>au の契約更新月について  </li>
</ul>

<h2 id="section-3">端末を何にすればよいか?</h2>
<p>iPhoneSE とした。<br />
iPhone7 発売に伴い, iPhoneSE 64GB が 49800円(税別)なので、これにした。<br />
iPhone7 は、今の自分には必要ないと思ったからだ。  </p>

<p>Android はOS的に好きでないのでやめた。  </p>

<p>銀座アップルストアに行って、iPhone6 が24,000円で下どってくれたので、実質3万くらいで購入できた。<br />
mac の iTunes でフルバックアップを取って行かないと無駄足になるので注意。  </p>

<h2 id="mvno-">MVNO をどこにすればよいか？</h2>
<p>mineo にした。<br />
iPhoneSE でのテザリングでの前提だと IIJmio と mineo が良いらしい。<br />
<a href="http://cospahack.com/life/iphone-se-sim">出典はこちら。</a><br />
自分は、ちょっとググッた結果通信速度の安定的に mineo のほうが良さそうだと判断したのと、<br />
通信料を最大2GBシェアリングできる概念みたいなものがあるようなので、こちらにした。  </p>

<p>自分が調べた結果だと、Y!mobile とか UQ mobile とかはテザリングNG だったりする。<br />
テザリング使いたい人は前提をテザリングに考えたほうが良いと思う。  </p>

<h2 id="au-">au の契約更新月について</h2>
<p>au の契約更新月は、誰でも割とかだと 25ヶ月、26ヶ月目くらいらしい。<br />
au の人なら多分入れているであろう、auお客様サポートアプリの「ご契約情報」 「料金割引サービス」に、  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">誰でも割
</span><span class="line">(次回更新年月 2016年11月~2016年12月)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>などと書いてあるのが確認できるのでご確認を。  </p>

<p>ちなみに、解約についてであるが、au は月末解約扱いになると宣言しているが、<br />
システムの対応が間に合ってないせいでまだそうなってないっぽい。  </p>

<h2 id="mineo-">mineo にするならこれを買うと安くなる模様。</h2>
<p>普通にmineo公式サイトを見ればわかるけど、プロモコードを入れるところがある。<br />
申し込み時の方法が主に3つあるけど、下記を購入して登録すると、新規登録手数料がおよそ 2000円安くなるらしいので、<br />
これを買ったらイイんじゃないかなと思う。  </p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://vimtaku.github.io//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=vimtaku-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00UT26M0Q&amp;linkId=727145ea31131a6c5654ff0141c682df"></iframe>

<h2 id="section-4">お得感見積もり</h2>

<h3 id="before">BEFORE</h3>
<p>auのもろもろ(7GB制限):月平均1万円</p>

<h3 id="after">AFTER</h3>
<p>10GB(音声+データSIM): 3220円<br />
通話料大体:400~600円<br />
4000円くらい  </p>

<p>月6000円お得。電話の具合によってはもうちょっとお得具合がへるがそれでも月6000円はでかい気がする。  </p>

<p>3万の端末代金は 6000 * 5ヶ月あればもとが取れる予定。  </p>

<h2 id="section-5">所感</h2>
<p>大体3時間くらいいろいろ調べた結果なので、誰かのために慣れば幸いです。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ridgepole command gets [ERROR] undefined method index]]></title>
    <link href="http://vimtaku.github.io/blog/2016/08/05/ridgepole-version-index-error/"/>
    <updated>2016-08-05T16:53:16+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/08/05/ridgepole-version-index-error</id>
    <content type="html"><![CDATA[<h2 id="tldl">TL;DL</h2>
<p>You should use newest version of gem definetly.</p>

<h2 id="i-faced-this-error">I faced this error</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[ERROR] undefined method `index' for #&lt;Ridgepole::DSLParser::Context::TableDefinition:0x007fae9aa1b850&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="solved">Solved</h2>
<p>This is version problem.</p>

<p>I simply write as follows,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'ridgepole'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but it seems downloads version is 0.5.0.</p>

<p>I finally found 0.6.4 is newest ver for now, so I used it, problem disappeared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[let's encrypt で ec2 で単独で動いているサービスを https 化する]]></title>
    <link href="http://vimtaku.github.io/blog/2016/05/03/lets-encrypt/"/>
    <updated>2016-05-03T16:19:17+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/05/03/lets-encrypt</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>
<p>前提として、 EC2 に passanger + nginx でサービスを動かしている。<br />
Let’s encrypt を導入するには主に以下をやる必要があるだろう。</p>

<ol>
  <li>サーバにログインして letsencrypt-auto スクリプトを使用して証明書を作成</li>
  <li>nginx に設定し、再起動</li>
  <li>90日で切れるので、証明書の自動更新をつける</li>
</ol>

<p>以下では、<br />
 - force SSL 的な設定は今のところ nginx などではやらない。<br />
 - クライアント側のアプリなどで対応する。  </p>

<h2 id="section-1">1. 証明書を作成</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /opt
</span><span class="line">git clone https://github.com/letsencrypt/letsencrypt
</span><span class="line">cd /opt/letsencrypt
</span><span class="line"># ec2 のセキュリティグループで 443 を開けておく
</span><span class="line">./letsencrypt-auto certonly --standalone</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nginx-">2. nginx に設定し、再起動</h2>

<p>以下をいい感じに追加する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   listen 443 ssl;
</span><span class="line">
</span><span class="line">   ssl_certificate /etc/letsencrypt/live/your.domain.name/fullchain.pem;
</span><span class="line">   ssl_certificate_key /etc/letsencrypt/live/your.domain.name/privkey.pem;
</span><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
</span><span class="line">   ssl_prefer_server_ciphers on;
</span><span class="line">   ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">3. 自動更新</h2>

<p>su で crontab -e</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">00 05 01 * * /etc/init.d/nginx stop; /opt/letsencrypt/letsencrypt-auto certonly --standalone -d your.domain.name --renew-by-default --debug ; /etc/init.d/nginx start;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">所感</h2>
<p>https 化が簡単にできて最高な時代だなぁと思った。</p>

<h2 id="section-4">参考</h2>
<p><a href="https://www.mitchcanter.com/lets-encrypt-ssl-amazon-aws/">https://www.mitchcanter.com/lets-encrypt-ssl-amazon-aws/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺が考える最強ヘッドフォンゼンハイザーHD25-1 Ⅱ を超えた Amperior with リケーブル]]></title>
    <link href="http://vimtaku.github.io/blog/2016/03/05/headphone-sennheiser-hd25-amperior/"/>
    <updated>2016-03-05T16:53:16+09:00</updated>
    <id>http://vimtaku.github.io/blog/2016/03/05/headphone-sennheiser-hd25-amperior</id>
    <content type="html"><![CDATA[<h2 id="section">はじめに</h2>

<p><a href="http://vimtaku.github.io/blog/2014/08/17/headphone-sennheiser-best/">過去の記事</a>で書いたとおり、ゼンハイザーHD25-1 は俺が考える最強ヘッドフォンだった。<br />
しかし、 Amperior はさらにそれを超えている。しかも現在では Amazon だと HD25-1 より安い。<br />
本記事ではこのヘッドフォンについてレビューをする。  </p>

<h2 id="section-1">いまのベストを書く</h2>

<ul>
  <li>
    <p>2万5千円あるならこれを買おう。
<a href="http://www.amazon.co.jp/gp/product/B009QV14MC/ref=as_li_ss_il?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B009QV14MC&amp;linkCode=as2&amp;tag=vimtaku-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B009QV14MC&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=vimtaku-22" /></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=vimtaku-22&amp;l=as2&amp;o=9&amp;a=B009QV14MC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
  </li>
  <li>
    <p>リケーブルはこれ。
<a href="http://hb.afl.rakuten.co.jp/hgc/14c7dd20.11028942.14c7dd22.8f5ec1f7/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fneowing-r%2fneoacs-55378%2f%3fscid%3daf_link_txt&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fneowing-r%2fn%2fneoacs-55378" target="_blank">FURUTECH(フルテック) / ADL ヘッドホンリケーブル SENNHEISER HD25-1 / HD25-1 II向け（ケーブルの長さ1.3M） iHP-35S HD25 1.3m[グッズ]</a></p>
  </li>
</ul>

<p>これらで至高の環境が手に入る。  </p>

<h2 id="section-2">詳細</h2>

<h3 id="amperior-">Amperior について</h3>
<p>HD25-1 と比べてずっしりとした重さをかんじるが、別に装着してて疲れるわけではない。<br />
HD25-1 とくらべて、音質が一つづつクリアになっているように感じる。<br />
HD25-1 の音のでかたや音圧は、初めてした時は圧倒的に感じるが、Amperior とくらべてしまうと<br />
どこかぼやっとしてしまうように思う。<br />
Amperior は音圧もすごく、特にロックのサビなどにおけるベースラインのクリアさは驚きがある。<br />
中高音はやはり得意な領域で、低音もやはり得意だろうと思う。<br />
ドラムのシンバルのような音や、シャリッとした音は少し弱めに思うだろう。<br />
それにしても、全体的にクリアで、ゼンハイザーが好きな人なら絶対満足するだろう。  </p>

<p>イヤーパッドはベロアで、しかもしっかりとしていて良い。<br />
HD25-1 とくらべて締りはそんなに強くないと思う。  </p>

<h3 id="section-3">リケーブルについて</h3>
<p>純正のケーブルは、数ヶ月で断線する。<br />
HD25-1 を使っている方はもうおなじみだと思うが、これは確実に起こるだろう。<br />
普通に生きていてこうなるのだ。もう諦めよう。<br />
ただ、そのたびに新しいリケーブルを試せる。<br />
前回までイイと思ってたやつがあったんだけど、今回のリケーブルはそれを超えてきた。  </p>

<p>基本的にはギターが得意なケーブルだと思う。HD25-1 にしばらくさして聞いていたが、<br />
シールド?コネクタ部もとてもぶっとくて断線しにくそうだし、かなりクリアに中高音が聞こえる。<br />
これからどれくらい持つかで評価が変わると思うが、長持ちするならこれは素晴らしい。<br />
まぁ値段も普通に 8000円とかするからそうじゃなきゃこまるんだけど。</p>

<p>ちなみにリケーブルは、もともとのケーブルと クランプ部分が別途が接着してるので、こういうのが必要らしい、約1000円。<br />
<a href="http://hb.afl.rakuten.co.jp/hgc/14c806de.4979485e.14c806df.b0d67e71/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fe-earphone%2f4012418444334%2f%3fscid%3daf_link_txt&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fe-earphone%2fn%2f4012418444334" target="_blank">SENNHEISER(ゼンハイザー) ケーブルクランプセット Cable Clamp Set For HD25【044433】</a></p>

<p>しかも、このクランプのネジが精密ネジとからしく、この特殊ドライバーの H6 っていうやつを使う必要があった、約2000円。<br />
<a href="http://www.amazon.co.jp/gp/product/B002HVMFRG/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B002HVMFRG&amp;linkCode=as2&amp;tag=vimtaku-22">アネックス(ANEX) スーパーフィット精密両頭差替ヘクスローブドライバービット3本組セット ケース付 No.3602</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=vimtaku-22&amp;l=as2&amp;o=9&amp;a=B002HVMFRG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h2 id="section-4">所感</h2>
<p>ゼンハイザーの MOMENTUM シリーズとかも、便利だし音もいい感じなんだけど、<br />
結局 HD25-1 の方が良いと思った。<br />
それよりも素晴らしい Amperior は、本当にいいヘッドフォンだと思う。<br />
みんな買えばいいんじゃないかな、損はしないと、俺は言い切れるよ。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails4 で utf8mb4 にしたい話]]></title>
    <link href="http://vimtaku.github.io/blog/2015/12/09/utf8mb4/"/>
    <updated>2015-12-09T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/12/09/utf8mb4</id>
    <content type="html"><![CDATA[<p>自分用のメモ</p>

<h2 id="etcmycnf">/etc/my.cnf</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[client]
</span><span class="line">default-character-set=utf8mb4
</span><span class="line">
</span><span class="line">[mysqld]
</span><span class="line">character-set-server=utf8mb4
</span><span class="line">innodb_file_per_table
</span><span class="line">innodb_file_format=barracuda
</span><span class="line">innodb_large_prefix = 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="railsrootconfigdatabaseyml">$RAILS_ROOT/config/database.yml</h2>
<p>default に追加</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">charset: utf8mb4
</span><span class="line">encoding: utf8mb4
</span><span class="line">collation: utf8mb4_general_ci</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ridgepole--schemafile">ridgepole の Schemafile</h2>
<p>create_table :news, force: true, id: :bigint, options: “ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC” do |t|
    blahblah…
end</p>

<h2 id="section">参考</h2>
<p><a href="http://blog.arith-metic.jp/category/rails">http://blog.arith-metic.jp/category/rails</a>
<a href="http://yamacent.hatenablog.com/entry/2015/06/06/235900">http://yamacent.hatenablog.com/entry/2015/06/06/235900</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wanna test view *_path on my rails console(pry), so what should i do?]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/rails-url-helper/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/rails-url-helper</id>
    <content type="html"><![CDATA[<h2 id="just-do">Just do</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pry(main)&gt; include Rails.application.routes.url_helpers
</span><span class="line">
</span><span class="line">pry(main)&gt; admin_customer_path(User.first)
</span><span class="line">User Load (0.3ms)  SELECT  `users`.* FROM `users`  ORDER BY `users`.`id` ASC LIMIT 1
</span><span class="line">=&gt; "/admin/customers/1"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses]]></title>
    <link href="http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue/"/>
    <updated>2015-11-08T13:04:14+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/11/08/activerecord_transaction_rescue</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<p>If you use ActiveRecord::Base.transaction syntax, you shoud surround it begin rescue clauses.</p>

<h1 id="detail">Detail</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Hoge
</span><span class="line">  def self.exec
</span><span class="line">    raise "something is not good" if something_check
</span><span class="line">
</span><span class="line">    ActiveRecord::Base.transaction do
</span><span class="line">      User.create(username:"moge")
</span><span class="line">      User.create(username:"moge")
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    rescue StandardError =&gt; e
</span><span class="line">      # if database transaction has occured, this statements will be called
</span><span class="line">      p "duplicate error"
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This code looks good, but includes terrible problem.
It’s definetly rescue clause. In this code, something_check return true, raise “something is not good” error,<br />
<code>and shows "duplicate error"</code>. Terrible.</p>

<p>so if you use ActiveRecord::Base, I strongly recommend use begin rescue clauses implicit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Hoge
</span><span class="line">  def self.exec
</span><span class="line">    raise "something is not good" if something_check
</span><span class="line">
</span><span class="line">    begin
</span><span class="line">      ActiveRecord::Base.transaction do
</span><span class="line">        User.create(username:"moge")
</span><span class="line">        User.create(username:"moge")
</span><span class="line">      end
</span><span class="line">
</span><span class="line">      rescue StandardError =&gt; e
</span><span class="line">        # if database transaction has occured, this statements will be called
</span><span class="line">        p "duplicate error"
</span><span class="line">      end
</span><span class="line">    end
</span><span class="line">
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruboty を github private で動かす]]></title>
    <link href="http://vimtaku.github.io/blog/2015/09/27/ruboty/"/>
    <updated>2015-09-27T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/09/27/ruboty</id>
    <content type="html"><![CDATA[<h2 id="section">何箇所かハマったので記録しておく</h2>
<p><a href="http://kentana20.hatenablog.com/entry/2014/11/02/180812">http://kentana20.hatenablog.com/entry/2014/11/02/180812</a></p>

<p>基本的には上記の記事にそって行けば大丈夫なんだけど、なんかしょかハマった。<br />
具体的には、readme の deploy ボタンで連携できないことだ。<br />
ただ、問題なく連携はできる。<br />
heroku の deploy タブ の Github のところから private に clone した(fork は不可なので)やつを<br />
指定すれば連携ができる。<br />
あと、dotenv の設定が必要なので、環境変数の設定のために</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">heroku config:add SLACK_PASSWORD='' SLACK_ROOM="" SLACK_TEAM="" SLACK_USERNAME=""</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>というような感じで設定する。  </p>

<p>あと、Add ons で Redis to go を検索して追加する。この時カードを登録してなければ、クレカ登録が促されるので、がんばる。  </p>

<p>password の部分は xmpp の slack パスワードを使うことに注意する(https://xxx.slack.com/account/gateways) 。  </p>

<p><code>bundle exec ruboty</code> を起動させるところ(heroku の resources free dyno で edit して 変更して保存する)。<br />
fork した ruboty-template が依存している xrc の version が 0.1.4 で、  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parent.rb:41:in `each'
</span><span class="line">p/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:249:in `block in on_features_received': undefined method `name' for "   ":REXML::Text (NoMethodError)
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parent.rb:41:in `each'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:247:in `on_features_received'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:176:in `on_received'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:217:in `block in connection'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:78:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:78:in `consume'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:49:in `end_element'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/parser.rb:26:in `block (2 levels) in bind'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `block in parse'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `parse'
</span><span class="line">from /app/vendor/ruby-2.0.0/lib/ruby/2.0.0/rexml/parsers/sax2parser.rb:142:in `each'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:38:in `parse'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:34:in `start'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/connection.rb:14:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/robot.rb:45:in `adapt'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/xrc-0.1.4/lib/xrc/client.rb:24:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-slack-0.1.7/lib/ruboty/adapters/slack.rb:81:in `connect'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-slack-0.1.7/lib/ruboty/adapters/slack.rb:14:in `run'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/robot.rb:22:in `run'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/bin/ruboty:6:in `&lt;top (required)&gt;'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/gems/ruboty-1.0.4/lib/ruboty/commands/run.rb:5:in `call'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/bin/ruboty:23:in `load'
</span><span class="line">from /app/vendor/bundle/ruby/2.0.0/bin/ruboty:23:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こんな感じのエラーがでたので、 xrc のバージョンが古いっぽかったので<br />
Gemfile.lock の version を 0.1.8 に編集して commit したらいけた。  </p>

<p>以上。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[model.update_attribute の罠]]></title>
    <link href="http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap/"/>
    <updated>2015-07-14T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/07/14/update_attribute_trap</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>update_attribute で一つだけupdate しようと思ってたら他の属性も変わってて意味不明だった。  </p>

<h2 id="section-1">ヌワー</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">user = User.first
</span><span class="line">p user.name  ## "vimtaku"
</span><span class="line">
</span><span class="line">user.name = "hoge"
</span><span class="line">user.update_attribute(:age, 100)
</span><span class="line">##  UPDATE users SET `name` = 'hoge', `age` = 100 where `id` = 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>結局 user.reload した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クリティカル・シンキング]]></title>
    <link href="http://vimtaku.github.io/blog/2015/05/27/critical-thinking/"/>
    <updated>2015-05-27T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/05/27/critical-thinking</id>
    <content type="html"><![CDATA[<h1 id="section">クリティカル・シンキング</h1>

<h2 id="section-1">ベネフィット</h2>
<p>相手によってベネフィットは変わる。<br />
どのようにベネフィットを聞き出すのかが問題。<br />
また、ベネフィットに答えるために、有効な実績があるのは強い。  </p>

<h2 id="section-2">難しさ</h2>
<p>何かを提案、説得するためには、ベネフィットに答えることを意識すると良いと思う。<br />
実績を作るための努力はいつも怠らないことが重要なのだと思う。<br />
また、実績がない場合も、それに準ずる実績を提示することで、その可能性を示すことができる。  </p>

<h2 id="section-3">提案における顧客のベネフィットの共通項</h2>
<ul>
  <li>お前は誰なのか。信用できるのか。  </li>
  <li>困っていることを解決できるのか。  </li>
  <li>実際に効果があるのか。  </li>
  <li>コスト感<br />
    <ul>
      <li>導入しやすさ  </li>
      <li>値段  </li>
    </ul>
  </li>
</ul>

<p>面接でも、何かの商品を売る場合でも、上記は必要なのだと思った。  </p>

<h2 id="section-4">所感</h2>
<p>イイタイコト、キキタイコトでブレストすると、本当に相手が求める質問に辿りつけた。<br />
たとえばプレゼンや、面接でも、相手がどういうことを聞きたいか、などをある程度想定して、<br />
それを事前に考えてみることはかなり効果的だと思う。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create staging server using jvm with t2.micro]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/12/datomic-lein-for-ec2-t2-micro/"/>
    <updated>2015-04-12T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/12/datomic-lein-for-ec2-t2-micro</id>
    <content type="html"><![CDATA[<h1 id="create-staging-server-using-jvm-with-t2micro">Create staging server using jvm with t2.micro</h1>

<h2 id="jvm-is-required-many-memories">jvm is required many memories</h2>
<p>I ran command <code>lein ring server</code>, not-enough-memory error has raised.<br />
I googled and found solution.<br />
<a href="https://github.com/omcljs/om/issues/101">https://github.com/omcljs/om/issues/101</a>  </p>

<h2 id="memo-for-create-staging-on-ec2-instanceamazon-linux">memo for create staging on ec2 instance(amazon linux)</h2>

<p>something like this(picked up from history)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install leiningen
</span><span class="line">wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
</span><span class="line">mkdir bin
</span><span class="line">chmod a+x lein
</span><span class="line">./lein
</span><span class="line">ssh-keygen
</span><span class="line">export MY_DATOMIC_USERNAME="moge@gmail.com"
</span><span class="line">export MY_DATOMIC_PASSWORD="datomic_password"
</span><span class="line">sudo yum install java-1.8.0-openjdk.x86_64
</span><span class="line">ll /etc/alternatives/java
</span><span class="line">cd /etc/alternatives/
</span><span class="line">sudo mv /etc/alternatives/java{,.bak}
</span><span class="line">ln -s /usr/lib/jvm/jre-1.8.0/bin/java /etc/alternatives/java
</span><span class="line">sudo ln -s /usr/lib/jvm/jre-1.8.0/bin/java /etc/alternatives/java
</span><span class="line">lein ring server</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンジニアのための 確定拠出年金]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/12/401k-for-engineer/"/>
    <updated>2015-04-12T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/12/401k-for-engineer</id>
    <content type="html"><![CDATA[<h1 id="section">エンジニアのための 確定拠出年金</h1>

<h2 id="section-1">はじめに</h2>
<p>俺だ、 vimtax だ。<br />
今日は確定拠出年金について調べてみるぞ。  </p>

<h1 id="section-2">確定拠出年金について</h1>

<h2 id="section-3">確定拠出年金とは</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">確定拠出年金は、公的年金に上乗せするための選択肢として作られた年金制度です。  
</span><span class="line">60歳未満の自営業者（国民年金加入者）や企業等にお勤めの方（厚生年金保険加入者）を対象とし、  
</span><span class="line">公的年金等に確定拠出年金を上乗せすることで、老後の資産形成に役立てることができます。</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>引用:<a href="http://www.jp-bank.japanpost.jp/kojin/sonaeru/kakutei/kj_sn_kt_what.html">http://www.jp-bank.japanpost.jp/kojin/sonaeru/kakutei/kj_sn_kt_what.html</a>  </p>

<p>と書いてあるが、60歳まで下ろせない貯金で、そのままためておくこともできるし、<br />
資産運用することもできる、っていうかんじのものだ。  </p>

<h2 id="section-4">対象</h2>
<p>確定拠出年金には 個人型と、企業型がある。<br />
個人型にもパターンがあるが、この記事では、<br />
大抵のサラリーマンが該当するであろう個人型の第2号被保険者を扱うものとする。<br />
自分が何型なのかとかは、上記の ゆうちょのページを読んで、判別して欲しい。  </p>

<h2 id="section-5">メリット</h2>

<h3 id="section-6">所得税、住民税の控除</h3>
<p><a href="http://iitoushi-tanken-nisshi.hateblo.jp/entry/2013/12/26/022333" title="このリンク">このリンク</a>によると、<br />
年収が396万円以上695万円未満の人だと仮定すると(所得税が20%)、<br />
月額2万3千円(これが最大)を12ヶ月払い、年末調整で申告すると、 23,000 * 12 = 276000 の 20% = 4万6千円 が<br />
返ってくるらしい。これは馬鹿にできない。<br />
さらに、来年の住民税も 10%分(2万3千円) やすくなるらしい。<br />
合計6万9千円も得するようだ。<br />
これはやらない手はないのではないか、と思わせる。  </p>

<h3 id="section-7">資産運用による利益に対する非課税</h3>
<p><a href="https://www.toushin.or.jp/dc/labo/vol2_yamasaki/">https://www.toushin.or.jp/dc/labo/vol2_yamasaki/</a><br />
とかを見ればわかるように、資産運用で得られた利益が非課税であるのは大きい。  </p>

<h2 id="section-8">デメリット</h2>

<h3 id="section-9">手数料</h3>
<p><a href="http://shacho-radio.com/?p=1680">http://shacho-radio.com/?p=1680</a><br />
個人型の場合は手数料がかかるらしい。  </p>

<h4 id="sbi">SBI証券の例</h4>
<p>SBI証券の例を見てみる。<br />
[http://ad401k.sbisec.co.jp/kojin/01<em>04.html](http://ad401k.sbisec.co.jp/kojin/01</em>04.html)  </p>

<h4 id="section-10">最初だけかかる額</h4>
<p>加入時に 3,857円</p>

<h4 id="section-11">月額課金</h4>
<p>50万円になるまでは、324円 + 167円 = 491円(月額)かかる。<br />
50万円以上になると、 167円(月額)かかる。  </p>

<p>なので、初年度だと、<br />
491 * 12 + 3857 = 9749 円かかる。<br />
ただ、4万6千円の税制メリットと比べれば、良さそうに見える。  </p>

<h3 id="section-12">60歳まで下ろせない</h3>
<p>最大で預けたと仮定すると、基本的に 276000円(年額) が下ろせないということになる。<br />
276000円をつかって個人的に運用だったり、なにかの活動資金に割り当てて、儲けが出たときに、
課税された上での額が5万9千円以上なら、やる価値はあるように見える。  </p>

<p>ただ、急にお金が必要になる場合ってたぶんあるので、そこんところは考えなきゃダメだと思う。<br />
といっておきながらも、 SBI 証券のを見ていると年1回、額の変更は可能なのであまり考えなくてもいいかも。  </p>

<h1 id="section-13">所感</h1>
<p>急にお金が必要になるって、結婚式挙げるか、家買うか、病気なおすか、そのくらいじゃないのかな。<br />
お金(貯金)に余裕があるか、老後のための貯金に自信がない人は、是非やったらいいように見える。<br />
手元にお金があることのほうがメリットだろ！っていう人には向かないと思う。<br />
自分の場合は奨学金とかもまだあるから、その辺を繰り上げ返済したほうがメリットあるんじゃねぇかっていうのもある。<br />
とりあえず直近ではお金必要ないので、上限突っ込んでもいい気がするなぁ。<br />
だけど、年取ってから使うお金と、今使うべきお金って割りと違う気もするんだよなぁ。<br />
そういう意味で、手元にお金があるメリットっていうのは、額面通りじゃあないように思う。  </p>

<p>こういうお金の話って向き合うのスーパーめんどいけど、休みの日とか、時間があるときに少しずつまとめていくのは、<br />
結局得になるかもしれないとおもうと、今後もたまにはこういうのを調べていきたい。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シンプルな wiki 「gollum」 を評価した]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/05/gollum-eval/"/>
    <updated>2015-04-05T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/05/gollum-eval</id>
    <content type="html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<ul>
  <li>backlog はかなり緑だけど、よく出来てた  </li>
  <li>gollum は backlog と比べると、今の組織ではまだ早い  </li>
  <li>気合があれば gollum を修正して使うといいんじゃないの  </li>
</ul>

<h1 id="section">背景</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">【緩募】シンプルな wiki で無料で markdown がかけてデザインがイケてて添付ファイルが up できて backlog より便利なヤツ  </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こういう要求があった。<br />
今、会社で wikiシステムにも backlog を使っていて、よく出来ているんだけど、<br />
エンジニア的な視点からは非常に使いづらい気がしていて、<br />
markdown でもっとイイ感じのなにかが欲しかった。  </p>

<h2 id="backlog-">はたして backlog の何が不満なのか</h2>
<ul>
  <li>なんか全体的に緑なデザイン  </li>
  <li>markdown プレビューがだるい点  </li>
  <li>(重要)コンフルに比べて、小ページの概念がないこと<br />
    <ul>
      <li>いま気づいたけど、これがマジでイケてない。コンフルはそれが便利だったことに今気づいた。<br />
        <ul>
          <li>どうでもいいけど コンフルは検索がクソな印象がある。  </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>(重要)なんかロックインされちゃう点<br />
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>ぶっちゃけ疎にしておきたい。(エクスポート</td>
              <td>インポートできるようになっていてほしい(調べてない))</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>markdown という表記自体もある種ロックインだけど、markdown からの変換は期待できるし、現在のデファクトだからそれはそれでいいかと..  </li>
    </ul>
  </li>
</ul>

<h1 id="gollum-">それで気になっていた gollum を評価した</h1>
<p><a href="https://github.com/gollum/gollum">gollum</a> はシンプルな wiki で、かなり良く出来ていると思う。<br />
ただ、まだ実用にはたえないと思う。足りないと感じている点は以下に述べる。  </p>

<h2 id="section-1">足りないと感じている点</h2>
<ul>
  <li>pdf のファイルを添付したとき、それがプレビューにならない(pdf.js的な)。  </li>
  <li>ファイルを添付した場合、その画面に添付されているリストが出て欲しいが、出ない  </li>
  <li>ライブプレビュー機能はあるがずいぶん画面が変わってしまう。非エンジニアにとっては、ライブプレビューがない方が使いやすい(WYSWIG?だっけ、があるから)  </li>
  <li>だけど、ほんとはライブプレビューしたい。 docbase みたいなライブプレビューがある方が良い。  </li>
  <li>どのファイルが最近編集されたのか、というようなストリームが欲しいが、ない。  </li>
  <li>多くのボタンが英語で書かれている点。<br />
    <ul>
      <li>rails 的に i18n でおけばイイってことではないように見える。  </li>
    </ul>
  </li>
  <li>ディレクトリ一覧のファイルを見たいとき、URL を削ってディレクトリを指定するが、そのとき期待する動作は自分にとってはそのパス以下のファイル一覧であるが、見れない(ページ作成になる)。<br />
    <ul>
      <li>Apache とかでディレクトリの中が見えてるあれを期待してる(伝われ)  </li>
    </ul>
  </li>
  <li>あるファイルを見ている時、それ以下のファイルが木構造で見えていて欲しい、もしくは簡単に見えるようになってほしい<br />
    <ul>
      <li>コンフル小ページの発想  </li>
    </ul>
  </li>
  <li>Dropbox と連携とかするとウマイことできるかなぁと感じたけど、エクセルとかそういうのを web で見ようとしてダウンロードになっちゃって辛みみたいなのがかなりある  </li>
  <li>(自分はあまり必要としていないが)変更をメールで飛ばせる機能がない<br />
    <ul>
      <li>そういう意味で コンフルも一度編集したら勝手に記憶していて、メール通知が飛んでくる機能があった。まぁ悪くない。  </li>
    </ul>
  </li>
  <li>日本語での検索でエラーがでる(これはたぶんいろいろ追ったら普通に修正可能だと思う)  </li>
  <li>チームで使うなら、TOP のロゴみたいなやつは欲しい。  </li>
</ul>

<p>ただ、これらのほぼすべてについて、自分たち用に修正することができるのは、とんでもないメリットだ。<br />
ただ修正するには時間が必要であることは間違いない。  </p>

<h2 id="section-2">良いなと思っている点</h2>
<ul>
  <li>シンプルで動作が早く、unix な人にはかなり便利に使える点  </li>
  <li>ディレクトリを スラッシュで切っていく点は本当に便利(アトラシアンのコンフルとかで／とかで区切っていた風潮)  </li>
  <li>markdown でかける  </li>
  <li>h1, h2 がリンクになる点。これは素晴らしい。  </li>
  <li>(重要)すべてがファイルになっているので、なにかいい仕組みが出てきた時に気軽に変更できる点  </li>
</ul>

<h2 id="gollum--memo">gollum 使用方法 memo</h2>
<p><a href="https://github.com/gollum/gollum">https://github.com/gollum/gollum</a>
を見て欲しい。<br />
日本語対応は<a href="http://d.hatena.ne.jp/a_bicky/20140915/1410750993">この記事</a> を参考にした。<br />
なんか、普通に保存したときエラーがでるのは、 ググッた結果 Gemfile に<br />
<code>gem 'gollum-rugged_adapter' </code>
を追加してなんかウマイことやったら回避できた。  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># アップロード付き、 rugged はエラー回避で必要だった、 show-all でファイルが全部観れる
</span><span class="line">bundle exec gollum --allow-upload page --adapter rugged --show-all</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">所感</h2>
<p>こと、営業職の多い組織だと、素での gollum 使用はしんどいに違いない。<br />
backlog と比べて出来ないことが多すぎて、それ以上のメリットを享受できないからだ。<br />
だから、大抵の場合はたぶん既存で使っているやつのほうがいいかもしれない。  </p>

<p>エンジニアが多い職場で、本当に金がないなら、これは導入する価値はあると思う。<br />
(ぶっちゃけ、markdown 系共有のサービスで有料なものが多すぎると思う。<br />
エンジニアとしてビジネスする側で考えたら非常にいいなと思うけど、<br />
おかね払って使う立場から考えたら markdown が共有できたくらいでお金を払いたくないっていうのが<br />
僕の正直なキモチだ。)<br />
(そして逆に言うと、このオープンソースを使って自分が欲しい機能を付け足すだけで<br />
お金をとれるレベルのサービスを創れる気もする。fork して月額100円くらいで売り出したい。<br />
(まぁそんな時間ないんだけども。)
)
でも、今考えると gollum と、 qiita や docbase とかって微妙に立ち位置が違う気もしてきた。  </p>

<p><a href="https://support-project.org/knowledge_info/index">https://support-project.org/knowledge_info/index</a>
っていうオープンソースを作っている人がいて、これもかなり有用で、いい感じな気はしているんだけど、<br />
個人的に、Java で書かれているのがネックで、JVM を起動したり、Java でメンテするってのを考えると<br />
ちょっと敷居が高かったりするのがホンネだ。  </p>

<p>そういう意味で、何もなかったら gollum に contribute したいんだけど、<br />
ぶっちゃけそれ以上にやらなきゃならんことがたくさんあるのでちょっとしんどい。<br />
それでも少しずつは貢献できたらいいなと思う(したいに価値はないが)。  </p>

<p>この週末というか今日はかなりコレの評価に費やしたので記事にしておく。<br />
だれかにとってこの記事がためになれば幸いです。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出るときの解決法]]></title>
    <link href="http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker/"/>
    <updated>2015-04-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2015/04/02/rails_admin_ja_datepicker</id>
    <content type="html"><![CDATA[<h1 id="section">概要</h1>
<p>rails_admin の日付のピッカーで日本語が使われて argument out of range エラーが出る。<br />
原因は
<a href="http://qiita.com/kuboon/items/1d009e2f89729fe5db78">参考のQiita</a> 参照。  </p>

<p>自分の場合はうまくいかなかったので、ソースおったらここ直せば良さそうだったので<br />
ここを上書きする感じにした。  </p>

<h4 id="configinitializersrailsadminrb">config/initializers/rails_admin.rb</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Fix for bug when specified japanese datetime string
</span><span class="line"># http://qiita.com/kuboon/items/1d009e2f89729fe5db78
</span><span class="line">module RailsAdmin
</span><span class="line">  module Config
</span><span class="line">    module Fields
</span><span class="line">      module Types
</span><span class="line">        class Datetime &lt; RailsAdmin::Config::Fields::Base
</span><span class="line">          ## こいつを入れないと変更ない時にダメだった
</span><span class="line">          def form_value
</span><span class="line">            I18n.l(self.value, format:localized_date_format)
</span><span class="line">          end
</span><span class="line">          def localized_date_format
</span><span class="line">            "%Y-%m-%d"
</span><span class="line">          end
</span><span class="line">        end
</span><span class="line">      end
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上。  </p>
]]></content>
  </entry>
  
</feed>
