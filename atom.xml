<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vimtaku blog]]></title>
  <link href="http://vimtaku.github.io/atom.xml" rel="self"/>
  <link href="http://vimtaku.github.io/"/>
  <updated>2014-03-02T13:07:09+09:00</updated>
  <id>http://vimtaku.github.io/</id>
  <author>
    <name><![CDATA[vimtaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[devise に入門してみる]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/z_devise1/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/z_devise1</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p><a href="http://vimtaku.github.io/blog/2014/03/02/warden/">devise を知るには warden を知るべしと思ったので warden を勉強した。</a><br />
大体 warden はわかったので warden の仕組みをかぶせた認証エンジンである<br />
<a href="https://github.com/plataformatec/devise">devise</a> を触ってみる。  </p>

<h2 id="section-1">では早速、以下メモ。</h2>

<div>
  <pre><code class="bash">/Users/mac/try_devise/try_devise% be rails g devise:install
      create  config/initializers/devise.rb
      create  config/locales/devise.en.yml
===============================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root :to =&gt; &quot;home#index&quot;

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       &lt;p class=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;
       &lt;p class=&quot;alert&quot;&gt;&lt;%= alert %&gt;&lt;/p&gt;

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

===============================================================================</code></pre>
</div>

<p>bundle exec rails g devise User<br />
予めcreate database しておく<br />
bundle exec rake db:migrate  </p>

<p>すると出来上がる。</p>
<div>
  <pre><code class="sql">CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL DEFAULT '',
  `encrypted_password` varchar(255) NOT NULL DEFAULT '',
  `reset_password_token` varchar(255) DEFAULT NULL,
  `reset_password_sent_at` datetime DEFAULT NULL,
  `remember_created_at` datetime DEFAULT NULL,
  `sign_in_count` int(11) NOT NULL DEFAULT '0',
  `current_sign_in_at` datetime DEFAULT NULL,
  `last_sign_in_at` datetime DEFAULT NULL,
  `current_sign_in_ip` varchar(255) DEFAULT NULL,
  `last_sign_in_ip` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_users_on_email` (`email`),
  UNIQUE KEY `index_users_on_reset_password_token` (`reset_password_token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</code></pre>
</div>

<p>config/routes.rb に行が追加されている。  </p>
<blockquote><p>devise_for :users</p></blockquote>

<p>localhost:3000 にアクセスすると<br />
<img src="http://gyazo.com/ff5a659072c28ff0934f6ec51ca74dc3.png" /><br />
/users/にものすごくたくさんいろいろできている。  </p>

<p>login した後の、 users/edit とか<br />
<img src="http://gyazo.com/27ca0f5038500c7796c51c81973755a9.png" />  </p>

<h2 id="view-">独自の view を使うには</h2>

<p>独自の view を使うには、<br />
scope (admin モデルと user モデルがいる場合に使用)のロジックを使う方法と、<br />
view を単純に上書きする方法がある。<br />
当然、用途に応じて admin と user のモデルを使うんなら scope を使えば良い。<br />
単純にひとつだけなら、 view を上書きする方法が良い。  </p>

<p>view を上書きする方法では、<br />
be rails generate devise:views して、<br />
devise/sessions/new.html.erb<br />
を編集などすれば良い。  </p>

<p>scope を使う方法では、<br />
config/initializers/devise.rb に<br />
config.scoped_views = true<br />
を追加して、<br />
be rails generate devise:views users<br />
すれば、<br />
users/sessions/new.html.erb<br />
などが使われるようになる。  </p>

<h2 id="section-2">所感</h2>
<p>全然入門できてない。続きはまた書く。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise を知るにはまず warden を知るが良い]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/warden/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/warden</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>devise という gem があるが、warden をベースにした認証の仕組みだということだった。<br />
devise を知るには、まず warden を知らなければなるまい。<br />
そう思った俺は warnden を rack ベースでいじってみることにした。  </p>

<h2 id="warden-">warden とは</h2>

<p>これのこと。<br />
<a href="https://github.com/hassox/warden">https://github.com/hassox/warden</a><br />
wiki が充実していたのでかなりわかりやすかった。<br />
<a href="https://github.com/hassox/warden/wiki">https://github.com/hassox/warden/wiki</a>  </p>

<h2 id="section-1">とりあえずやってみる、以下メモ書き。</h2>

<p>config.rb</p>
<div>
  <pre><code class="ruby">require 'rack'
require 'pp'
require 'warden'

class Application

  def call(env)
    request = Rack::Request.new(env)
    response = if request.path_info = '/'
                 body = &quot;#{request.request_method}: Hello! #{request.params['name']}!&quot;
                 Rack::Response.new(body, &quot;200&quot;, {'Content-Type' =&gt; 'text/plain'})
               else
                 Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
               end
    response.finish
  end

end


app = Rack::Builder.new do
  use Rack::Session::Cookie, :secret =&gt; &quot;replace this with some secret key&quot;

  use Warden::Manager do |manager|
    manager.default_strategies :password, :basic
    #manager.failure_app = BadAuthenticationEndsUpHere
  end

  run lambda { |env| Application.new().call(env) }
end

run app</code></pre>
</div>

<p>基本的に, default_strategies で定義した順に行われて、一つでも成功したら成功になる模様。  </p>

<p>cookie セットされている<br />
<img src="http://gyazo.com/be238cfa0282a588b1fad41ae91dd804.png" />
<img src="http://gyazo.com/95a09e0d872829e8e0fef2204728cdaa.png" /></p>

<p>試しに nil を返した時。<br />
<img src="http://gyazo.com/de50e8c049809e31a41231c7b6fb1cd4.png" /></p>

<p>明らかに error ハンドラがないぞッて感じのエラーが出ているので、<br />
雰囲気でBadAuthenticationEndsUpHere クラスを足してみる。  </p>

<div>
  <pre><code class="ruby">class BadAuthenticationEndsUpHere
  def self.call(env)
    p env
    p &quot;BadAuthenticationEndsUpHere&quot;
    Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
  end
end</code></pre>
</div>

<p>思い通りだ。 error ハンドラとして BadAuthenticationEndsUpHere クラスが呼ばれた。<br />
<img src="http://gyazo.com/f44ae6997b92aab707291851645c565a.png" /></p>

<p>それでは、正しく期待している serialize_from_session が動くように User.get を定義する。  </p>

<div>
  <pre><code class="ruby">def get(id)
    ## 永続化されたものから引いてうまく引けたと過程して返す
    return User.new(id)
  end</code></pre>
</div>

<p>1回目、とりあえずログインされるはず。<br />
<img src="http://gyazo.com/9a31a0967443614441eeb729e34d6ba7.png" /></p>

<p>サーバのデバッグログ  </p>
<blockquote><p>&#8220;Authenticate!!!!!!!!!!!!&#8221;<br />&#8220;serialize into session!!!!!!!!!!!!&#8221;</p></blockquote>
<p>ログから、セッションに値が仕込まれた模様。</p>

<p>2回目、セッションから値を引いてみる。<br />
<img src="http://gyazo.com/e5db07a78d1f75119ffa76740d10032b.png" />
あれ、ミス。。あ、 serialize_from_session が読んでるのは User.get(id) だから class method だった。。<br />
修正して再チャレンジ。  </p>

<p>ちゃんときたっぽい！<br />
<img src="http://gyazo.com/c1225bebd28bd178e9c9aaa5967d8c89.png" /></p>

<p>デバッグログ</p>
<blockquote><p>&#8220;Authenticate!!!!!!!!!!!!&#8221;<br />&#8220;serialize from session!!!!!!!!!!!!&#8221;<br />127.0.0.1 - - [01/Mar/2014 18:54:54] &#8220;GET /?password=hoge HTTP/1.1&#8221; 200 13 0.0022</p></blockquote>

<p>get されている模様！  </p>

<p>これで user にアクセスできる。  </p>
<div>
  <pre><code class="ruby">p &quot;warden user is &quot;
p env['warden'].user</code></pre>
</div>

<p>ドキュメントを読むと、<br />
Warden::Strategies で定義した #valid? に関しては、定義されてようがなかろうが呼ばれるらしい。  </p>

<p>試しにこの時点で #valid? で nil を返すと次の strategy にチャレンジがうつった。<br />
すべての strategy で失敗したら、 failure_app が呼ばれる。  </p>

<p>特筆すべきは、ここで呼ばれるのが /unauthenticated だということだ。<br />
この url http://localhost:9292/?password=hoge を叩くと<br />
127.0.0.1 - - [01/Mar/2014 19:01:45] “GET /unauthenticated?password=hoge HTTP/1.1” 404 9 0.0012<br />
がデバッグログに表示されている。  </p>

<div>
  <pre><code class="ruby">class BadAuthenticationEndsUpHere
  def self.call(env)
    p &quot;in BadAuthenticationEndsUpHere!!!!!!!!!!!!&quot;
    request = Rack::Request.new(env)

    p &quot;request.path_info is &quot;
    p request.path_info

    Rack::Response.new('Not Found', &quot;404&quot;, {'Content-Type' =&gt; 'text/plain'})
  end
end</code></pre>
</div>

<p>をデバッグとして試しに書いてみた。<br />
やはり、内部的に path_info を unauthenticated に書き換えているようだ。<br />
これは lib/warden/manager.rb のあたりを見ればわかる。<br />
def process_unauthenticated(env, options={})<br />
や<br />
def call_failure_app(env, options = {})<br />
で実際にそのように書かれている。<br />
と思ったら<br />
<a href="https://github.com/hassox/warden/wiki/Failures">https://github.com/hassox/warden/wiki/Failures</a><br />
ここにめっちゃそのように書いてあった。  </p>

<p>halt! や success など便利なメソッドが strategy で使える模様。<br />
<a href="https://github.com/hassox/warden/wiki/Strategies">https://github.com/hassox/warden/wiki/Strategies</a>
詳細はコチラを参照。  </p>

<p>このような認証の仕組みが rack で使えて、 認証自体が strategy パターンになっているので<br />
いい感じに他の人が作った strategy を使えるようになっている。  </p>

<p><a href="https://github.com/hassox/warden/wiki/Setup#advanced-setup-with-scopes">https://github.com/hassox/warden/wiki/Setup#advanced-setup-with-scopes</a><br />
これを見ると、warden は、認証の scope を分けられるようになっている。<br />
それぞれの認証で、違うロジックを定義して、認証できるようだ。<br />
特に指定がない場合は、 env[‘warden’] は user として認証する。<br />
しかし、これは上書きができるようだ。<br />
default の設定上書きとは別に、明示的にスコープを指定することもできる。  </p>
<div>
  <pre><code class="ruby">env['warden'].authenticate! :scope =&gt; :api</code></pre>
</div>

<h3 id="callback">callback</h3>

<div>
  <pre><code class="ruby">&quot;serialize into session!!!!!!!!!!!!&quot;
&quot;after_set_user caled!&quot;
&quot;auth is&quot;
Warden::Proxy:70106638122900 @config={:default_scope=&gt;:default, :scope_defaults=&gt;{}, :default_strategies=&gt;{:_all=&gt;[:password, :basic]}, :intercept_401=&gt;true, :failure_app=&gt;BadAuthenticationEndsUpHere}
&quot;logout called!!!!!!!!!!!&quot;
&quot;in BadAuthenticationEndsUpHere!!!!!!!!!!!!&quot;
&quot;request.path_info is &quot;
&quot;/unauthenticated&quot;
127.0.0.1 - - [01/Mar/2014 19:55:10] &quot;GET /unauthenticated?password=hoge HTTP/1.1&quot; 404 9 0.0025</code></pre>
</div>

<p>これも結構参考になる。<br />
<a href="https://gist.github.com/lukesutton/107966">https://gist.github.com/lukesutton/107966</a></p>

<h2 id="section-2">所感</h2>
<p>warden 大体わかった。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3月が来た]]></title>
    <link href="http://vimtaku.github.io/blog/2014/03/02/life-march-2/"/>
    <updated>2014-03-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/03/02/life-march-2</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>一週間開いてしまった。<br />
やっぱ life 的なブログは毎週書かないとダメな気がしてきた。  </p>

<p>先週はお腹の調子がひたすら悪くてしんどかった。<br />
rails っていう覚えゲーをひたすらこなしているんだけど<br />
とにかく雪崩のように覚えることがあって大変だ。  </p>

<p>でも二回目以降(知識が増えたら)もっと楽になるだろうから今だけだと思って頑張ろう。  </p>

<p>ついに花粉が本気出し始めた。<br />
早めに病院に行ってこようと思う。<br />
ちなみにロラタジンってくすりが俺にとってはすごく効いた(去年)。  </p>

<h2 id="section-1">困っていること</h2>
<p>筋トレのモチベーションがどうも上がらない。<br />
太る一方だし。。<br />
あと ruby に駆り立てられてすごい頭を使ってるからずいぶん疲れている。<br />
ruby の勉強というか調査とかのせいであんまり本を最近読めてない。<br />
これは改善すべきだ。  </p>

<h2 id="section-2">勉強途中経過</h2>

<h3 id="section-3">進んでない</h3>
<ul>
  <li>rails tutorial 6 まで</li>
</ul>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>DDD ショートバージョン</li>
  <li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">http://www.infoq.com/jp/minibooks/domain-driven-design-quickly</a></li>
  <li>論語入門</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/3/1)chef-solo 入門
    <ul>
      <li>ザーッと目を通し直したらほぼ理解出来てたので読み終えたことにする</li>
    </ul>
  </li>
  <li>(2014/3/1)パーフェクトルビー
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factory_girl_active_support_concern]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/24/factory-girl-active-support-concern/"/>
    <updated>2014-02-24T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/24/factory-girl-active-support-concern</id>
    <content type="html"><![CDATA[<h2 id="section">ぼやき</h2>
<p>rspec でテストを書いていて、ある(concern)モジュールを include した active record なクラスで、<br />
どうしても、ActiveSupport::Concern を include したところに インスタンスメソッドを定義しても<br />
NoMethodError(undefined method) になってしまう..  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日経Linux 2月号を読んだ]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/16/nikkei-linux-feb/"/>
    <updated>2014-02-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/16/nikkei-linux-feb</id>
    <content type="html"><![CDATA[<h2 id="section">概要</h2>
<p><a href="http://www.amazon.co.jp/%E6%97%A5%E7%B5%8C-Linux-%E3%83%AA%E3%83%8A%E3%83%83%E3%82%AF%E3%82%B9-2014%E5%B9%B4-02%E6%9C%88%E5%8F%B7/dp/B00H8X84E6">日経Linux 2月号(2014)</a>
に、カーネルの特集記事があったので買って読んでみた。<br />
今まで知らなかった部分とか、便利そうなことについて、以下に記載する。  </p>

<h2 id="section-1">メモリ管理</h2>
<p>buddy システム, スラブアロケータについて書かれていた。<br />
この本よりもっと詳しく書かれたページを発見したのでコチラを参照。<br />
<a href="http://www.coins.tsukuba.ac.jp/~yas/coins/os2-2011/2012-01-17/">http://www.coins.tsukuba.ac.jp/~yas/coins/os2-2011/2012-01-17/</a></p>

<h2 id="systemtap">systemtap</h2>
<p>system tap とは <a href="https://access.redhat.com/site/ja/node/289453">https://access.redhat.com/site/ja/node/289453</a> にある通り  </p>

<blockquote><p>実行している Linux カーネルで簡易情報を取得できるようにする革新的なツールです。</p></blockquote>
<p>である。  </p>

<h3 id="install-centos">install 方法(@CentOS)</h3>
<p>vagrant で建てた CentOS を使ってやってみる。<br />
Vagrantfile 的に<br />
config.vm.box = “Berkshelf-CentOS-6.3-x86_64-minimal”<br />
この box を使っている人は以下の通りでインストールできると思います。  </p>

<div>
  <pre><code class="bash">sudo yum -y install systemtap
cd /tmp
wget http://debuginfo.centos.org/6/x86_64/kernel-debuginfo-common-x86_64-2.6.32-279.el6.x86_64.rpm
wget http://debuginfo.centos.org/6/x86_64/kernel-debug-debuginfo-2.6.32-279.el6.x86_64.rpm
sudo yum install kernel-debuginfo-common-x86_64-2.6.32-279.el6.x86_64.rpm
sudo yum install kernel-debug-debuginfo-2.6.32-279.el6.x86_64.rpm

# これで stap がつかえる
stap

## 追記
(これだと probe.kernel が使えないっぽい.. 要調査。)</code></pre>
</div>

<p>あとは
<a href="http://sourceware.org/systemtap/examples/">http://sourceware.org/systemtap/examples/</a><br />
ここから<br />
vm.tracepoints.stp や, sched_switch.stp を落として来て実行できる。  </p>

<p>(参考)<br />
<a href="http://stts.hatenablog.com/entry/20090614/1244952417">http://stts.hatenablog.com/entry/20090614/1244952417</a>  </p>

<h2 id="section-2">プロセスのメモリ割付について</h2>
<p>/proc/[processId]/maps (これをメモリーマップと呼ぶ。)を参照すれば、どのようにメモリが割り付けられているかがわかる。  </p>

<div>
  <pre><code class="bash">vi hoge.c
-----
#include &lt;stdio.h&gt;

int main(void) {
  char hoge[4096] = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;

printf(&quot;sleep start\n&quot;);
  sleep(500000);
printf(&quot;sleep stop\n&quot;);
  return 0;
}

ps aux | grep a.out
vagrant  19157  0.0  0.0   3928   408 pts/1    S+   04:41   0:00 ./a.out
vagrant  19164  0.0  0.0 107456   948 pts/0    S+   04:42   0:00 grep a.out


cd /proc/
cat /proc/19157/maps

00400000-00402000 r-xp 00000000 fd:00 3590                               /tmp/a.out
00601000-00602000 rw-p 00001000 fd:00 3590                               /tmp/a.out
7fdf912e5000-7fdf91470000 r-xp 00000000 fd:00 3071                       /lib64/libc-2.12.so
7fdf91470000-7fdf9166f000 ---p 0018b000 fd:00 3071                       /lib64/libc-2.12.so
7fdf9166f000-7fdf91673000 r--p 0018a000 fd:00 3071                       /lib64/libc-2.12.so
7fdf91673000-7fdf91674000 rw-p 0018e000 fd:00 3071                       /lib64/libc-2.12.so
7fdf91674000-7fdf91679000 rw-p 00000000 00:00 0
7fdf91679000-7fdf91699000 r-xp 00000000 fd:00 3437                       /lib64/ld-2.12.so
7fdf9188e000-7fdf91891000 rw-p 00000000 00:00 0
7fdf91896000-7fdf91898000 rw-p 00000000 00:00 0
7fdf91898000-7fdf91899000 r--p 0001f000 fd:00 3437                       /lib64/ld-2.12.so
7fdf91899000-7fdf9189a000 rw-p 00020000 fd:00 3437                       /lib64/ld-2.12.so
7fdf9189a000-7fdf9189b000 rw-p 00000000 00:00 0
7fff2a0dc000-7fff2a0f1000 rw-p 00000000 00:00 0                          [stack]
7fff2a1b4000-7fff2a1b5000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</code></pre>
</div>

<p>下から見ると、 systemcall が呼ばれる領域(カーネル仮想空間)があるのと、 stack が積まれる領域があるのと、<br />
shared object がリンクされている領域と、 テキスト(プログラム)が格納されている領域があるのが見て取れる。  </p>

<p>左端から、仮想アドレス、アクセス属性、データオフセット、 デバイスのメジャー番号とマイナー番号、 inode, ファイル名とのこと。  </p>

<h2 id="section-3">カーネル時計</h2>
<p>Linux カーネルは 起動時には、PC の内蔵時計を使用するが、それ移行は独自のカーネル時計を使用する。<br />
ミリ秒からナノ秒の処理が必要であるため。  </p>

<h2 id="io">I/Oスケジューラー</h2>
<p>入出力するブロックデータを並び替えて入出力を高速化できるもの。  </p>

<p><a href="http://city.hokkai.or.jp/~hachikun/IOScheduler.html">http://city.hokkai.or.jp/~hachikun/IOScheduler.html</a><br />
<a href="[http://city.hokkai.or.jp/~hachikun/IOScheduler.html]">http://www.valinux.co.jp/technologylibrary/document/linuxkarnel/cfq0001/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Workbench で Rails の migration ファイルを吐き出す]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/16/mysql-workbench-rails/"/>
    <updated>2014-02-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/16/mysql-workbench-rails</id>
    <content type="html"><![CDATA[<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">概要</a></li>
  <li><a href="#mysql-workbench--ss">Mysql workbench の SS</a></li>
  <li><a href="#section-1">手順</a>    <ul>
      <li><a href="#mysql-workbench-rails-exporter-plugin-">1. mysql workbench rails exporter plugin をダウンロード</a></li>
      <li><a href="#mysql-workbench-">2. mysql workbench のインストール</a></li>
      <li><a href="#section-2">3. プラグインのインストールと実行</a></li>
    </ul>
  </li>
  <li><a href="#section-3">所感</a></li>
</ul>

<h2 id="section">概要</h2>
<p>mysql workbench っていう MySQL のER図を作るみたいなツールがある。<br />
CUI硬派のため、いままでは使ったことなかったけど、<br />
今回はじめて使ってみると結構いい感じだった。<br />
それを rails のマイグレーションファイルに吐き出したいなぁと思っていたら、<br />
それっぽいプラグインを見つけたので、その方法を書いておく。  </p>

<h2 id="mysql-workbench--ss">Mysql workbench の SS</h2>
<p><img src="http://gyazo.com/f15f8824bbfdd3bb3dccd514b697f5e5.png" /></p>

<h2 id="section-1">手順</h2>

<h3 id="mysql-workbench-rails-exporter-plugin-">1. mysql workbench rails exporter plugin をダウンロード</h3>
<p><a href="http://sourceforge.net/projects/railsexporter/">http://sourceforge.net/projects/railsexporter/</a>
ここから、 rails exporter を落としてくる。  </p>

<h3 id="mysql-workbench-">2. mysql workbench のインストール</h3>
<p>新しい workbench ツールに、上記プラグインが対応していなかったので、 ちょっと古いやつで試したら動作した。<br />
<a href="http://dev.mysql.com/downloads/tools/workbench/">http://dev.mysql.com/downloads/tools/workbench/</a> から、
Looking for previous GA versions? をたどると、 mysql-workbench-gpl-5.2.47-osx-i686.dmg  が落とせる。<br />
これをインストールする。  </p>

<h3 id="section-2">3. プラグインのインストールと実行</h3>
<p>mysql workbench のタブから、 “SCRIPTING &gt; INSTALL PLUGIN/MODULE …” で、展開した 1 の zip の .lua ファイルを選択する。<br />
mysql workbench を再起動して、 “PLUGINS &gt; CATALOG &gt; Rails Exporter 1.0.1” を選択すれば、あら不思議、<br />
$HOME に Rails_Explorer ディレクトリが。<br />
db と model が出来上がるので、あとはそれをよしなに利用すれば良い。  </p>

<h2 id="section-3">所感</h2>
<p>実際、このあとに、 mysql に接続して、ER図を吐き出すやつやってみたけど、<br />
まぁ当然、テーブル的にリレーションしてないわけだから、ER図もリレーションしてなくて、見づらい。<br />
raisl には ERD 生成ツールみたいなのがあるらしいので、<br />
最初の一回くらいしか使えないかもしれないけど、ないよりはいいかなぁ。<br />
ちなみに出来上がるファイルは若干修正が必要だと思う。<br />
ちゃんと mwb のほうで書いていれば大丈夫かもだけど。。<br />
mwb の方で、カラムに複数行のコメントを入れておくと、出力された時にダメなので、<br />
コメントを1行にするか、複数行の場合は先頭に#を入れると良いかもしれない。<br />
あと、 unsigned int を作りたいけど、うまいことやってくれなくて、<br />
gem “activerecord-mysql-unsigned”, “~&gt; 0.0.1”
これを入れて、手動で integer のカラムに :unsgined =&gt; true した。  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2/16]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/16/life-feb-16/"/>
    <updated>2014-02-16T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/16/life-feb-16</id>
    <content type="html"><![CDATA[<h2 id="section">先週振り返り</h2>
<p>先週も solr 力をかなり高める感じだった。<br />
docker がリアルに流行り始めているので、本格的に勉強したいところ。<br />
でも家のネットワークが遅くてちょっと厳しいんだよなぁ。<br />
なんかお腹の調子がずっと悪くてしんどかった。<br />
あと、雪の日に自宅待機したら迷惑かけてしまったので、今後は極力休まない。  </p>

<p>あんまり本が読めなかったので、気合入れて読む。<br />
あと、どうでもいいけど、 MBA の容量が 128GB で 94% とか言ってて積んでる感ある。  </p>

<h2 id="section-1">土日振り返り</h2>
<p>あんまり多く時間を取れなかったが、日経 linux 読んだのと、workbench の件をそこそこやった。  </p>

<h2 id="section-2">勉強途中経過</h2>

<h3 id="section-3">進んでない</h3>
<ul>
  <li>rails tutorial 6 までやった</li>
</ul>

<h2 id="section-4">読書途中経過</h2>

<h3 id="section-5">進んだ</h3>
<ul>
  <li>詳解UNIXプログラミング第8章まで読んだ</li>
</ul>

<h3 id="section-6">積んでる</h3>
<ul>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>chef-solo 入門 #23 まで読んだ(どっかで手を動かしながらやる)</li>
  <li>パーフェクトルビー15章まで読んだ
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
  <li>論語入門</li>
</ul>

<h3 id="section-7">読み終えた</h3>
<ul>
  <li>(2014/2/16)(さらっと)日経Linux 2月号</li>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll から octopress に10 分で移行する]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/14/octopress/"/>
    <updated>2014-02-14T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/14/octopress</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>
<p>デザインが見づらいって言われたので辛くなったから、<br />
octopress にノリで移行してみた。<br />
当方、 jekyll-bootstrap を使っていて、 octopress も普通に jekyll 使っているので<br />
問題なく移行できると思ったら移行できた。  </p>

<h2 id="section-1">手順</h2>
<p>大体こんなかんじでいける。空気さえ読めれば行ける感じ。  </p>

<div>
  <pre><code class="bash">git clone git://github.com/imathis/octopress.git octopress
cd octopress/
bundle install
rake install
rake preview
rake -T
vim config.rb
rake preview
rake setup_github_pages

## Rakefile の L269 の git push を -f するようにした。すでにレポジトリがあったから。
vim Rakefile

rake deploy

cp -a $HOME/jekyll-bootstrap/_posts/* .

## JB setup を記事に埋め込んでいるのがあったのでそれをケア(互換性のため)
mkdir $HOME/octopress/source/includes/JB
cp -a $HOME/jekyll-bootstrap/_includes/JB/setup $HOME/octopress/source/includes/JB</code></pre>
</div>

<h2 id="section-2">ちなみに</h2>
<p>テーマはコチラを使わせてもらった。<br />
<a href="http://zespia.tw/Octopress-Theme-Slash/">http://zespia.tw/Octopress-Theme-Slash/</a><br />
how to install 通りにやれば適用できる。  </p>

<p>Octopress テーマ集みたいなのはコチラ。<br />
<a href="http://opthemes.com/">http://opthemes.com/</a>  </p>

<h2 id="section-3">参考資料</h2>

<p><a href="http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/">http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更 Solr 入門]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/13/solr-sample/"/>
    <updated>2014-02-13T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/13/solr-sample</id>
    <content type="html"><![CDATA[
<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">この記事について</a></li>
  <li><a href="#section-1">予備知識</a>    <ul>
      <li><a href="#apache-solr-">Apache Solr とは</a></li>
      <li><a href="#lucene-">Lucene とは</a></li>
    </ul>
  </li>
  <li><a href="#section-2">スキーマを作ってみよう</a>    <ul>
      <li><a href="#section-3">フィールドタイプについて</a></li>
      <li><a href="#section-4">フィールドについて</a>        <ul>
          <li><a href="#section-5">テキストフィールドの定義</a></li>
          <li><a href="#section-6">ダイナミックフィールド</a></li>
          <li><a href="#section-7">ユニークキーフィールド</a></li>
          <li><a href="#section-8">コピーフィールド</a></li>
        </ul>
      </li>
      <li><a href="#core-admin--core-">core admin で core を作成</a></li>
    </ul>
  </li>
  <li><a href="#section-9">サンプルデータを入れてみよう</a></li>
  <li><a href="#dihdataimporthandler-">DIH(DataImportHandler) について</a>    <ul>
      <li><a href="#solr-config-">solr config に記述する</a></li>
      <li><a href="#mysql--connector-">mysql の connector をダウンロードして設置</a></li>
      <li><a href="#mysql--db-data-configxml-">mysql の設定, db-data-config.xml の設定など</a></li>
    </ul>
  </li>
  <li><a href="#deltaquery-">deltaQuery について</a>    <ul>
      <li><a href="#deltaquery--parentdeltaquery-">deltaQuery と parentDeltaQuery の関係</a></li>
    </ul>
  </li>
  <li><a href="#dih--javascript-">DIH の直前で Javascript でデータを加工する</a>    <ul>
      <li><a href="#updatehandler--updatechain">UpdateHandler と UpdateChain</a></li>
      <li><a href="#section-10">なんかうまくいかない場合</a></li>
    </ul>
  </li>
  <li><a href="#url">参考URL</a></li>
</ul>

<h2 id="section">この記事について</h2>
<p>今更ながら Solr に興味が出てきたので、自分用にまとめてみる。<br />
あくまで自分用なので、ある程度わかっている人じゃないと本記事は無意味です。恐縮ながら。<br />
前提として、 この記事は <a href="http://www.amazon.co.jp/Apache-Solr%E5%85%A5%E9%96%80-~%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3-Software-Design/dp/4774161632">改訂新版 Apache Solr入門 ~オープンソース全文検索エンジン</a> を読みながら進めた。   </p>

<p>まずは、予備知識として Apache Solr とはなにか、 Lucene とはなにかについて書く。<br />
次に、スキーマを作って、サンプルデータ を 手動でのデータインポートで index に登録する手順について書く。<br />
手動でのデータインポートは大変なので、mysql からデータをインポートするクローラ(DIH)について書く。
最後に、 MySQL にある json を保存するカラムのデータを、 Javascript を使って整形し、 index に保存することについて書く。  </p>

<h2 id="section-1">予備知識</h2>

<h3 id="apache-solr-">Apache Solr とは</h3>
<p>全文検索システムである。<br />
全文検索エンジン Lucene をベースに、管理画面やキャッシュ、クラスタリングなどの機能がある。<br />
ちなみに Java で書かれている。<br />
<a href="http://ja.wikipedia.org/wiki/Apache_Solr">http://ja.wikipedia.org/wiki/Apache_Solr</a></p>

<h3 id="lucene-">Lucene とは</h3>
<blockquote><p>Lucene（ルシーン）は、Javaで記述された全文検索ソフトウェアである。<br />あらかじめ蓄積した大量のデータから、指定したキーワードを探し出す機能を持つ。Javaのクラスライブラリとして提供される。</p></blockquote>
<p><a href="http://ja.wikipedia.org/wiki/Lucene">http://ja.wikipedia.org/wiki/Lucene</a>
なるほど。</p>

<h2 id="section-2">スキーマを作ってみよう</h2>
<p>スキーマを作って、サンプルデータを入れてみる。<br />
ここでは、 料理人が複数いて、自分の料理をうるみたいなものを想定する。<br />
Solr の schema.xml で、スキーマを定義することができる。  </p>

<p>以下に、 schema.xml の fileds の設定例を載せる。  </p>
<div>
  <pre><code class="xml">&lt;fields&gt;
    &lt;field name=&quot;recipe_id&quot;   type=&quot;int&quot;     indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot;/&gt;
    &lt;field name=&quot;chef&quot;        type=&quot;text_ja&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;
    &lt;field name=&quot;recipe_name&quot; type=&quot;text_ja&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;
    &lt;field name=&quot;genre&quot;       type=&quot;text_ja&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot;/&gt;
    &lt;field name=&quot;price&quot;       type=&quot;int&quot;     indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;
    &lt;field name=&quot;_version_&quot;   type=&quot;long&quot;    indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;
  &lt;/fields&gt;</code></pre>
</div>

<h3 id="section-3">フィールドタイプについて</h3>
<ul>
  <li>fieldType は自分で xml を用いて定義することができる</li>
  <li>それらの名前付けとかには習慣がある</li>
  <li>基本的な型については定義されているので、それを利用する</li>
</ul>

<h3 id="section-4">フィールドについて</h3>

<h4 id="section-5">テキストフィールドの定義</h4>
<ul>
  <li>name は filed 名</li>
  <li>type は filedType</li>
  <li>indexed は、 このフィールドを検索対象、ソート対象、 ファセット対象にするか(true:する)</li>
  <li>stored は、 このフィールドの値をそのまま index するか(true:する)</li>
  <li>required は、 必須かどうか</li>
  <li>multivalued は、 複数値を持てるかどうか</li>
  <li>omitNorms は、 検索したドキュメントの長さによる重み付け
    <ul>
      <li>(短ければ当然、見つけるものに近いのでポイントが高く、逆に長ければ、それにヒットする確率が高いので値は低い。)</li>
    </ul>
  </li>
</ul>

<h4 id="section-6">ダイナミックフィールド</h4>
<ul>
  <li>動的にフィールド名が決定するもの</li>
  <li>schema.xml を変更しなくても、そのフィールド名を登録したり検索したりすることができるようになる</li>
</ul>

<h4 id="section-7">ユニークキーフィールド</h4>
<ul>
  <li>文書内で unique に特定できるようにするフィールド</li>
  <li>差分更新したい場合には必須</li>
  <li>指定はオプション</li>
  <li>
    <uniquekey>url</uniquekey>
  </li>
</ul>

<h4 id="section-8">コピーフィールド</h4>
<ul>
  <li>ドキュメントへのインデックス登録時に copyField の source から dest へコピーする</li>
  <li>dest に同じものを複数指定する場合は multiValued が true である必要がある</li>
</ul>

<h3 id="core-admin--core-">core admin で core を作成</h3>
<p>collection1 をコピーして, schema.xml を編集。<br />
elevate が評価されてダメっぽかったのでコメントアウト。<br />
すると、うまく load できた。</p>

<h2 id="section-9">サンプルデータを入れてみよう</h2>
<p>だいたいこんなかんじの data.json を用意して</p>
<div>
  <pre><code class="json">[                                                                              
{                                                                              
    &quot;recipe_id&quot;:&quot;1&quot;,                                                           
    &quot;chef&quot;:&quot;vimtaku&quot;,                                                          
    &quot;recipe_name&quot;:&quot;vim の炒めもの&quot;,                                            
    &quot;genre&quot;:[&quot;和食&quot;, &quot;洋食&quot;],                                                  
    &quot;price&quot;:980                                                                
},                                                                             
{                                                                              
    &quot;recipe_id&quot;:&quot;2&quot;,                                                           
    &quot;chef&quot;:&quot;noro&quot;,                                                             
    &quot;recipe_name&quot;:&quot;emacs 焼き&quot;,                                                
    &quot;genre&quot;:[&quot;和食&quot;, &quot;中華&quot;],                                                  
    &quot;price&quot;:500                                                                
},                                                                             
{                                                                              
    &quot;recipe_id&quot;:&quot;3&quot;,                                                           
    &quot;chef&quot;:&quot;sublime&quot;,                                                          
    &quot;recipe_name&quot;:&quot;sublime 揚げ&quot;,                                              
    &quot;genre&quot;:[&quot;洋食&quot;],                                                          
    &quot;price&quot;:250                                                                
}                                                                              
]</code></pre>
</div>

<div>
  <pre><code class="bash">curl 'http://localhost:8983/solr/vimtaku/update/json?commit=true' --data-binary @data.json -H 'Content-type:application/json;charset:utf-8'</code></pre>
</div>

<p>これで データ登録が完了する。  </p>

<h2 id="dihdataimporthandler-">DIH(DataImportHandler) について</h2>
<p>DIH は DataSource, EntityProccssor, そして設定ファイル(data‐config.xml) から成る。<br />
DIH を使うための設定は、 solrconfig.xml と DIHの設定ファイル data―config にある。  </p>

<h3 id="solr-config-">solr config に記述する</h3>
<div>
  <pre><code class="xml">&lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DatalmportHandler&quot;&gt;
&lt;lst name=&quot;defaults&quot;&gt;
  &lt;str name=&quot;config&quot;&gt;db-data-config.xml&lt;/str&gt;
&lt;/lst&gt;
&lt;/requestHandler&gt;</code></pre>
</div>

<h3 id="mysql--connector-">mysql の connector をダウンロードして設置</h3>
<p>mysql-connector-java-5.1.29-bin.jar を <a href="http://dev.mysql.com/downloads/connector/j/">http://dev.mysql.com/downloads/connector/j/</a>から落としてきて
dist 以下に設置する。</p>

<h3 id="mysql--db-data-configxml-">mysql の設定, db-data-config.xml の設定など</h3>
<p>そしてだいたいこんなかんじに設置する。 mysql は localhost の 3306 番で動いているものとし、<br />
solrsample っていう database があるものとする。 password は hogehoge。  </p>

<div>
  <pre><code class="bash">diff --git a/conf/db-data-config.xml b/conf/db-data-config.xml
new file mode 100644
index 0000000..c758319
--- /dev/null
+++ b/conf/db-data-config.xml
@@ -0,0 +1,24 @@
+&lt;dataConfig&gt;
+    &lt;dataSource type=&quot;JdbcDataSource&quot; driver=&quot;com.mysql.jdbc.Driver&quot;
+        url=&quot;jdbc:mysql://localhost:3306/solrsample&quot;
+        user=&quot;vimtaku&quot; password=&quot;hogehoge&quot;/&gt;
+    &lt;document&gt;
+        &lt;entity name=&quot;recipe_mst&quot; pk=&quot;recipe_id&quot;
+            query=&quot;select * from recipe_mst&quot;
+            deltaImportQuery=&quot;SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}&quot;
+            deltaQuery=&quot;select recipe_id from recipe_mst WHERE updated_at &gt;= '${dataimporter.last_index_time}'&quot;&gt;
+            &lt;field column=&quot;recipe_id&quot; name=&quot;recipe_id&quot; /&gt;
+            &lt;field column=&quot;recipe_name&quot; name=&quot;recipe_name&quot; /&gt;
+            &lt;field column=&quot;price&quot; name=&quot;price&quot; /&gt;
+            &lt;entity name=&quot;recipe_genre_rel&quot;
+                query=&quot;select * from recipe_genre_rel where recipe_id = '${recipe_mst.recipe_id}'&quot;&gt;
+                &lt;entity name=&quot;genre_mst&quot; query=&quot;select * from genre_mst where genre_id = '${recipe_genre_rel.genre_id}'&quot;&gt;
+                    &lt;field column=&quot;name&quot; name=&quot;genre&quot; /&gt;
+                &lt;/entity&gt;
+            &lt;/entity&gt;
+            &lt;entity name=&quot;chef_mst&quot; query=&quot;select * from chef_mst where chef_id = '${recipe_mst.chef_id}'&quot;&gt;
+                &lt;field column=&quot;name&quot; name=&quot;chef&quot; /&gt;
+            &lt;/entity&gt;
+        &lt;/entity&gt;
+    &lt;/document&gt;
+&lt;/dataConfig&gt;
diff --git a/conf/solrconfig.xml b/conf/solrconfig.xml
index 00b7555..2d19133 100644
--- a/conf/solrconfig.xml
+++ b/conf/solrconfig.xml
@@ -84,6 +84,9 @@
   &lt;lib dir=&quot;../../../contrib/velocity/lib&quot; regex=&quot;.*\.jar&quot; /&gt;
   &lt;lib dir=&quot;../../../dist/&quot; regex=&quot;solr-velocity-\d.*\.jar&quot; /&gt;

+  &lt;lib dir=&quot;../../../dist/&quot; regex=&quot;solr-dataimporthandler-.*\.jar&quot; /&gt;
+  &lt;lib dir=&quot;../../../dist/&quot; regex=&quot;mysql.*\.jar&quot; /&gt;
+
   &lt;!-- an exact 'path' can be used instead of a 'dir' to specify a
        specific jar file.  This will cause a serious error to be logged
        if it can't be loaded.
@@ -1513,6 +1516,15 @@
   &lt;/requestHandler&gt;


+  &lt;requestHandler name=&quot;/dataimport&quot;
+      class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;
+      &lt;lst name=&quot;defaults&quot;&gt;
+          &lt;str name=&quot;config&quot;&gt;db-data-config.xml&lt;/str&gt;</code></pre>
</div>

<p>だいたいこんなかんじで、管理画面から /dataimport で full-import するといける。</p>

<h2 id="deltaquery-">deltaQuery について</h2>
<p>差分 update(delta-import) のとき、deltaQuery がまず、実行される。
deltaQuery は どんなに nest が深くても実行される(たぶん)。</p>

<h3 id="deltaquery--parentdeltaquery-">deltaQuery と parentDeltaQuery の関係</h3>
<ul>
  <li>deltaQuery で mysql のレコードがヒットした場合に、 parentDeltaQuery が呼び出される</li>
  <li>parentDeltaQuery では ${chef_mst.chef_id} のように、 deltaQuery でヒットしたものが使える</li>
  <li>parentDeltaQuery で、 pk の 値を select するようにしておく。</li>
  <li>pk のある entity に、
    <ul>
      <li>deltaImportQuery 属性がなくて query 属性がある場合には where pk = ‘’ としてクエリが実行され再登録される模様</li>
      <li>deltaImportQuery 属性がある場合にはそのクエリが実行される。</li>
    </ul>
  </li>
</ul>

<p>例えば</p>

<div>
  <pre><code class="xml">&lt;dataConfig&gt;
    &lt;dataSource type=&quot;JdbcDataSource&quot; driver=&quot;com.mysql.jdbc.Driver&quot;
        url=&quot;jdbc:mysql://localhost:3306/solrsample&quot;
        user=&quot;vimtaku&quot; password=&quot;hogehoge&quot;/&gt;
    &lt;document&gt;
        &lt;entity name=&quot;recipe_mst&quot; pk=&quot;recipe_id&quot;
            query=&quot;select * from recipe_mst&quot;
            deltaImportQuery=&quot;SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}&quot;
            deltaQuery=&quot;select recipe_id from recipe_mst WHERE updated_at &gt;= '${dataimporter.last_index_time}'&quot;
            &gt;
            &lt;field column=&quot;recipe_id&quot; name=&quot;recipe_id&quot; /&gt;
            &lt;field column=&quot;recipe_name&quot; name=&quot;recipe_name&quot; /&gt;
            &lt;field column=&quot;price&quot; name=&quot;price&quot; /&gt;
            &lt;entity name=&quot;recipe_genre_rel&quot;
                query=&quot;select * from recipe_genre_rel where recipe_id = '${recipe_mst.recipe_id}'&quot;&gt;
                &lt;entity name=&quot;genre_mst&quot; query=&quot;select * from genre_mst where genre_id = '${recipe_genre_rel.genre_id}'&quot;&gt;
                    &lt;field column=&quot;name&quot; name=&quot;genre&quot; /&gt;
                &lt;/entity&gt;
            &lt;/entity&gt;
            &lt;entity name=&quot;chef_mst&quot; pk=&quot;chef_id&quot;
                query=&quot;select * from chef_mst where chef_id = '${recipe_mst.chef_id}'&quot;
                deltaQuery=&quot;select chef_id from chef_mst where chef_id = 1&quot;
                parentDeltaQuery=&quot;select recipe_id from chef_mst where chef_id = ${chef_mst.chef_id} limit 1&quot;
                &gt;
                &lt;field column=&quot;name&quot; name=&quot;chef&quot; /&gt;
            &lt;/entity&gt;
        &lt;/entity&gt;
    &lt;/document&gt;
&lt;/dataConfig&gt;</code></pre>
</div>

<p>こうなっていた場合、<br />
deltaQuery=”select chef_id from chef_mst where chef_id = 1”<br />
これでヒットした chef_id を元に<br />
parentDeltaQuery=”select recipe_id from chef_mst where chef_id = ${chef_mst.chef_id} limit 1”<br />
が実行されて、<br />
deltaImportQuery=”SELECT * FROM recipe_mst WHERE recipe_id = ${dataimporter.delta.recipe_id}”<br />
これが実行される。  </p>

<h2 id="dih--javascript-">DIH の直前で Javascript でデータを加工する</h2>

<h3 id="updatehandler--updatechain">UpdateHandler と UpdateChain</h3>
<p>UpdateHandler と DIH の仕組みはこの図のようになっている。  </p>

<p><img src="http://gyazo.com/47cc999c6d1a7a31ed9c2bdd0080ce59.png" />
(改訂版 Apache Solr 入門より引用。)</p>

<p>DIH とは疎になっていて、 UpdateHandler はどの requestHandler でも使えるように見える。  </p>

<p>設定には<a href="https://github.com/vimtaku/solr_sample/commit/85c7439d239d55e3344cc20a32461536c3201eb8">この差分</a>
を参照。  </p>

<p>これを使えば、json のカラムからとった json を parse して multiValue なカラムに登録などができる。  </p>

<h3 id="section-10">なんかうまくいかない場合</h3>
<p>キャッシュされたデータを更新するとたまに更新されない。<br />
自分は一回 core を削除、 $SOLR_HOME の data ディレクトリを rm -rf している。<br />
もっといい、データ削除(もしくはいれかえ)の方法知っている人は教えて下さい。。  </p>

<h2 id="url">参考URL</h2>
<p><a href="http://ja.wikipedia.org/wiki/Lucene">http://ja.wikipedia.org/wiki/Lucene</a><br />
<a href="http://wiki.apache.org/solr/DataImportHandler">http://wiki.apache.org/solr/DataImportHandler</a><br />
<a href="http://ochien.seesaa.net/article/153191074.html">http://ochien.seesaa.net/article/153191074.html</a><br />
<a href="http://d.hatena.ne.jp/kudzu/20110513/1305313247">http://d.hatena.ne.jp/kudzu/20110513/1305313247</a><br />
<a href="http://d.hatena.ne.jp/bowez/20100405#p2">http://d.hatena.ne.jp/bowez/20100405#p2</a>  </p>

<p>_</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker_boot2docker_port_foward]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/10/docker-boot2docker-port-foward/"/>
    <updated>2014-02-10T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/10/docker-boot2docker-port-foward</id>
    <content type="html"><![CDATA[
<h2 id="os-x-108--docker">OS X 10.8 公式サポートで話題の Docker</h2>

<p><a href="http://qiita.com/kanekoa/items/cf3cabb23da69c609002">これ</a>をもとにとりあえず docker client を準備,<br />
docker server を建てた。  </p>

<h2 id="mac--localhost--telnet-11211--memcached-">mac の localhost に telnet 11211 したら memcached につながるようにしたい</h2>

<p><a href="https://www.docker.io/learn/dockerfile/level2/">https://www.docker.io/learn/dockerfile/level2/</a>
これをもとに Dockerfile を作った。 ここでは ubuntu を元にした vimtaku/memcached_1 とした。  </p>

<p>Dockefile</p>
<div>
  <pre><code class="bash"># Memcached
#
# VERSION       2.2

# use the ubuntu base image provided by dotCloud
FROM ubuntu

MAINTAINER Victor Coisne victor.coisne@dotcloud.com

# make sure the package repository is up to date
RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot; &gt; /etc/apt/sources.list
RUN apt-get update

# install memcached
RUN apt-get install -y memcached

# Launch memcached when launching the container
ENTRYPOINT [&quot;memcached&quot;]

# run memcached as the daemon user
USER daemon

# expose memcached port
EXPOSE 11211</code></pre>
</div>

<div>
  <pre><code class="bash">docker build -t vimtaku/memcached_1 - &lt; Dockerfile</code></pre>
</div>

<p>これでとりあえず memcached な image を作れる。  </p>

<div>
  <pre><code class="bash">docker run -p 11211:11211 vimtaku/memcached_1</code></pre>
</div>

<p>これで boot2docker -&gt; ubuntu が立つ。  </p>

<h2 id="section">追記(2014/02/13)</h2>
<p>成功法っぽいのを発見した。<br />
恥ずかしながら ssh port fowarding が -L オプションで できるっていうのを
<a href="http://motemen.hatenablog.com/entry/2014/02/11/Dockerfile_%E3%82%92%E5%85%83%E3%81%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E8%B5%B0%E3%82%89%E3%81%9B%E3%81%A6%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB%E3%83%9D%E3%83%BC%E3%83%88%E3%82%92">このブログ記事</a>
で初めて知った。  </p>

<p>まだ、やってないけど  </p>
<div>
  <pre><code class="bash">ssh -L 11211:localhost:11211 -p 2022 root@localhost</code></pre>
</div>

<p>とかすれば、 ssh port fowarding できるので、以下の手順は不要。</p>

<p>追記終わり。</p>

<h2 id="section-1">とりあえず確認するには</h2>

<p>とりあえず確認するには<br />
boot2docker ssh して ifconfig | grep -A4 docker0 すると<br />
172…. のような IP が見える。<br />
そこに対して telnet すると ちゃんと疎通できてる。<br />
ちなみに telnet localhost 11211 しても同様。  </p>

<p>あとは mac -&gt; boot2docker に 11211 疎通できればよい。<br />
ぐぐったら
<a href="http://fogstack.wordpress.com/2014/02/09/docker-on-osx-port-forwarding/">http://fogstack.wordpress.com/2014/02/09/docker-on-osx-port-forwarding/</a> の記事が見つかったのでほぼこれの通りに、</p>

<div>
  <pre><code class="bash">boot2docker down
したあと
VBoxManage modifyvm &quot;boot2docker-vm&quot; --natpf1 &quot;guestmemcached,tcp,,11211,,11211&quot;
boot2docker up
docker run -d -p 11211:11211 vimtaku/memcached_1</code></pre>
</div>

<p>これで mac から telnet localhost 11211 で行けた。たぶん。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014/2/9]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/09/life-feb-9/"/>
    <updated>2014-02-09T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/09/life-feb-9</id>
    <content type="html"><![CDATA[
<h2 id="section">土日振り返り</h2>
<p>雪うざい。地味に perfect ruby を進めた。<br />
ruby 力が2くらい上がった。気がする。  </p>

<h2 id="section-1">勉強途中経過</h2>

<h3 id="section-2">進んでない</h3>
<ul>
  <li>rails tutorial 6 までやった</li>
</ul>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">進んだ</h3>
<ul>
  <li>パーフェクトルビー15章まで読んだ
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>詳解UNIXプログラミング第7章まで読んだ</li>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>chef-solo 入門 #23 まで読んだ(どっかで手を動かしながらやる)</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2月の solr には雪も full]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/08/life-feb-8/"/>
    <updated>2014-02-08T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/08/life-feb-8</id>
    <content type="html"><![CDATA[
<h2 id="section">先週の振り返り</h2>
<p>先週は solr 祭りだった。<br />
solr は存在くらいしか知らなかったけど、非常によく出来たソフトウェアで<br />
これを使いこなせれば(使い方を知っていれば)非常によい価値を<br />
提供できる気がした。  </p>

<p>先々週はあんまり何やったか覚えていない。<br />
そういや 先週は docker とかめっちゃいいなと思ってたところだった。<br />
あとで触ってみよう。  </p>

<p>ところで東京のくせに雪とか降るのは生意気だと思う(北から目線。  </p>

<h2 id="section-1">勉強途中経過</h2>

<h3 id="section-2">進んでない</h3>
<ul>
  <li>rails tutorial 6 までやった</li>
</ul>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">進んだ</h3>
<ul>
  <li>詳解UNIXプログラミング第7章まで読んだ</li>
  <li>パーフェクトルビー10章まで読んだ
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>chef-solo 入門 #23 まで読んだ(どっかで手を動かしながらやる)</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/2/8)プログラマの数学</li>
  <li>(2014/2/6)(一周目、さらっと)[改訂新版] Apache Solr入門 ~オープンソース全文検索エンジン</li>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[イチロー]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/08/ichiro/"/>
    <updated>2014-02-08T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/08/ichiro</id>
    <content type="html"><![CDATA[
<h2 id="section">名言</h2>

<h3 id="by-">小さいことを積み重ねるのが、とんでもないところへ行くただひとつの道だと思っています。(by イチロー)</h3>

<p>はい、がんばりましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker の概要をしらべて触ってみた]]></title>
    <link href="http://vimtaku.github.io/blog/2014/02/02/what-is-docker/"/>
    <updated>2014-02-02T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/02/02/what-is-docker</id>
    <content type="html"><![CDATA[
<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">はじめに</a></li>
  <li><a href="#docker-">docker とは</a></li>
  <li><a href="#lxc-">LXC とは</a></li>
  <li><a href="#aufs-union-fs-">aufs, Union FS とは</a>    <ul>
      <li><a href="#union-mount">union mount</a></li>
      <li><a href="#section-1">読み込み</a></li>
      <li><a href="#section-2">書き込み</a></li>
      <li><a href="#section-3">削除</a></li>
    </ul>
  </li>
  <li><a href="#github-">github 的な要素</a>    <ul>
      <li><a href="#section-4">出来上がりイメージ</a></li>
    </ul>
  </li>
  <li><a href="#section-5">所感</a></li>
  <li><a href="#section-6">参考文献</a></li>
</ul>

<h2 id="section">はじめに</h2>
<p>この記事では Docker について自分なりに理解するために調べたことをまとめる。<br />
Docker の tutorial は command line を ブラウザで実際に叩くところまでできるようになっているので、<br />
非常にわかりやすく入門できる。なので、 tutorial に関してはそっちをやったほうが良い。<br />
この記事は Docker ってこんな感じのやつなんだーってのが伝わればばいいなと思う。<br />
(ちなみに まだ Docker 歴は1日)</p>

<h2 id="docker-">docker とは</h2>
<p>LXC と aufs と github のようなものをうまくくみ合わせて提供される<br />
仮想化ソフトウェアだ。  </p>

<h2 id="lxc-">LXC とは</h2>
<p>Linux Container のこと。  </p>

<p><a href="http://gihyo.jp/admin/column/01/vm/2011/lxc_container">http://gihyo.jp/admin/column/01/vm/2011/lxc_container</a>によれば、  </p>
<blockquote><p>LXCの基本技術となるのが「コンテナ」と呼ばれる一種のリソース管理システムです。ファイルシステムの他，ホスト名やプロセス，ネットワークソケットなどのカーネルが扱うさまざまなリソースの管理テーブルを個々に用意し，これをコンテナごとに管理することで，コンテナごとに独立したOSのように動作させることができます。</p></blockquote>
<p>とある。<br />
また、カーネルの機能である <a href="http://ja.wikipedia.org/wiki/Cgroups">Cgroups</a> の説明をみれば非常によく理解できた。  </p>

<h2 id="aufs-union-fs-">aufs, Union FS とは</h2>
<p>ここに、 Union mount と Union type file system の資料がある。<br />
非常にわかりやすい説明だった。ここに、 aufs の説明もある。結構古いけど。。<br />
<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html</a>
ちょっとだけ簡単に自分用にまとめる。  </p>

<h3 id="union-mount">union mount</h3>
<p>filesystem A と filesystem B をマウントして、それぞれが file A, file B を同じディレクトリで持っていたとすると、<br />
union mount をつかったとき、fileA, file B の両方のファイルが見える。  </p>

<h3 id="section-1">読み込み</h3>
<p>open システムコールとかを通して呼ぶと、 union 機能が上から順に読んでいけば、差分的に一番新しいものを読める。<br />
両方のファイルシステムが fileA を持っていて、その内容がちがう場合、filesystem の mount の優先度(レイヤー順?)で<br />
どちらの filesystem の fileA が見えるか変わるんだと思う。  </p>

<h3 id="section-2">書き込み</h3>
<p>なんらかを書き込んで差分ができたとき、 上位ディスクとは違うものを保証しなければならないため、<br />
上位ディスクのものをコピーして書き込む。だからコピーオンライト。<br />
でもこの場合は、 copy-up と呼ばれて、プロセス fork でいうそれとは区別されている模様。  </p>

<h3 id="section-3">削除</h3>
<p>ファイルが削除されても、上位ディスクには存在しているため、事実上削除ができない。<br />
なので 特別なファイルを作成することで 消えたように見せる。(DB で言う論理削除みたいなもんだと認識)<br />
whiteout という。  </p>

<h2 id="github-">github 的な要素</h2>
<p><a href="https://index.docker.io">index.docker.io</a> レポジトリに image を push できる。<br />
memcached を <a href="https://www.docker.io/learn/dockerfile/">Dockerfile によって image を作る tutorial</a> があるので、それをやった。<br />
それでできた Dockerfile  を使って repository に push した例を以下に示す。<br />
ちなみに、 <a href="https://index.docker.io/account/">https://index.docker.io/account/</a> にあらかじめ登録しておいた。  </p>

<div>
  <pre><code class="bash">vagrant@ubuntu-12:~$ docker login
Username: vimtaku
Password:
Email: ******@gmail.com
Login Succeeded

vagrant@ubuntu-12:~$ docker build -t vimtaku/memcached_sample - &lt; Dockerfile

vagrant@ubuntu-12:~$ docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
vimtaku/memcached_sample   latest              242bd405025e        22 seconds ago      217.1 MB
run_memcached              latest              5f1cda03f61c        17 hours ago        217.1 MB
memcached                  latest              9166d484dda8        17 hours ago        217.1 MB
brand_new_memcached        latest              7bdd82d0abf7        20 hours ago        217.1 MB
memcached_new              latest              c18168a45363        20 hours ago        245.5 MB
ubuntu                     12.10               426130da57f7        7 days ago          127.6 MB
ubuntu                     quantal             426130da57f7        7 days ago          127.6 MB
ubuntu                     10.04               8589d4e9c7c6        7 days ago          139.6 MB
ubuntu                     lucid               8589d4e9c7c6        7 days ago          139.6 MB
ubuntu                     12.04               72e10143e54a        7 days ago          125.9 MB
ubuntu                     latest              72e10143e54a        7 days ago          125.9 MB
ubuntu                     precise             72e10143e54a        7 days ago          125.9 MB
ubuntu                     13.10               721f07d19f96        7 days ago          144.6 MB
ubuntu                     saucy               721f07d19f96        7 days ago          144.6 MB
ubuntu                     13.04               476aa49de636        7 days ago          133.6 MB
ubuntu                     raring              476aa49de636        7 days ago          133.6 MB

vagrant@ubuntu-12:~$ docker push vimtaku/memcached_sample
The push refers to a repository [vimtaku/memcached_sample] (len: 1)
Sending image list
Pushing repository vimtaku/memcached_sample (1 tags)
511136ea3c5a: Image already pushed, skipping 
b74728ce6435: Image already pushed, skipping 
72e10143e54a: Image already pushed, skipping 
28d8e9cef54f: Image successfully pushed 
6be17bb13216: Image successfully pushed 
1b910f3ee9b7: Image successfully pushed 
18e04c08eb9b: Image successfully pushed 
2e32ba041afa: Image successfully pushed 
1cf353d00dd8: Image successfully pushed 
242bd405025e: Image successfully pushed 
Pushing tags for rev [242bd405025e] on {https://registry-1.docker.io/v1/repositories/vimtaku/memcached_sample/tags/latest}</code></pre>
</div>

<p><br /></p>

<h3 id="section-4">出来上がりイメージ</h3>
<p><img src="http://gyazo.com/6a99a7bdffa6ce80369dad852461aacb.png" style="width:100%;" /></p>

<h2 id="section-5">所感</h2>
<p>この記事では、 docker の一番の利点だと感じている、 image を簡単に作って試す、みたいな部分は書いていない。<br />
すごい早さで image を作り出すことができるのには感動した。そこが一番の利点だと思う。<br />
あと、<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">この oreilly の資料</a>は 3回くらい読む価値はありそうだ。  </p>

<h2 id="section-6">参考文献</h2>
<p><a href="http://ja.wikipedia.org/wiki/LXC">http://ja.wikipedia.org/wiki/LXC</a><br />
<a href="http://gihyo.jp/admin/column/01/vm/2011/lxc_container">http://gihyo.jp/admin/column/01/vm/2011/lxc_container</a><br />
<a href="http://ja.wikipedia.org/wiki/Cgroups">http://ja.wikipedia.org/wiki/Cgroups</a><br />
<a href="http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html">http://www.oreilly.co.jp/community/blog/2010/02/union-mount-uniontype-fs-part-1.html</a><br />
<a href="http://teppeis.hatenablog.com/entry/docker">http://teppeis.hatenablog.com/entry/docker</a><br />
<a href="http://shibayu36.hatenablog.com/entry/2013/12/30/173949">http://shibayu36.hatenablog.com/entry/2013/12/30/173949</a><br />
<a href="http://2013.8-p.info/japanese/06-22-docker.html">http://2013.8-p.info/japanese/06-22-docker.html</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef についてのメモ2]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/27/chef-memo-2/"/>
    <updated>2014-01-27T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/27/chef-memo-2</id>
    <content type="html"><![CDATA[
<h2 id="chef--libraries-">chef の libraries を使う場合の今のところの俺の結論</h2>

<p>以下に述べる、 1 の方法を使う。  </p>

<p>とはいえ一長一短な気がするからどっちがいいって言えない。<br />
ちなみに libraries から node はみたいよね、っていう前提。<br />
あと、自分の環境(chef-solo, v11.8.2)にもよるかも。まぁ参考程度に。<br />
もっといい方法あったら教えて下さい。<br />
(っていうか意外に chef (libraries)のドキュメントって少ない気がする..)  </p>

<h2 id="libraries-">libraries を使う方法</h2>
<ol>
  <li>class MyClass みたいなクラスを定義して、 new するときに node 渡すようにして、あとは好きに使うパターン</li>
  <li>module MyModule みたいなモジュールを定義して、extend してから、わかりやすいメソッドを呼び出して使うパターン</li>
</ol>

<h2 id="section">1. のメリット、デメリット</h2>

<h3 id="section-1">メリット</h3>
<ul>
  <li>呼びたいメソッドを MyClass.method とかけるから、コードが読みやすいのではないだろうかということ。</li>
</ul>

<h3 id="section-2">デメリット</h3>
<ul>
  <li>他のレシピからでも MyClass が使える</li>
</ul>

<h2 id="section-3">2. のメリット、デメリット</h2>

<h3 id="section-4">メリット</h3>
<ul>
  <li>名前空間を汚染しない</li>
</ul>

<h3 id="section-5">デメリット</h3>
<ul>
  <li>いちいち呼びたい recipe で extend とか書かなきゃいけない</li>
  <li>呼び出すときに method_name だけしかないからちょっと読みにくいかも、と思った。 ruby ってそういうもん？</li>
</ul>

<h2 id="section-6">以下駄文メモ</h2>

<ul>
  <li>class をつかう場合、 名前空間を切って使用すると node が見えないので不便
    <ul>
      <li>class Chef::Recipe にメソッドをはやして node を使えば見れる</li>
      <li>class Chef::Recipe::Hoge からは node はみえない
        <ul>
          <li>そんならChef::Recipe::Hoge みたいなインスタンスを new するときに node 渡して使えばいいんじゃね?</li>
          <li>まぁできんことはない</li>
        </ul>
      </li>
      <li>class Chef::Recipe にメソッド生やすのとかは Recipe が汚れるからやらない方がいい</li>
      <li>単純に class MyClass みたいなやつを new してそれを使うのが吉かも</li>
      <li>でも libraries に定義しているから他のレシピから使われる可能性があって、閉じたい人的にはアレ</li>
    </ul>
  </li>
  <li>module をつかう場合
    <ul>
      <li>extend Module名 を使えば、 node は見えるし、使う場所が限られる
        <ul>
          <li>いちいち extend するのはめんどい</li>
          <li>呼び出すとき method 名 だけになるからそれが許容できるならそれでもいいかも</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="section-7">関連記事</h2>
<p><a href="http://vimtaku.github.io/chef/2014/01/24/chef-memo/">http://vimtaku.github.io/chef/2014/01/24/chef-memo/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一月ももう終わりそう]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/26/life-jan-last/"/>
    <updated>2014-01-26T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/26/life-jan-last</id>
    <content type="html"><![CDATA[
<h2 id="section">先週の振り返り</h2>
<p>先週は chef と格闘しっぱなしだった。<br />
まぁでも opsworks についての理解もかなり深まったし、<br />
chef の感覚はものすごくつかめたのでよかった。<br />
自分でも新しい recipe 複数かいたし。<br />
でもなんだか仕事が忙しかった気がする。<br />
あと、ブログのアウトプットも増えてきた。<br />
だれに読まれようが関係ない気持ちで書くと案外かけるもんだ。<br />
まぁ, Jekyll で書けるってのがかなり大きいんだけれども。  </p>

<p>あ、あと ruby 書くために整理したかったので .vimrc を一新した。<br />
そして今流行の homesick を使うようにした。<br />
各環境で .zshrc とか違っている感があるので、徐々に改善していく。  </p>

<h2 id="section-1">勉強途中経過</h2>

<h3 id="section-2">進んだ</h3>
<ul>
  <li>rails tutorial 6 までやった</li>
</ul>

<h2 id="section-3">読書途中経過</h2>

<h3 id="section-4">進んだ</h3>
<ul>
  <li>詳解UNIXプログラミング第6章まで読んだ</li>
  <li>プログラマの数学 4章まで読んだ</li>
  <li>パーフェクトルビー5章まで読んだ
    <ul>
      <li>手を動かしながら ver</li>
    </ul>
  </li>
</ul>

<h3 id="section-5">積んでる</h3>
<ul>
  <li>オペレーティングシステム 6章まで読んだ</li>
  <li>Webエンジニアのためのデータベース技術［実践］入門 7章まで読んだ</li>
  <li>ネットワークはなぜつながるのか?</li>
  <li>chef-solo 入門 #23 まで読んだ(どっかで手を動かしながらやる)</li>
</ul>

<h3 id="section-6">読み終えた</h3>
<ul>
  <li>(2014/1/26)マスタリングTCP/IP 入門第5版 とりあえず読み切った</li>
  <li>(2014/1/13)読む筋トレ</li>
  <li>(2014/1/8)ザ・コーチ 最高の自分に出会える「目標の達人ノート」</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef についてのメモ]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/24/chef-memo/"/>
    <updated>2014-01-24T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/24/chef-memo</id>
    <content type="html"><![CDATA[
<h2 id="section">概要</h2>
<p>chef について、現時点でわかっている、知っておいたら役立ちそうなメモを書いておく。
いわゆる実際ソース追えばわかるんだけど、まだソース追ってないので段階での現在わかっている挙動まとめ。  </p>

<h2 id="attribute-">attribute の読み込み順について</h2>
<ul>
  <li>attributes/default.rb が一番最初に読み込まれる</li>
  <li>attributes/hoge.rb などの、attributes ディレクトリの他のファイルが辞書順に読み込まれる</li>
  <li>node の値は各ファイルで上書きをすることができる  </li>
</ul>

<h2 id="libraries-">libraries について</h2>
<ul>
  <li>libraries/hoge.rb などに、 Chef::Recipe::Hoge などのクラスを定義して、recipe から呼び出すことができる。
    <ul>
      <li>Hoge.fuga_method として recipe から使用可能。</li>
    </ul>
  </li>
  <li>他のレシピを同時に実行するときでも、Hoge.fuga_method は使用可能。</li>
  <li>libraries/mymodule.rb などに、 module MyModule などのモジュールを定義して、 recipe から呼び出すことができる。
    <ul>
      <li>自分がイマ実行しているレシピのみでモジュールを使用したい場合は、レシピに extend MyModule して特異メソッドとしてメソッドを生やす。</li>
      <li>他のレシピでもモジュールを使用したい場合は、::Chef::Recipe.send(:include, MyModule) として Chef::Recipe クラスに include することで、my_module_method を呼び出せる。</li>
    </ul>
  </li>
</ul>

<h2 id="chef-">chef 実行時のレシピについて</h2>
<ul>
  <li>各レシピ、例えば first, second っていうレシピがあったとすると、それらは Chef::Recipe インスタンスである。
    <ul>
      <li>chef 実行時に self をみればわかる</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fog っていう gem で use_iam_profile があんまうまく行かない件]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/21/fog-iam-profile/"/>
    <updated>2014-01-21T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/21/fog-iam-profile</id>
    <content type="html"><![CDATA[
<h2 id="section">現象</h2>
<p>iam_profile を使うことで、 aws_access_key や aws_access_secret を具体的に指定しなくても、<br />
metadata な endpoint にアクセスして一時的な access_key と secret を取得できるようになっている(できたのは割と最近らしい)。<br />
それなら、iam を使いたいわけなんだけど、 fog v1.18.0 と v1.19.0 で試しても use_iam_profile がうまくいかない。  </p>

<p>呼び出しているクライアントライブラリは asset_sync v1.0.0 と elasticsearch v0.3.4 。<br />
どちらも aws_credential fetcher で credential を取得してるみたいだけど、それを使ってないようにみえた。  </p>

<h2 id="section-1">対処</h2>
<p>全部読んでないからわからないけど、俺の予想が合っていれば<br />
credential を撮ってきたものを使用していないので ここが怪しかった。  </p>

<p>lib/fog/core/service.rb</p>
<div>
  <pre><code class="bash">-options = options.merge(fetch_credentials(options))
+options = fetch_credentials(options).merge(options)</code></pre>
</div>

<p>とりあえずもっと調べなきゃよくわからない。<br />
これがうまくいっていそうなら pull req だしてみよう。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef で opsworks のインスタンス起動時に cloudwatch の alarm を作成するためにしたこと]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/20/cloud-watch-alarm/"/>
    <updated>2014-01-20T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/20/cloud-watch-alarm</id>
    <content type="html"><![CDATA[
<h2 id="toc">TOC</h2>
<ul id="markdown-toc">
  <li><a href="#toc">TOC</a></li>
  <li><a href="#section">大まかな流れ</a></li>
  <li><a href="#iam-">1. IAM の設定</a></li>
  <li><a href="#sns-">2. SNS のトピックの作成</a></li>
  <li><a href="#cloud-watch--api--cli-">3. cloud watch の API を cli から叩いてみる</a>    <ul>
      <li><a href="#from-cli">メトリックの作成 from cli</a></li>
    </ul>
  </li>
  <li><a href="#cloud-watch-">4. cloud watch での作成確認</a></li>
  <li><a href="#chef-recipe-">5. chef recipe を書く</a></li>
  <li><a href="#opsworks--setup-">6. opsworks のレイヤー設定で、 setup ライフサイクルイベントで設定</a>    <ul>
      <li><a href="#section-1">おまけ</a>        <ul>
          <li><a href="#section-2">気をつけること要点</a></li>
          <li><a href="#section-3">標準出力から入力をし続けるからメモリに確保し続けるコマンド</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="section">大まかな流れ</h2>
<ol>
  <li>IAM の設定</li>
  <li>SNS のトピックの作成(メール送る用)</li>
  <li>cloud watch の API を cli から叩いてみる</li>
  <li>cloud watch の手動確認</li>
  <li>chef recipe を書く</li>
  <li>opsworks のレイヤー設定で、 setup ライフサイクルイベントで設定</li>
</ol>

<p>ではさっそく。  </p>

<h2 id="iam-">1. IAM の設定</h2>
<p>opsworks ではインスタンス生成時に デフォルトで Default IAM instance profile を設定できる。<br />
ここの IAM Role に権限がないと、 aws cli から操作ができないので注意する。
この記事では、IAMの設定については詳細に明記しない。  </p>

<h2 id="sns-">2. SNS のトピックの作成</h2>
<p>コマンドラインか AWS Console から、メール送る用に トピックを作成する。<br />
監視しているインスタンスの異常時にメールを受け取るため。<br />
CLI ではこちらが参考になる。<br />
<a href="http://exploreaws.doorblog.jp/archives/24701093.html">http://exploreaws.doorblog.jp/archives/24701093.html</a><br />
サブスクリプションを許可しておくと後々のチェックで捗る。<br />
ちなみにこれは、あとで alarm-actions に指定する。  </p>

<p>ここではできた topic が、仮に arn:aws:sns:ap-northeast-1:99999999:mogemoga としておく。  </p>

<h2 id="cloud-watch--api--cli-">3. cloud watch の API を cli から叩いてみる</h2>

<h3 id="from-cli">メトリックの作成 from cli</h3>

<div>
  <pre><code class="bash">aws cloudwatch put-metric-alarm
--alarm-name='disk-usage' \
             --alarm-description 'Disk usage alert' \
             --alarm-actions='arn:aws:sns:ap-northeast-1:99999999:mogemoga'   \
             --namespace  'System/Linux'  \
             --metric-name  'DiskSpaceUtilization'   \
             --dimensions='[{&quot;Name&quot;: &quot;InstanceId&quot;,&quot;Value&quot;: &quot;i-deadbeaf&quot;},{&quot;Name&quot;:&quot;Filesystem&quot;,&quot;Value&quot;: &quot;/dev/xvda1&quot;},{&quot;Name&quot;:&quot;MountPath&quot;,&quot;Value&quot;:&quot;/&quot;}]' \
             --statistic  'Average' \
             --period  '300'   \
             --unit 'Percent'
             --threshold  '50'
             --evaluation-periods  '1'
             --region 'ap-northeast-1'
             --comparison-operator 'GreaterThanOrEqualToThreshold'</code></pre>
</div>

<p>ここですんなりうまくいくかどうかが別れると思う。<br />
IAM role を使う場合は、権限が許可されていれば問題なく通ると思う。<br />
権限がない場合は、 cli の credential 設定が必要になるかもしれない。<br />
<a href="http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html">http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html</a>  </p>

<h2 id="cloud-watch-">4. cloud watch での作成確認</h2>
<p>上記のコマンドで成功していれば AWS Console から cloud watch のアラームができているはずなので確認する。  </p>

<h2 id="chef-recipe-">5. chef recipe を書く</h2>

<p>あとは、上記 3 を実行する chef のレシピを書いて、 opsworks が取ってくる custom chef recipe のレポジトリに配置すればおｋ．<br />
今回は load average もとりたかったので、<br />
<a href="http://aws.amazon.com/code/8720044071969977">http://aws.amazon.com/code/8720044071969977</a><br />
のスクリプトを改変して使用することにした。<br />
ソースはこちら -&gt; <a href="https://github.com/FumihikoSHIROYAMA/cloud_watch_script.git">https://github.com/FumihikoSHIROYAMA/cloud_watch_script.git</a><br />
disk space をとったりすることができる pl なのですごく便利。  </p>

<p>下記の repository は crontab に 上記の pl (load average は別) のものを登録するものだ。<br />
<a href="https://github.com/alexism/cloudwatch_monitoring">https://github.com/alexism/cloudwatch_monitoring</a>  </p>

<p>これをフォークして、 load average とれる cron を作る機能と、 アラーム登録する奴を書いた。<br />
<a href="https://github.com/vimtaku/cloudwatch_monitoring.git">https://github.com/vimtaku/cloudwatch_monitoring.git</a><br />
chef 力低めで申し訳なので、アドバイス、pull req など大歓迎。  </p>

<h2 id="opsworks--setup-">6. opsworks のレイヤー設定で、 setup ライフサイクルイベントで設定</h2>
<p>これはもう、 opsworks に慣れているひとなら問題無いと思う。<br />
5 で作ったものがうまくいっていれば(というか試すときに deploy かどっかで試すと思うんだけど)<br />
それを setup に移動してやるだけだ。  </p>

<h3 id="section-1">おまけ</h3>

<h4 id="section-2">気をつけること要点</h4>
<ul>
  <li>IAM Role に権限がない場合があるので気をつける
    <ul>
      <li>参考
        <ul>
          <li><a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/UsingIAM.html">http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/UsingIAM.html</a></li>
          <li><a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVolume.html">http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-CreateVolume.html</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>opsworks では chef の data_bags が使えないのを頭に入れておく
    <ul>
      <li>自分はあとから気づいたパターン
        <ul>
          <li>詳細は <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>mon-put-metric-alarm の代わりに aws cloudwatch put-metric-aaerm を使用する
    <ul>
      <li>role の設定ができていても credential エラーとかいっぱい言われるため。</li>
    </ul>
  </li>
  <li>alert と alarm が似ているので alerm ってタイポに気をつける</li>
</ul>

<h4 id="section-3">標準出力から入力をし続けるからメモリに確保し続けるコマンド</h4>
<div>
  <pre><code class="bash">/dev/null &lt; $(yes)
cat - &lt; $(yes)</code></pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俺なりの自炊セットをそろえた]]></title>
    <link href="http://vimtaku.github.io/blog/2014/01/19/jisui-best-practice/"/>
    <updated>2014-01-19T00:00:00+09:00</updated>
    <id>http://vimtaku.github.io/blog/2014/01/19/jisui-best-practice</id>
    <content type="html"><![CDATA[
<h2 id="section">背景</h2>
<p>覚悟を決めたので自炊セットを買うことにした。<br />
電子書籍は最近出てくることが多くなったとはいえ、<br />
すべてが電子書籍で販売されている訳ではないからだ。<br />
Nexus7 を存分に生かすために買った自炊セットの<br />
俺なりのベストプラクティスをここに記載する。  </p>

<p>とはいえ、家にある本の数は100冊程度なので、<br />
もしかしたら裁断サービスのほうが安く上がるかもしれないが<br />
安値で自炊セットをそろえれば、家の雑多な書類とかも処理できるし<br />
楽なのでそろえることにした。  </p>

<p>とにかく安くそろえることを前提とした。</p>

<h2 id="section-1">俺なりの結論</h2>
<ul>
  <li>スキャナ
    <ul>
      <li>image FORMULA DR-C125</li>
    </ul>
  </li>
  <li>裁断機
    <ul>
      <li>カール事務器 ディスクカッターA4サイズ対応 丸刃40枚裁断(2往復) ブラック DC-210N</li>
    </ul>
  </li>
</ul>

<p>計、約3万円也。。</p>

<h2 id="section-2">スキャナの選定</h2>
<p>スキャナは実際すごくまよったが、とにかく安くそろえたかったので、<br />
ScanSnap1500 の中古か image FORMULA DR-C125 にしようと思っていた。<br />
結構比較記事があるので、ググってもらえばわかると思うけど、<br />
SS1500は重送とかが結構おこるといわれていたのと、Amazon のレビューの評判が<br />
そこそこよさげだったので、 image FORMULA DR-C125 にした。<br />
安さの観点から、比較対象として SS1300 とか、ハンディスキャナとかがあったけど<br />
SS1500 とのスキャンスピード比較動画が結構えげつない差だったので SS1300 はやめた。<br />
ちなみに、 SS1500 よりも DR-C125 のほうが早い感じらしい。<br />
ScanSnap1500 マジ良いみたいな話で、実際に使ったこと無いから比較できないけど、<br />
DR-C125 はとても良いものだった。ちなみにヤフオクで 約2万円で中古を買った。<br />
なんていうか、Mac 用のドライバを普通にインストールして、<br />
すぐにスキャンできた。OCR も効いている。<br />
新品も Amazon で2.7万くらいなので、新品でも良いかもしれない。<br />
アフィは張らない。  </p>

<h2 id="section-3">裁断機の選定</h2>
<p>ローラーカッター(1000円)とカッターマット、定規で行けるかと思っていたんだけど、<br />
分厚い本とか、マジ無理です。絶対無理。<br />
いや、無理ではない、正確には。<br />
でも、自炊とか効率的なことを考える人がやることではない。<br />
カッターでもいい人は、新書とかばかりのひと。<br />
それなら余裕。技術書はたぶん相当に厳しい。<br />
なので、ちょうど今さっき、評判が割と良い DC-210N の裁断機を買った。<br />
約1万円也。<br />
どうなるかわからないが、絶対手動よりはマシだと思う。<br />
それくらい、非現実的だと思う。行けると思っていた俺浅はか。  </p>

<h2 id="section-4">あとは読むだけ</h2>
<p>自炊しっぱなしで読まないみたいなのがありそうだけど、必ず読むよ。<br />
学習し続けることは、尊い。<br />
たゆまぬ努力を続けよう。</p>

]]></content>
  </entry>
  
</feed>
